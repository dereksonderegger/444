[
["7-factors.html", "Chapter 7 Factors 7.1 Creation and Structure 7.2 Change Labels 7.3 Reorder Levels 7.4 Add or substract Levels 7.5 Exercises Example Distributions mosaic::plotDist() function Base R functions Exercises", " Chapter 7 Factors library(tidyverse) # loading ggplot2 and dplyr In R we can store categorical information as either strings or as factors. To a casual user, it often doesn’t matter how the information is stored because the modeling and graphing programs happily convert strings into factors whenever necessary. However a deeper understanding of how factors are stored and manipulated allows a user much finer control in the modeling and graphing. We will be interested in the following broad classes of manipulations: Edit Factor Labels Goal forcats function Manually change the label(s) fct_recode(f, new_label = &quot;old_label&quot;) Systematically change all labels fct_relabel(f, function) Reorder Levels Goal forcats function Set order manually fct_relevel(f, 'b', 'a', 'c') Set order based on another vector fct_reorder(f, x) Set order based on which category is most frequent fct_infreq(f) Set order based on when they first appear fct_inorder(f) Reverse factor order fct_rev(f) Rotate order left or right fct_shift(f, steps) Add or Subtract Levels Goal forcats function Manually select categories to collapse into one fct_collapse(f, other = c('a','b')) Add a new factor level fct_expand(f, 'new level') 7.1 Creation and Structure R stores factors as a combination of a vector of category labels and vector of integers representing which category a data value belongs to. For example, lets create a vector of data relating to what soft drinks my siblings prefer. # A vector of character strings. drinks &lt;- c(&#39;DietCoke&#39;, &#39;Coke&#39;, &#39;Coke&#39;, &#39;Sprite&#39;, &#39;Pepsi&#39;) str(drinks) ## chr [1:5] &quot;DietCoke&quot; &quot;Coke&quot; &quot;Coke&quot; &quot;Sprite&quot; &quot;Pepsi&quot; # convert the vector of character strings into a factor vector drinks &lt;- factor(drinks) # Category and Label mapping table data.frame( Category=1:4, labels=levels(drinks)) ## Category labels ## 1 1 Coke ## 2 2 DietCoke ## 3 3 Pepsi ## 4 4 Sprite as.integer(drinks) # Print the category assignments ## [1] 2 1 1 4 3 Notice that the factor has levels “Coke”, “DietCoke”, “Pepsi”, and “Sprite” and that the order of these levels is very important because each observation is saved as an integer which denotes which category the observation belongs to. Because it takes less memory to store a single integer instead of potentially very long character string, factors are much more space efficient than storing the same data as strings. Whenever we do anything that sorts on this factor, the order of the labels in this mapping table determine the sort orders. In order to modify factor labels and levels, we basically need to modify this mapping table. We don’t do this directly, but rather using functions in the forcats package. 7.2 Change Labels To demonstrate the forcats functions, we will consider two datasets. The first consists of a dataset of a small US highschool with observations for each student and we record their year and gender. Students &lt;- expand.grid(Year=&#39;freshman&#39;, Gender=1, rep=1:23) %&gt;% add_row(Year=&#39;freshman&#39;, Gender=0, rep=1:25) %&gt;% add_row(Year=&#39;junior&#39;, Gender=1, rep=1:30) %&gt;% add_row(Year=&#39;junior&#39;, Gender=0, rep=1:32) %&gt;% add_row(Year=&#39;senior&#39;, Gender=1, rep=1:18) %&gt;% add_row(Year=&#39;senior&#39;, Gender=0, rep=1:19) %&gt;% add_row(Year=&#39;sophomore&#39;, Gender=1, rep=1:10) %&gt;% add_row(Year=&#39;sophomore&#39;, Gender=0, rep=1:12) # Variables that are character strings are coerced to factors. # Variables that are numeric are not, and should be explicitly turned to factors. Students &lt;- Students %&gt;% mutate( Gender = factor(Gender) ) Students %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() The first thing we ought to consider is how to change the factor labels for Gender. To do this we’ll use the fct_recode() function. # Change Gender from 0/1 to Female/Male Students &lt;- Students %&gt;% mutate( Gender = fct_recode(Gender, Male=&#39;1&#39;), Gender = fct_recode(Gender, Female=&#39;0&#39;) ) # Change &quot;Freshman&quot; to the gender neutral &quot;First Year&quot; Students &lt;- Students %&gt;% mutate( Year = fct_recode(Year, `first year` = &#39;freshman&#39;)) Students %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() We might want to apply some function to all the labels. Perhaps we want to remove white space or perhaps we want to capitalize all the labels. To apply a function to each of the labels, we use the fct_relabel() function. Students %&gt;% mutate( Year = fct_relabel(Year, stringr::str_to_upper) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() 7.3 Reorder Levels Once the factor labels are set, the next most common thing to do is to rearrange the factors. In our Students example, the order is messed up because it chose to order them in the same order that they appear in the data set. That is not appropriate and in this case, it makes sense to change the order to the chronological order First Year, Sophmore, Junior, Senior. To change the ordering manually, we use the fct::relevel() command. This function takes as many levels as you give it and leaves the unaccounted for levels in the same order as they were. # Seniors first, leave the rest in the order they already were Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() # reset all the levels orders Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophomore&#39;,&#39;first year&#39;) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() # Reverse order of what I already had Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophomore&#39;,&#39;first year&#39;) ) %&gt;% mutate( Year = fct_rev(Year) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() # Sometimes it is useful to rotate using + or - the number of shift steps # positive values move the first to the end. Negative values move the end to the front. Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophomore&#39;,&#39;first year&#39;) ) %&gt;% mutate( Year = fct_shift(Year, +1) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() # In the order of the most number of records Students %&gt;% mutate( Year = fct_infreq(Year) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() For a second example data set, consider a poll from Monmouth University of New Hampshire Democrats and Independents. Dems &lt;- tribble( ~Candidate, ~Percent, ~AgeOnElection, &#39;Elizabeth Warren&#39;, 27, 71, &#39;Joe Biden&#39;, 25, 77, &#39;Bernie Sanders&#39;, 12, 79, &#39;Pete Buttigieg&#39;, 10, 38, &#39;Kamala Harris&#39;, 3, 56, &#39;Cory Booker&#39;, 2, 51, &#39;Tulsi Gabbard&#39;, 2, 39, &#39;Amy Klobuchar&#39;, 2, 60, &#39;Tom Steyer&#39;, 2, 63, &#39;Andrew Yang&#39;, 2, 45, &#39;Other&#39;, 3, NA, &#39;No one&#39;, 1, NA, &#39;Undecided&#39;, 9, NA) We now want to first arrange the 2020 Democratic candidates for US president by their support. # Reorder Candidates based on the polling percent. The order of Smallest to largest # results in &#39;No one&#39; at the bottom and Elizabeth Warren at the top. Dems %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() We might consider moving the Other and Undecided categories as the first categories before “No one”. Dems %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;Other&#39;, after=0) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;Undecided&#39;, after=0) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() 7.4 Add or substract Levels Often we find that it is necessary to collapse several categories into one. In the Democratic candidate example, we might want to collapse No one, Other and Undecided into a single Other category. # This collapses the factor levels but I still have 3 rows of &quot;other&quot; Dems %&gt;% mutate( Candidate = fct_collapse(Candidate, other = c(&#39;No one&#39;, &#39;Other&#39;, &#39;Undecided&#39;)) ) ## # A tibble: 13 x 3 ## Candidate Percent AgeOnElection ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Elizabeth Warren 27 71 ## 2 Joe Biden 25 77 ## 3 Bernie Sanders 12 79 ## 4 Pete Buttigieg 10 38 ## 5 Kamala Harris 3 56 ## 6 Cory Booker 2 51 ## 7 Tulsi Gabbard 2 39 ## 8 Amy Klobuchar 2 60 ## 9 Tom Steyer 2 63 ## 10 Andrew Yang 2 45 ## 11 other 3 NA ## 12 other 1 NA ## 13 other 9 NA # Collopse the factor, then summarize by adding up the percentages Dems %&gt;% mutate( Candidate = fct_collapse(Candidate, other = c(&#39;No one&#39;, &#39;Other&#39;, &#39;Undecided&#39;)) ) %&gt;% group_by(Candidate) %&gt;% summarize(Percent = sum(Percent)) %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;other&#39;, after=0) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() I need to add the case where we are updating a column of factors and I want to replace a single observations level with another. To do this we do something like this: data &lt;- data.frame( Name=c(&#39;Alice&#39;,&#39;Bruce&#39;,&#39;Charlie&#39;), Grade = c(&#39;A&#39;,&#39;B&#39;,&#39;B&#39;) ) %&gt;% mutate( Grade = factor(Grade) ) %&gt;% mutate( Grade = fct_expand(Grade, &#39;C&#39;)) %&gt;% mutate( Grade = if_else(Name == &#39;Charlie&#39;, factor(&#39;C&#39;, levels=levels(Grade)), Grade ) ) data ## Name Grade ## 1 Alice A ## 2 Bruce B ## 3 Charlie C The key idea is that both the TRUE and the FALSE outputs have to have the same type (which is a factor), and both factors have to have a compatible set of levels. 7.5 Exercises In the package Lock5Data there is a dataset FloridaLakes which contains water sample measurements from 53 lakes in Florida, produce a bar graph shows the Lake and AvgMercury variables and make sure that the lakes are ordered by Average Mercury content. In the package Lock5Data, there is a dataset FootballBrain that has brain measurements for 75 individuals. The Group variable has three levels: Control is somebody that did not play football, FBNoConcuss is a football player with no history of concussions, or FBConcuss which is a football player with concussion history. The variable Cogniton measures their testing composite reaction time score. Make a box-plot graph of the groups vs cognition, but change the Group labels to something that would make sense to a reader. Because there is no data for the Control group, don’t show it on your resulting graph. Also notice that the original data set column name misspells “cognition”. In the package Lock5Data, there is a dataset RestaurantTips which gives tip data from the restaurant First Crush Bistro in Potsdam, NY. Graph the Bill versus the PctTip for each Day of the week where we use Day as the variable to facet_grid or facet_wrap on. Make sure the Day variable has conventional days. Also include information about if the bill was paid via credit card and also make sure the credit card labels are either Credit Card or Cash. Example Distributions mosaic::plotDist() function Base R functions d-function p-function q-function r-function Exercises "]
]
