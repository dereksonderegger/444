[
["7-factors.html", "Chapter 7 Factors 7.1 Creation and Structure 7.2 Change Labels 7.3 Reorder Levels 7.4 Add or substract Levels", " Chapter 7 Factors In R we can store categorical information as either strings or as factors. To a casual user, it often doesn’t matter how the information is stored because the modeling and graphing programs happily convert strings into factors whenever necessary. However a deeper understanding of how factors are stored and manipulated allows a user much finer control in the modeling and graphing. We will be interested in the following broad classes of manipulations: Edit Factor Labels Goal forcats function Manually change the label(s) fct_recode(f, new_label = &quot;old_label&quot;) Systematically change all labels fct_relabel(f, function) Reorder Levels Goal forcats function Set order manually fct_relevel(f, c('b', 'a', 'c')) Set order based on another vector fct_reorder(f, x) Set order based on which category is most frequent fct_infreq(f) Set order based on when they first appear fct_inorder() Reverse factor order fct_rev(f) Rotate order left or right fct_shift(f, steps) Goal forcats functions Details Edit Labels fct_recode(f, new_label = 'old_label') fct_relabel(f, function) Manually set new label(s) Apply a function to all labels Reorder Levels fct_relevel(f, c('b','a','c')) fct_reorder(f, x) Manually set order Set the order based on another Add/Subtract Levels fct_collapse() fct_lump() Manually collapse specified Collapse based on frequency 7.1 Creation and Structure R stores factors as a combination of a vector of category labels and vector of integers representing which category a data value belongs to. For example, lets create a vector of data relating to what soft drinks my siblings prefer. # A vector of character strings. drinks &lt;- c(&#39;Coke&#39;, &#39;Coke&#39;, &#39;Sprite&#39;, &#39;Pepsi&#39;, &#39;DietCoke&#39;) str(drinks) ## chr [1:5] &quot;Coke&quot; &quot;Coke&quot; &quot;Sprite&quot; &quot;Pepsi&quot; &quot;DietCoke&quot; # convert the vector of character strings into a factor vector drinks &lt;- factor(drinks) str(drinks) # Show the structure of the factor ## Factor w/ 4 levels &quot;Coke&quot;,&quot;DietCoke&quot;,..: 1 1 4 3 2 levels(drinks) # Print out the categories, notice the order matters! ## [1] &quot;Coke&quot; &quot;DietCoke&quot; &quot;Pepsi&quot; &quot;Sprite&quot; Notice that the factor has levels “Coke”, “DietCoke”, “Pepsi”, and “Sprite” and that the order of these levels is very important because each observation is saved as an integer which denotes which category the observation belongs to. Because it takes less memory to store a single integer instead of potentially very long character string, factors are much more space efficient than storing the same data as strings. Because the factor has both a character string representation as well as numeric value, we can convert a factor to either one. as.character(drinks) ## [1] &quot;Coke&quot; &quot;Coke&quot; &quot;Sprite&quot; &quot;Pepsi&quot; &quot;DietCoke&quot; as.integer(drinks) ## [1] 1 1 4 3 2 7.2 Change Labels 7.3 Reorder Levels 7.4 Add or substract Levels "]
]
