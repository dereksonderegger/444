[
["11-string-manipulation.html", "Chapter 11 String Manipulation 11.1 Base function 11.2 stringr: Basic operations 11.3 stringr: Pattern Matching Tools 11.4 Regular Expressions 11.5 Exercises", " Chapter 11 String Manipulation library(tidyverse) library(stringr) Strings make up a very important class of data. Data being read into R often come in the form of character strings where different parts might mean different things. For example a sample ID of “R1_P2_C1_2012_05_28” might represent data from Region 1, Park 2, Camera 1, taken on May 28, 2012. It is important that we have a set of utilities that allow us to split and combine character strings in a easy and consistent fashion. Unfortunately, the utilities included in the base version of R are somewhat inconsistent and were not designed to work nicely together. Hadley Wickham, the developer of ggplot2 and dplyr has this to say: “R provides a solid set of string operations, but because they have grown organically over time, they can be inconsistent and a little hard to learn. Additionally, they lag behind the string operations in other programming languages, so that some things that are easy to do in languages like Ruby or Python are rather hard to do in R.” – Hadley Wickham For this chapter we will introduce the most commonly used functions from the base version of R that you might use or see in other people’s code. Second, we introduce Dr Wickham’s stringr package that provides many useful functions that operate in a consistent manner. In his R for Data Science he has a nice chapter on strings. There are several white space characters that need to be represented in character strings such as tabs and returns. Most programming languages, including R, represent these using the escape character combined with another. For example in a character string \\t represents a tab and \\n represents a newline. However, because the backslash is the escape character, in order to have a backslash in the character string, the backslash needs to be escaped as well. 11.1 Base function 1.1.1 paste() The most basic thing we will want to do is to combine two strings or to combine a string with a numerical value. The paste() command will take one or more R objects and converts them to character strings and then pastes them together to form one or more character strings. It has the form: paste( ..., sep = &#39; &#39;, collapse = NULL ) The ... piece means that we can pass any number of objects to be pasted together. The sep argument gives the string that separates the strings to be joined and the collapse argument that specifies if a simplification should be performed after being pasting together. Suppose we want to combine the strings “Peanut butter” and “Jelly” then we could execute: paste( &quot;PeanutButter&quot;, &quot;Jelly&quot; ) ## [1] &quot;PeanutButter Jelly&quot; Notice that without specifying the separator character, R chose to put a space between the two strings. We could specify whatever we wanted: paste( &quot;Hello&quot;, &quot;World&quot;, sep=&#39;_&#39; ) ## [1] &quot;Hello_World&quot; Also we can combine strings with numerical values paste( &quot;Pi is equal to&quot;, pi ) ## [1] &quot;Pi is equal to 3.14159265358979&quot; We can combine vectors of similar or different lengths as well. By default R assumes that you want to produce a vector of character strings as output. paste( &quot;n =&quot;, c(5,25,100) ) ## [1] &quot;n = 5&quot; &quot;n = 25&quot; &quot;n = 100&quot; first.names &lt;- c(&#39;Robb&#39;,&#39;Stannis&#39;,&#39;Daenerys&#39;) last.names &lt;- c(&#39;Stark&#39;,&#39;Baratheon&#39;,&#39;Targaryen&#39;) paste( first.names, last.names) ## [1] &quot;Robb Stark&quot; &quot;Stannis Baratheon&quot; &quot;Daenerys Targaryen&quot; If we want paste() produce just a single string of output, use the collapse= argument to paste together each of the output vectors (separated by the collapse character). paste( &quot;n =&quot;, c(5,25,100) ) # Produces 3 strings ## [1] &quot;n = 5&quot; &quot;n = 25&quot; &quot;n = 100&quot; paste( &quot;n =&quot;, c(5,25,100), collapse=&#39;:&#39; ) # collapses output into one string ## [1] &quot;n = 5:n = 25:n = 100&quot; paste(first.names, last.names, sep=&#39;.&#39;, collapse=&#39; : &#39;) ## [1] &quot;Robb.Stark : Stannis.Baratheon : Daenerys.Targaryen&quot; Notice we could use the paste() command with the collapse option to combine a vector of character strings together. paste(first.names, collapse=&#39;:&#39;) ## [1] &quot;Robb:Stannis:Daenerys&quot; 11.2 stringr: Basic operations The goal of stringr is to make a consistent user interface to a suite of functions to manipulate strings. “(stringr) is a set of simple wrappers that make R’s string functions more consistent, simpler and easier to use. It does this by ensuring that: function and argument names (and positions) are consistent, all functions deal with NA’s and zero length character appropriately, and the output data structures from each function matches the input data structures of other functions.” - Hadley Wickham We’ll investigate the most commonly used function but there are many we will ignore. Function Description str_c() string concatenation, similar to paste str_length() number of characters in the string str_sub() extract a substring str_trim() remove leading and trailing whitespace str_pad() pad a string with empty space to make it a certain length 11.2.1 Concatenating with str_c() or str_join() The first thing we do is to concatenate two strings or two vectors of strings similarly to the paste() command. The str_c() and str_join() functions are a synonym for the exact same function, but str_join() might be a more natural verb to use and remember. The syntax is: str_c( ..., sep=&#39;&#39;, collapse=NULL) You can think of the inputs building a matrix of strings, with each input creating a column of the matrix. For each row, str_c() first joins all the columns (using the separator character given in sep) into a single column of strings. If the collapse argument is non-NULL, the function takes the vector and joins each element together using collapse as the separator character. # envisioning the matrix of strings cbind(first.names, last.names) ## first.names last.names ## [1,] &quot;Robb&quot; &quot;Stark&quot; ## [2,] &quot;Stannis&quot; &quot;Baratheon&quot; ## [3,] &quot;Daenerys&quot; &quot;Targaryen&quot; # join the columns together full.names &lt;- str_c( first.names, last.names, sep=&#39;.&#39;) cbind( first.names, last.names, full.names) ## first.names last.names full.names ## [1,] &quot;Robb&quot; &quot;Stark&quot; &quot;Robb.Stark&quot; ## [2,] &quot;Stannis&quot; &quot;Baratheon&quot; &quot;Stannis.Baratheon&quot; ## [3,] &quot;Daenerys&quot; &quot;Targaryen&quot; &quot;Daenerys.Targaryen&quot; # Join each of the rows together separated by collapse str_c( first.names, last.names, sep=&#39;.&#39;, collapse=&#39; : &#39;) ## [1] &quot;Robb.Stark : Stannis.Baratheon : Daenerys.Targaryen&quot; 11.2.2 Calculating string length with str_length() The str_length() function calculates the length of each string in the vector of strings passed to it. text &lt;- c(&#39;WordTesting&#39;, &#39;With a space&#39;, NA, &#39;Night&#39;) str_length( text ) ## [1] 11 12 NA 5 Notice that str_length() correctly interprets the missing data as missing and that the length ought to also be missing. 11.2.3 Extracting substrings with str_sub() If we know we want to extract the \\(3^{rd}\\) through \\(6^{th}\\) letters in a string, this function will grab them. str_sub(text, start=3, end=6) ## [1] &quot;rdTe&quot; &quot;th a&quot; NA &quot;ght&quot; If a given string isn’t long enough to contain all the necessary indices, str_sub() returns only the letters that where there (as in the above case for “Night” 11.2.4 Pad a string with str_pad() Sometimes we to make every string in a vector the same length to facilitate display or in the creation of a uniform system of assigning ID numbers. The str_pad() function will add spaces at either the beginning or end of the of every string appropriately. str_pad(first.names, width=8) ## [1] &quot; Robb&quot; &quot; Stannis&quot; &quot;Daenerys&quot; str_pad(first.names, width=8, side=&#39;right&#39;, pad=&#39;*&#39;) ## [1] &quot;Robb****&quot; &quot;Stannis*&quot; &quot;Daenerys&quot; 11.2.5 Trim a string with str_trim() This removes any leading or trailing white space where white space is defined as spaces ’ ’, tabs \\t or returns \\n. text &lt;- &#39; Some text. \\n &#39; print(text) ## [1] &quot; Some text. \\n &quot; str_trim(text) ## [1] &quot;Some text.&quot; 11.3 stringr: Pattern Matching Tools The previous commands are all quite useful but the most powerful string operation is take a string and match some pattern within it. The following commands are available within stringr. Function Description str_detect() Detect if a pattern occurs in input string str_locate() str_locate_all() Locates the first (or all) positions of a pattern. str_extract() str_extract_all() Extracts the first (or all) sub-strings corresponding to a pattern str_replace() str_replace_all() Replaces the matched sub-string(s) with a new pattern str_split() str_split_fixed() Splits the input string based on the input pattern We will first examine these functions using a very simple pattern matching algorithm where we are matching a specific pattern. For most people, this is as complex as we need. Suppose that we have a vector of strings that contain a date in the form “2012-May-27” and we want to manipulate them to extract certain information. strings &lt;- c(&#39;2008-Feb-10&#39;, &#39;2010-Sept-18&#39;, &#39;2013-Jan-11&#39;, &#39;2016-Jan-2&#39;) 11.3.1 Detecting a pattern using str_detect() Suppose we want to know which dates are in September. We want to detect if the pattern “Sept” occurs in the strings. data.frame( string = strings ) %&gt;% mutate( result = str_detect( string, pattern=&#39;Sept&#39; ) ) ## string result ## 1 2008-Feb-10 FALSE ## 2 2010-Sept-18 TRUE ## 3 2013-Jan-11 FALSE ## 4 2016-Jan-2 FALSE Here we see that the second string in the test vector included the sub-string “Sept” but none of the others did. 11.3.2 Locating a pattern using str_locate() To figure out where the “-” characters are, we can use the str_locate() function. str_locate(strings, pattern=&#39;-&#39; ) ## start end ## [1,] 5 5 ## [2,] 5 5 ## [3,] 5 5 ## [4,] 5 5 which shows that the first dash occurs as the \\(5^{th}\\) character in each string. If we wanted all the dashes in the string the following works. str_locate_all(strings, pattern=&#39;-&#39; ) ## [[1]] ## start end ## [1,] 5 5 ## [2,] 9 9 ## ## [[2]] ## start end ## [1,] 5 5 ## [2,] 10 10 ## ## [[3]] ## start end ## [1,] 5 5 ## [2,] 9 9 ## ## [[4]] ## start end ## [1,] 5 5 ## [2,] 9 9 The output of str_locate_all() is a list of matrices that gives the start and end of each matrix. Using this information, we could grab the Year/Month/Day information out of each of the dates. We won’t do that here because it will be easier to do this using str_split(). 11.3.3 Replacing sub-strings using str_replace() Suppose we didn’t like using “-” to separate the Year/Month/Day but preferred a space, or an underscore, or something else. This can be done by replacing all of the “-” with the desired character. The str_replace() function only replaces the first match, but str_replace_all() replaces all matches. data.frame( string = strings ) %&gt;% mutate(result = str_replace(string, pattern=&#39;-&#39;, replacement=&#39;:&#39;)) ## string result ## 1 2008-Feb-10 2008:Feb-10 ## 2 2010-Sept-18 2010:Sept-18 ## 3 2013-Jan-11 2013:Jan-11 ## 4 2016-Jan-2 2016:Jan-2 data.frame( string = strings ) %&gt;% mutate(result = str_replace_all(string, pattern=&#39;-&#39;, replacement=&#39;:&#39;)) ## string result ## 1 2008-Feb-10 2008:Feb:10 ## 2 2010-Sept-18 2010:Sept:18 ## 3 2013-Jan-11 2013:Jan:11 ## 4 2016-Jan-2 2016:Jan:2 11.3.4 Splitting into sub-strings using str_split() We can split each of the dates into three smaller sub-strings using the str_split() command, which returns a list where each element of the list is a vector containing pieces of the original string (excluding the pattern we matched on). If we know that all the strings will be split into a known number of sub-strings (we have to specify how many sub-strings to match with the n= argument), we can use str_split_fixed() to get a matrix of sub-strings instead of list of sub-strings. data.frame( string = strings ) %&gt;% cbind( str_split_fixed(.$string, pattern=&#39;-&#39;, n=3) ) ## string 1 2 3 ## 1 2008-Feb-10 2008 Feb 10 ## 2 2010-Sept-18 2010 Sept 18 ## 3 2013-Jan-11 2013 Jan 11 ## 4 2016-Jan-2 2016 Jan 2 11.4 Regular Expressions The next section will introduce using regular expressions. Regular expressions are a way to specify very complicated patterns. Go look at https://xkcd.com/208/ to gain insight into just how geeky regular expressions are. Regular expressions are a way of precisely writing out patterns that are very complicated. The stringr package pattern arguments can be given using standard regular expressions (not perl-style!) instead of using fixed strings. Regular expressions are extremely powerful for sifting through large amounts of text. For example, we might want to extract all of the 4 digit sub-strings (the years) out of our dates vector, or I might want to find all cases in a paragraph of text of words that begin with a capital letter and are at least 5 letters long. In another, somewhat nefarious example, spammers might have downloaded a bunch of text from web pages and want to be able to look for email addresses. So as a first pass, they want to match a pattern: \\[\\underset{\\textrm{1 or more letters}}{\\underbrace{\\texttt{Username}}}\\texttt{@}\\;\\;\\underset{\\textrm{1 or more letter}}{\\underbrace{\\texttt{OrganizationName}}}\\;\\texttt{.\\;}\\begin{cases} \\texttt{com}\\\\ \\texttt{org}\\\\ \\texttt{edu} \\end{cases}\\] where the Username and OrganizationName can be pretty much anything, but a valid email address looks like this. We might get even more creative and recognize that my list of possible endings could include country codes as well. For most people, I don’t recommend opening the regular expression can-of-worms, but it is good to know that these pattern matching utilities are available within R and you don’t need to export your pattern matching problems to Perl or Python. 11.4.1 Regular Expression Ingredients Regular expressions use a select number of characters to signify further meaning in order to create recipes that might be matched within a character string. The special characters are [ \\ ^ $ . | ? * + (). Character Types Interpretation abc Letters abc exactly 123 Digits 123 exactly \\d Any Digit \\D Any Non-digit character \\w Any Alphanumeric character \\W Any Non-alphanumeric character \\s Any White space \\S Any Non-white space character . Any Character (The wildcard!) ^ Beginning of input string $ End of input string Grouping Interpretation [abc] Only a, b, or c [^abc] Not a, b, nor c [a-z] Characters a to z [A-Z] Characters A to Z [0-9] Numbers 0 to 9 [a-zA-Z] Characters a to z or A to Z () Capture Group (a(bc)) Capture Sub-group (abc|def) Matches abc or def Group Modifiers Interpretation * Zero or more repetitions of previous + One or more repetitions of previous ? Previous group is optional {m} m repetitions of the previous {m,n} Between m and n repetitions of the previous The general idea is to make a recipe that combines one or more groups and add modifiers on the groups for how often the group is repeated. 11.4.2 Matching a specific string I might have a set of strings and I want to remove a specific string from them, or perhaps detect if a specific string is present. So long as the string of interest doesn’t contain any special characters, you can just type out the string to be detected. # Replace &#39;John&#39; from all of the strings with &#39;****&#39; # The regular expression interpretation only comes in evaluating &#39;John&#39; strings &lt;- c(&#39;John Sanderson&#39;, &#39;Johnathan Wilkes&#39;, &#39;Brendan Johnson&#39;, &#39;Bigjohn Smith&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_replace(string, &#39;John&#39;, &#39;****&#39;) ) ## string result ## 1 John Sanderson **** Sanderson ## 2 Johnathan Wilkes ****athan Wilkes ## 3 Brendan Johnson Brendan ****son ## 4 Bigjohn Smith Bigjohn Smith Notice that this is case sensitive and we didn’t replace the ‘john’. I might have special characters in my string that I want to replace. # Remove the commas and the $ sign and convert to integers. # Because $ is a special character, we need to use the escape character, \\. # However, because R uses the escape character as well, we have to use TWO # escape characters. The first to escape R usual interpretation of the backslash, # and the second to cause the regular expression to not use the usual # interpretation of the $ sign. # strings &lt;- c(&#39;$1,000,873&#39;, &#39;$4.53&#39;, &#39;$672&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_remove_all(string, &#39;\\\\$&#39;) ) ## string result ## 1 $1,000,873 1,000,873 ## 2 $4.53 4.53 ## 3 $672 672 # We can use the Or clause built into regular expressions to grab the # dollar signs and the commas using (Pattern1|Pattern2) notation data.frame( string=strings ) %&gt;% mutate( result = str_remove_all(string, &#39;(\\\\$|,)&#39;) ) ## string result ## 1 $1,000,873 1000873 ## 2 $4.53 4.53 ## 3 $672 672 11.4.3 Matching arbitrary numbers We might need to extract the numbers from a string. To do this, we want to grab 1 or more digits. strings &lt;- c(&#39;I need 653 to fix the car&#39;, &#39;But I only have 432.34 in the bank&#39;, &#39;I could get .53 from the piggy bank&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;\\\\d+&#39;) ) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432 ## 3 I could get .53 from the piggy bank 53 That isn’t exactly what we wanted. Instead of extracting the whole number, we left off the decimals. To fix this, we could have an optional part of the recipe for decimals. The way to enter into an optional section of the recipe is to use a ()? and enclose the optional part inside the parentheses. data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;\\\\d+(\\\\.\\\\d+)?&#39; )) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432.34 ## 3 I could get .53 from the piggy bank 53 That fixed the issue for the second row, but still misses the third line. Lets have 3 different recipes and then ‘or’ them together. data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;(\\\\d+\\\\.\\\\d+|\\\\.\\\\d+|\\\\d+)&#39; )) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432.34 ## 3 I could get .53 from the piggy bank .53 11.4.4 Greedy matching Regular expressions tries to match as much as it can. The modifiers * and + try to match as many characters as possible. While often this is what we want, it sometimes is not. Consider the case where we are scanning HTML code and looking for markup tags which are of the form &lt;blah blah&gt;. The information inside the angled brackets will be important, but for now we just want to search the string for all instances of HTML tags. string &lt;- &#39;A web page has &lt;b&gt;MANY&lt;/b&gt; types of &lt;em&gt;awesome&lt;/em&gt; tags!&#39; For now, we want to extract &lt;b&gt;, &lt;/b&gt;, &lt;em&gt; and &lt;/em&gt;. To do this, we might first consider the following: str_extract_all(string, &#39;&lt;.+&gt;&#39;) ## [[1]] ## [1] &quot;&lt;b&gt;MANY&lt;/b&gt; types of &lt;em&gt;awesome&lt;/em&gt;&quot; What the regular expression engine did was matched as many characters in the .+ until it got to the very last ending angled bracket it could find. We can force the + and * modifiers to be lazy and match as few characters as possible to complete the match by adding a ? suffix to the + or * modifier. str_extract_all(string, &#39;&lt;.+?&gt;&#39;) ## [[1]] ## [1] &quot;&lt;b&gt;&quot; &quot;&lt;/b&gt;&quot; &quot;&lt;em&gt;&quot; &quot;&lt;/em&gt;&quot; 11.5 Exercises For the following regular expression, explain in words what it matches on. Then add test strings to demonstrate that it in fact does match on the pattern you claim it does. Make sure that your test set of strings has several examples that match as well as several that do not. If you copy the Rmarkdown code for these exercises directly from my source pages, make sure to remove the eval=FALSE from the R-chunk headers. This regular expression matches: Insert your answer here… strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;a&#39;) ) This regular expression matches: Insert your answer here… # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;ab&#39;) ) This regular expression matches: Insert your answer here… strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;[ab]&#39;) ) This regular expression matches: Insert your answer here… strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;^[ab]&#39;) ) This regular expression matches: Insert your answer here… strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;\\\\d+\\\\s[aA]&#39;) ) This regular expression matches: Insert your answer here… strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;.*&#39;) ) The following file names were used in a camera trap study. The S number represents the site, P is the plot within a site, C is the camera number within the plot, the first string of numbers is the YearMonthDay and the second string of numbers is the HourMinuteSecond. file.names &lt;- c( &#39;S123.P2.C10_20120621_213422.jpg&#39;, &#39;S10.P1.C1_20120622_050148.jpg&#39;, &#39;S187.P2.C2_20120702_023501.jpg&#39;) Use a combination of str_sub() and str_split() to produce a data frame with columns corresponding to the site, plot, camera, year, month, day, hour, minute, and second for these three file names. So we want to produce code that will create the data frame: Site Plot Camera Year Month Day Hour Minute Second S123 P2 C10 2012 06 21 21 34 22 S10 P1 C1 2012 06 22 05 01 48 S187 P2 C2 2012 07 02 02 35 01 Variable names in R may be and combination letters, digits, period, and underscore. However, they may not start with a digit and if they start with a period, they must not be followed by a digit. strings &lt;- c(&#39;foo15&#39;, &#39;Bar&#39;, &#39;.resid&#39;, &#39;_14s&#39;, &#39;99_Bottles&#39;, &#39;.9Arggh&#39;, &#39;Foo!&#39;,&#39;HIV Rate&#39;) The first four are valid variable names, but the last four are not. First write a regular expression that determines if the string starts with a character (upper or lower case) or underscore and then is followed by zero or more numbers, letters, periods or underscores. Notice I use the start/end of string markers. This is important so that we don’t just match somewhere in the middle of the variable name. data.frame( string=strings ) %&gt;% mutate( result = str_detect(string, &#39;^(???what goes here???)$&#39; )) Modify your regular expression so that the first group could be either [a-zA-Z_] as before or it could be a period followed by letters or an underscore. "]
]
