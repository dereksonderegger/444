[
["index.html", "STA 444/5 - Introductory Data Science using R Preface Other Resources Acknowledgements", " STA 444/5 - Introductory Data Science using R Derek L. Sonderegger October 09, 2019 Preface This book is intended to provide students with a resource for learning R while using it during an introductory statistics course. The Introduction section covers common issues that students in a typical statistics course will encounter and provides a simple examples and does not attempt to be exhaustive. The Deeper Details section addresses issues that commonly arise in many data wrangling situations and is intended to give students a deep enough understanding of R that they will be able to use it as their primary computing resource to manipulate, graph and model data. Other Resources There are a great number of very good online and physical resources for learning R. Hadley Wickham and Garrett Grolemund’s free online book R for Data Science. This is a wonderful introduction to the tidyverse and is free. If there is any book I’d recommend buying, this would be it. Michael Freeman’s book Programming Skills for Data Science. This book covers much of what we’ll do in this class and is quite readable. Hadley Wickham and Jenny Bryan have a whole book on R packages to effectively manage large projects. Acknowledgements These online books are used a huge amount of work and I appreciative the support of my wife Aubrey and the love our our two children Elise and Casey. "],
["1-familiarization.html", "Chapter 1 Familiarization 1.1 R file Types 1.2 R as a simple calculator 1.3 Assignment 1.4 Vectors 1.5 Packages 1.6 Finding Help 1.7 Exercises", " Chapter 1 Familiarization R is a open-source program that is commonly used in statistics and machine learning. It runs on almost every platform and is completely free and is available at www.r-project.org. Most cutting-edge statistical research is first available on R. The basic editor that comes with R works fairly well, but you should consider running R through the program RStudio which is located at rstudio.com. This is a completely free Integrated Developement Environment that works on Macs, Windows and a couple of flavors of Linux. It simplifies a bunch of more annoying aspects of the standard R GUI and supports things like tab completion. R is a script based language, and there isn’t a point-and-click interface for data wrangling and statistical modeling. While the initial learning curve will be steeper, understanding how to write scripts will be valuable because scripts leave a clear description of what steps were performed. This is a critical aspect of what is known as reproducable research and a good practice. While it may seem tempting to type commands into the console directly, but because the goal is to create a script that contains all of the necessary commands to perform an analysis, users should get into the habit of always writing their commands into their R script (or Rmarkdown file) and executing the command from there. 1.1 R file Types One of the worst things about a pocket calculator is there is no good way to go several steps and easily see what you did or fix a mistake (there is nothing more annoying than re-typing something because of a typo. To avoid these issues I always work with RMarkdown (or script) files instead of typing directly into the console. You will quickly learn that it is impossible to write R code correctly the first time and you’ll save yourself a huge amount of work by just embracing this from the beginning. Furthermore, having an R file fully documents how you did your analysis, which can help when writing the methods section of a paper. Finally, having a file makes it easy to re-run an analysis after a change in the data (additional data values, transformed data, or removal of outliers). There are three common ways to store R commands in some file: scripts, notebooks, and Rmarkdown files. The distinction between the R scripts and the other two is substantial as R scripts just store R commands, but don’t make any attampt to save the results in any distinct format. Both notebooks and Rmarkdown files save the results of an analysis and present the results in a nice readable fashion. I encourage people to use Rmarkdown files over notebooks because the Rmarkdown knitting enforces a reproducable workflow whereas notebooks can be run out of order. Rmarkdown files are written in a way to combine the R commands, commentary, and the command outputs all together into one coherent document. For most people that use R to advance their research, using Rmarkdown is the most useful. 1.1.1 R Scripts (.R files) The first type of file that we’ll discuss is a traditional script file. To create a new .R script in RStudio go to File -&gt; New File -&gt; R Script. This opens a new window in RStudio where you can type commands and functions as a common text editor. Type whatever you like in the script window and then you can execute the code line by line (using the run button or its keyboard shortcut to run the highlighted region or whatever line the curser is on) or the entire script (using the source button). Other options for what piece of code to run are available under the Code dropdown box. It often makes your R files more readable if you break a single command up into multiple lines. R scripts will disregard all whitespace (including line breaks) so you can safely spread your command over as multiple lines. Finally, it is useful to leave comments in the script for things such as explaining a tricky step, who wrote the code and when, or why you chose a particular name for a variable. The # sign will denote that the rest of the line is a comment and R will ignore it. An R script for a homework assignment might look something like this: # Problem 1 # Calculate the log of a couple of values and make a plot # of the log function from 0 to 3 log(0) log(1) log(2) x &lt;- seq(.1,3, length=1000) plot(x, log(x)) # Problem 2 # Calculate the exponential function of a couple of values # and make a plot of the function from -2 to 2 exp(-2) exp(0) exp(2) x &lt;- seq(-2, 2, length=1000) plot(x, exp(x)) This looks perfectly acceptable as a way of documenting what you did, but this script file doesn’t contain the actual results of commands I ran, nor does it show you the plots. Also anytime I want to comment on some output, it needs to be offset with the commenting character #. It would be nice to have both the commands and the results merged into one document. This is what the R Markdown file does for us. 1.1.2 R Markdown (.Rmd files) When I was a graduate student, I had to tediously copy and past tables of output from the R console and figures I had made into my Microsoft Word document. Far too often I would realize I had made a small mistake in part (b) of a problem and would have to go back, correct my mistake, and then redo all the laborious copying. I often wished that I could write both the code for my statistical analysis and the long discussion about the interpretation all in the same document so that I could just re-run the analysis with a click of a button and all the tables and figures would be updated by magic. Fortunately that magic now exists. To create a new R Markdown document, we use the File -&gt; New File -&gt; R Markdown... dropdown option and a menu will appear asking you for the document title, author, and preferred output type. In order to create a PDF, you’ll need to have LaTeX installed, but the HTML output nearly always works and I’ve had good luck with the MS Word output as well. The R Markdown is an implementation of the Markdown syntax that makes it extremely easy to write webpages and give instructions for how to do typesetting sorts of things. This syntax was extended to allow use to embed R commands directly into the document. Perhaps the easiest way to understand the syntax is to look at an at the RMarkdown website. The R code in my document is nicely separated from my regular text using the three backticks and an instruction that it is R code that needs to be evaluated. The output of this document looks good as a HTML, PDF, or MS Word document. I have actually created this entire book using RMarkdown. To see what the the Rmarkdown file looks like for any chapter, just click on the pencil icon at the top of the online notes. While writing an Rmarkdown file, each of the code chunks can be executed in a couple of different ways. 1. Press the green arrow at the top of the code chunk to run the entire chunk. 2. The run button has several options has several options. 3. There are keyboard shortcuts, on the Mac it is Cmd-Return. To insert a new code chunk, a user can type it in directly, use the green Insert button, or the keyboard shortcut. To produce a final output document that you’ll present to your boss/collegues/client where you want to combine the code, output, and commentary you’ll “knit” the document which causes all of the R code to be run in a new R session, and then weave together the output into your document. This can be done using the knit button at the top of the Editor Window. 1.1.3 R Notebooks (.Rmd files) Notebooks are just very specialized types of Rmarkdown file. Here, the result of each code chunk that is run manually is saved, but when previewing the output, all of the R code is NOT re-run. Therefore it is possible to run the code, then modify the code, and then produce a document where the written code and output do not match up. As a result of this “feature” I strongly discourage the use of notebooks in favor of the standard Rmarkdown files. 1.2 R as a simple calculator Assuming that you have started R on whatever platform you like, you can use R as a simple calculator. In either your Rmarkdown file code chunk (or just run this in the console), run the following # Some simple addition 2+3 ## [1] 5 In this fashion you can use R as a very capable calculator. 6*8 ## [1] 48 4^3 ## [1] 64 exp(1) # exp() is the exponential function ## [1] 2.718282 R has most constants and common mathematical functions you could ever want. sin(), cos(), and other trigonometry functions are available, as are the exponential and log functions exp(), log(). The absolute value is given by abs(), and round() will round a value to the nearest integer. pi # the constant 3.14159265... ## [1] 3.141593 sin(0) ## [1] 0 log(5) # unless you specify the base, R will assume base e ## [1] 1.609438 log(5, base=10) # base 10 ## [1] 0.69897 Whenever I call a function, there will be some arguments that are mandatory, and some that are optional and the arguments are separated by a comma. In the above statements the function log() requires at least one argument, and that is the number(s) to take the log of. However, the base argument is optional. If you do not specify what base to use, R will use a default value. You can see that R will default to using base \\(e\\) by looking at the help page (by typing help(log) or ?log at the command prompt). Arguments can be specified via the order in which they are passed or by naming the arguments. So for the log() function which has arguments log(x, base=exp(1)). If I specify which arguments are which using the named values, then order doesn’t matter. # Demonstrating order does not matter if you specify # which argument is which log(x=5, base=10) ## [1] 0.69897 log(base=10, x=5) ## [1] 0.69897 But if we don’t specify which argument is which, R will decide that x is the first argument, and base is the second. # If not specified, R will assume the second value is the base... log(5, 10) ## [1] 0.69897 log(10, 5) ## [1] 1.430677 When I specify the arguments, I have been using the name=value notation and a student might be tempted to use the &lt;- notation here. Don’t do that as the name=value notation is making an association mapping and not a permanent assignment. 1.3 Assignment We need to be able to assign a value to a variable to be able to use it later. R does this by using an arrow &lt;- or an equal sign =. While R supports either, for readability, I suggest people pick one assignment operator and stick with it. I personally prefer to use the arrow. Variable names cannot start with a number, may not include spaces, and are case sensitive. tau &lt;- 2*pi # create two variables my.test.var = 5 # notice they show up in &#39;Environment&#39; tab in RStudio! tau ## [1] 6.283185 my.test.var ## [1] 5 tau * my.test.var ## [1] 31.41593 As your analysis gets more complicated, you’ll want to save the results to a variable so that you can access the results later. If you don’t assign the result to a variable, you have no way of accessing the result. 1.4 Vectors While single values are useful, it is very important that we are able to make groups of values. The most fundamental aggregation of values is called a vector. In R, we will require vectors to always be of the same type (e.g. all integers or all character strings). To create a vector, we just need to use the collection function c(). x &lt;- c(&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;) x ## [1] &quot;A&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; y &lt;- c( 4, 3, 8, 10 ) y ## [1] 4 3 8 10 It is very common to have to make sequences of integers, and R has a shortcut to do this. The notation A:B will produce a vector starting with A and incrementing by one until we get to B. 2:6 ## [1] 2 3 4 5 6 1.5 Packages One of the greatest strengths about R is that so many people have devloped add-on packages to do some additional function. For example, plant community ecologists have a large number of multivariate methods that are useful but were not part of R. So Jari Oksanen got together with some other folks and put together a package of functions that they found useful. The result is the package vegan. To download and install the package from the Comprehensive R Archive Network (CRAN), you just need to ask RStudio it to install it via the menu Tools -&gt; Install Packages.... Once there, you just need to give the name of the package and RStudio will download and install the package on your computer. Many major analysis types are available via downloaded packages as well as problem sets from various books (e.g. Sleuth3 or faraway) and can be easily downloaded and installed from CRAN via the menu. Once a package is downloaded and installed on your computer, it is available, but it is not loaded into your current R session by default. The reason it isn’t loaded is that there are thousands of packages, some of which are quite large and only used occasionally. So to improve overall performance only a few packages are loaded by default and the you must explicitly load packages whenever you want to use them. You only need to load them once per session/script. library(vegan) # load the vegan library For a similar performance reason, many packages do not automatically load their datasets unless explicitly asked. Therefore when loading datasets from a package, you might need to do a two-step process of loading the package and then loading the dataset. library(faraway) # load the package into memory ## ## Attaching package: &#39;faraway&#39; ## The following object is masked from &#39;package:lattice&#39;: ## ## melanoma data(&quot;butterfat&quot;) # load the dataset into memory If you don’t need to load any functions from a package and you just want the datasets, you can do it in one step. data(&#39;butterfat&#39;, package=&#39;faraway&#39;) # just load the dataset, not anything else butterfat[1:6, ] # print out the first 6 rows of the data ## Butterfat Breed Age ## 1 3.74 Ayrshire Mature ## 2 4.01 Ayrshire 2year ## 3 3.77 Ayrshire Mature ## 4 3.78 Ayrshire 2year ## 5 4.10 Ayrshire Mature ## 6 4.06 Ayrshire 2year Similarly, if I am not using many functions from a package, I might choose call the functions using the notation package::function(). This is particularly important when two packages both have functions with the same name and it gets confusing which function you want to use. For example the packages mosaic and dplyr both have a function tally. So if I’ve already loaded the dplyr package but want to use the mosaic::tally() function I would use the following: mosaic::tally( c(0,0,0,1,1,1,1,2) ) ## X ## 0 1 2 ## 3 4 1 Finally, many researchers and programmers host their packages on GitHub (or equivalent site) and those packages can easily downloaded using tools from the devtools pacakge, which can be downloaded from CRAN. devtools::install_github(&#39;dereksonderegger/SiZer&#39;) ## Skipping install of &#39;SiZer&#39; from a github remote, the SHA1 (8745f2e4) has not changed since last install. ## Use `force = TRUE` to force installation 1.6 Finding Help There are many complicated details about R and nobody knows everything about how each individual package works. As a result, a robust collection of resources has been developed and you are undoubtably not the first person to wonder how to do something. 1.6.1 How does this function work? If you know the function you need, but just don’t know how to use it, the built-in documentation is really quite good. Suppose I am interested in how the rep function works. We could access the rep help page by searching in the help window or from the console via help(rep). The document that is displayed shows what arguments the function expects and what it will return. At the bottom of the help page is often a set of examples demonstrating different ways to use the function. As you get more proficient in R, these help files become quite handy, but initially they feel quite overwhelming. 1.6.2 How does this package work? If a package author really wants their package to be used by a wide audience, they will provide a “vignette”. These are a set of notes that explain enough of how a package works to get a user able to utilize the package effectively. This documentation is targetted towards people the know some R, but deep technical knowledge is not expected. Whenever I encounter a new package that might be applicable to me, the first thing I do is see if it has a vignette, and if so, I start reading it. If a package doesn’t have a vignette, I’ll google “R package XXXX” and that will lead to documentation on CRAN that gives a list of functions in the package. 1.6.3 How do I do XXX? Often I find myself asking how to do something but I don’t know the function or package to use. In those cases, I will use the coding question and answer site stackoverflow. This is particularly effective and I encourage students to spend some time to understand the solutions presented instead of just copying working code. By digging into why a particular code chunk works, you’ll learn all sorts of neat tricks and you’ll find yourself utilizing the site less frequently. 1.7 Exercises Create an RMarkdown file that solves the following exercises. Calculate \\(\\log\\left(6.2\\right)\\) first using base \\(e\\) and second using base \\(10\\). To figure out how to do different bases, it might be helpful to look at the help page for the log function. Calculate the square root of 2 and save the result as the variable named sqrt2. Have R display the decimal value of sqrt2. Hint: use Google to find the square root function. Perhaps search on the keywords “R square root function”. This exercise walks you through installing a package with all the datasets used in the textbook The Statistical Sleuth. Install the package Sleuth3 on your computer using RStudio. Load the package using the library() command. Print out the dataset case0101 "],
["2-data-frames.html", "Chapter 2 Data Frames 2.1 Introduction to Importing Data 2.2 Data Types 2.3 Basic Manipulation 2.4 Exercises", " Chapter 2 Data Frames # Load my favorite packages: dplyr, ggplot2, forcats, readr, and stringr library(tidyverse, quietly = TRUE) Data frames are the fundamental unit of data storage that casual users of R need to work with. Conceptually they are just like a single tab in a spreadsheet (e.g. Excel) file. There are multiple rows and columns and each column is of the same type of information (e.g. numerical values, dates, or character strings) and each row represents a single observation. Because the columns have meaning and we generally give them column names, it is desirable to want to access an element by the name of the column as opposed to the column number. While writing formulas in large Excel spreadsheets I often get annoyed trying to remember which column something was in and muttering “Was total biomass in column P or Q?” A system where I could just name the column Total_Biomass and then always refer to it that way, is much nicer to work with and I make fewer dumb mistakes. In this chapter we will briefly cover the minimal set of tools for working with data frames. First we discuss how to import data sets, both packages from packages and from appropriately formated Excel and .csv files. Finally we’ll see how to create a data frame “by hand” and to access columns and do simple manipulations. In this chapter, we will focus on standard R data frame manipulations so that readers gain basic familiarity with non-tidyverse accessor methods. 2.1 Introduction to Importing Data 2.1.1 From a Package For many students, they will be assigned homework that utilizes data sets that are stored in some package. To access those, we would need to first install the package if we haven’t already. Recall to do that, we can use the Rstudio menu bar “Tools -&gt; Install Packages…” mouse action. Because we might have thousands of packages installed on a computer, and those packages might all have data sets associated with them, they aren’t loaded into memory by default. Instead we have to go through a two-step process of making sure that the package is installed on the computer, and then load the desired data set into the running session of R. Once the package is intalled, we can load the data into our session via the following command: data(&#39;alfalfa&#39;, package=&#39;faraway&#39;) # load the data set &#39;alfalfa&#39; from the package &#39;faraway&#39; Because R tries to avoid loading datasets until it is sure that you need them, the object alfalfa isn’t initially loaded as a data.frame but rather as a “promise” that it eventually will be loaded whenever you first use it. So lets first access it by viewing it. View(alfalfa) There are two ways to enter the view command. Either executing the View() function from the console, or clicking on either the white table or the object name in the Environment tab. # Show the image of the environment tab with the white table highlighted 2.1.2 Import from .csv or .xls files Often times data is stored in a “Comma Separated Values” file (with the file suffix of .csv) where the rows in the file represent the data frame rows, and the columns are just separated by commas. The first row of the file is usually the column titles. Alternatively, the data might be stored in an Excel file and we just need to tell R where the file is and which worksheet tab to import. The hardest part for people that are new to programming is giving the path to the data file. In this case, I recommend students use the data import wizard that RStudio includes which is accessed via ‘File -&gt; Import Dataset’. This will then give you a choice of file types to read from (.csv files are in the “Text” options). Once you have selected the file type to import, the user is presented with a file browser window where the desired file should be located. Once the file is chosen, we can import of the file. Critically, we should notice that the import wizard generates R code that does the actual import. We MUST copy that code into our Rmarkdown file or else the import won’t happen when we try to knit the Rmarkdown into an output document because knitting always occurs in a completely fresh R session. So only use the import wizard to generate the import code! The code generated by the import wizard ends with a View() command and I typically remove that as it can interfer with the knitting process. The code that I’ll paste into my RMarkdown file typically looks like this: library(readxl) Melioid_IgG &lt;- read_excel(&quot;~/Dropbox/NAU/MAGPIX serology/Data/Melioid_IgG.xlsx&quot;) # View(Melioid_IgG) 2.2 Data Types Data frames are required that each column have the same type. That is to say, if a column is numeric, you can just change one value to a character string. Below are the most common data types that are commonly used within R. Integers - These are the integer numbers \\(\\left(\\dots,-2,-1,0,1,2,\\dots\\right)\\). To convert a numeric value to an integer you may use the function as.integer(). Numeric - These could be any number (whole number or decimal). To convert another type to numeric you may use the function as.numeric(). Strings - These are a collection of characters (example: Storing a student’s last name). To convert another type to a string, use as.character(). Factors - These are strings that can only values from a finite set. For example we might wish to store a variable that records home department of a student. Since the department can only come from a finite set of possibilities, I would use a factor. Factors are categorical variables, but R calls them factors instead of categorical variable. A vector of values of another type can always be converted to a factor using the as.factor() command. For converting numeric values to factors, I will often use the function cut(). Logicals - This is a special case of a factor that can only take on the values TRUE and FALSE. (Be careful to always capitalize TRUE and FALSE. Because R is case-sensitive, TRUE is not the same as true.) Using the function as.logical() you can convert numeric values to TRUE and FALSE where 0 is FALSE and anything else is TRUE. Depending on the command, R will coerce your data from one type to another if necessary, but it is a good habit to do the coercion yourself. If a variable is a number, R will automatically assume that it is continuous numerical variable. If it is a character string, then R will assume it is a factor when doing any statistical analysis. Most of these types are familiar to beginning R users except for factors. Factors are how R keeps track of categorical variables. R does this in a two step pattern. First it figures out how many categories there are and remembers which category an observation belongs two and second, it keeps a vector character strings that correspond to the names of each of the categories. # A character vector y &lt;- c(&#39;B&#39;,&#39;B&#39;,&#39;A&#39;,&#39;A&#39;,&#39;C&#39;) y ## [1] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;C&quot; # convert the vector of characters into a vector of factors z &lt;- factor(y) str(z) ## Factor w/ 3 levels &quot;A&quot;,&quot;B&quot;,&quot;C&quot;: 2 2 1 1 3 Notice that the vector z is actually the combination of group assignment vector 2,2,1,1,3 and the group names vector “A”,”B”,”C”. So we could convert z to a vector of numerics or to a vector of character strings. as.numeric(z) ## [1] 2 2 1 1 3 as.character(z) ## [1] &quot;B&quot; &quot;B&quot; &quot;A&quot; &quot;A&quot; &quot;C&quot; Often we need to know what possible groups there are, and this is done using the levels() command. levels(z) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; Notice that the order of the group names was done alphabetically, which we did not chose. This ordering of the levels has implications when we do an analysis or make a plot and R will always display information about the factor levels using this order. It would be nice to be able to change the order. Also it would be really nice to give more descriptive names to the groups rather than just the group code in my raw data. Useful functions for controling the order and labels of the factor can be found in the forcats package which we use in a later chapter. 2.3 Basic Manipulation Occasionally I’ll need to create a small data frame “by hand” to facilitate creating graphs in ggplot2. In this final section, we’ll cover creating a data frame and doing simple manipulations using the base R commands and syntax. To create a data frame, we have to squish together a bunch of columns vectors. The command data.frame() does exactly that. In the example below, I list the names, ages and heights (in inches) of my family. family &lt;- data.frame( Names = c(&#39;Derek&#39;, &#39;Aubrey&#39;, &#39;Elise&#39;, &#39;Casey&#39;), Age = c(42, 39, 6, 3), Height.in = c(64, 66, 43, 39) ) family ## Names Age Height.in ## 1 Derek 42 64 ## 2 Aubrey 39 66 ## 3 Elise 6 43 ## 4 Casey 3 39 To access a particular column, we could use the $ operator. We could then do something like calculate the mean or standard deviation. family$Age ## [1] 42 39 6 3 mean( family$Age ) ## [1] 22.5 sd( family$Age ) ## [1] 20.85665 As an alternative to the “$” operator, we could use the [row, column] notation. To select a particular row or column, we can select them by either name or location. family[ , &#39;Age&#39;] # all the rows, Age column ## [1] 42 39 6 3 family[ 2, &#39;Age&#39;] # age of person in row 2 ## [1] 39 Next we could calculate everybodies height in centimeters by multiplying the heights by 2.54 and saving the result in column appropriately named. family$Height.cm &lt;- family$Height.in * 2.54 # calculate the heights and save them! family # view our result! ## Names Age Height.in Height.cm ## 1 Derek 42 64 162.56 ## 2 Aubrey 39 66 167.64 ## 3 Elise 6 43 109.22 ## 4 Casey 3 39 99.06 2.4 Exercises Create a data frame “by hand” with the names, ages, and heights of your own family. If this feels odd, feel free to make up people or include pets. Calculate the mean age amongst your family. I have a spreadsheet file hosted on GitHub at https://raw.githubusercontent.com/dereksonderegger/570L/master/data-raw/Example_1.csv. Because the readr package doesn’t care whether a file is on your local computer or on the Internet, we’ll use this file. Start the import wizard using: “File -&gt; Import Dataset -&gt; From Text (readr) …” and input the above web URL. Click the update button near the top to cause the wizard to preview the result. Save the generated code to your Rmarkdown file and show the first few rows using the head() command. "],
["3-graphing.html", "Chapter 3 Graphing 3.1 Basic Graphs 3.2 Title &amp; Axis Labels 3.3 Annotation 3.4 Faceting 3.5 Exercises", " Chapter 3 Graphing library(tidyverse) # loading ggplot2 and dplyr There are three major “systems” of making graphs in R. The basic plotting commands in R are quite effective but the commands do not have a way of being combined in easy ways. Lattice graphics (which the mosaic package uses) makes it possible to create some quite complicated graphs but it is very difficult to do make non-standard graphs. The last package, ggplot2 tries to not anticipate what the user wants to do, but rather provide the mechanisms for pulling together different graphical concepts and the user gets to decide which elements to combine. To make the most of ggplot2 it is important to wrap your mind around “The Grammar of Graphics”. Briefly, the act of building a graph can be broken down into three steps. Define what data set we are using. What is the major relationship we wish to examine? In what way should we present that relationship? These relationships can be presented in multiple ways, and the process of creating a good graph relies on building layers upon layers of information. For example, we might start with printing the raw data and then overlay a regression line over the top. Next, it should be noted that ggplot2 is designed to act on data frames. It is actually hard to just draw three data points and for simple graphs it might be easier to use the base graphing system in R. However for any real data analysis project, the data will already be in a data frame and this is not an annoyance. These notes are sufficient for creating simple graphs using ggplot2, but are not intended to be exhaustive. There are many places online to get help with ggplot2. One very nice resource is the website, http://www.cookbook-r.com/Graphs/, which gives much of the information available in the book R Graphics Cookbook which I highly recommend. Second is just googling your problems and see what you can find on websites such as StackExchange. One way that ggplot2 makes it easy to form very complicated graphs is that it provides a large number of basic building blocks that, when stacked upon each other, can produce extremely complicated graphs. A full list is available at http://docs.ggplot2.org/current/ but the following list gives some idea of different building blocks. These different geometries are different ways to display the relationship between variables and can be combined in many interesting ways. Geom Description Required Aesthetics geom_histogram A histogram x geom_bar A barplot x geom_density A density plot of data. (smoothed histogram) x geom_boxplot Boxplots x, y geom_line Draw a line (after sorting x-values) x, y geom_path Draw a line (without sorting x-values) x, y geom_point Draw points (for a scatterplot) x, y geom_smooth Add a ribbon that summarizes a scatterplot x, y geom_ribbon Enclose a region, and color the interior ymin, ymax geom_errorbar Error bars ymin, ymax geom_text Add text to a graph x, y, label geom_label Add text to a graph x, y, label geom_tile Create Heat map x, y, fill A graph can be built up layer by layer, where: Each layer corresponds to a geom, each of which requires a dataset and a mapping between an aesthetic and a column of the data set. If you don’t specify either, then the layer inherits everything defined in the ggplot() command. You can have different datasets for each layer! Layers can be added with a +, or you can define two plots and add them together (second one over-writes anything that conflicts). 3.1 Basic Graphs 3.1.1 Scatterplots To start with, we’ll make a very simple scatterplot using the iris dataset. The iris dataset contains observations on three species of iris plants where we’ve measured the length and width of both the petals and sepals. We will make a scatterplot of Sepal.Length versus Petal.Length, which are two columns in the dataset. data(iris) # load the iris dataset that comes with R str(iris) # what columns do we have to play with... ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ggplot( data=iris, aes(x=Sepal.Length, y=Petal.Length) ) + geom_point( ) The data set we wish to use is specified using data=iris. The relationship we want to explore is x=Sepal.Length and y=Petal.Length. This means the x-axis will be the Sepal Length and the y-axis will be the Petal Length. The way we want to display this relationship is through graphing 1 point for every observation. We can define other attributes that might reflect other aspects of the data. For example, we might want for the color of the data point to change dynamically based on the species of iris. ggplot( data=iris, aes(x=Sepal.Length, y=Petal.Length) ) + geom_point( aes(color=Species) ) The aes() command inside the previous section of code is quite mysterious. The way to think about the aes() is that it gives you a way to define relationships that are data dependent. In the previous graph, the x-value and y-value for each point was defined dynamically by the data, as was the color. If we just wanted all the data points to be colored blue and larger, then the following code would do that ggplot( data=iris, aes(x=Sepal.Length, y=Petal.Length) ) + geom_point( color=&#39;blue&#39;, size=4 ) The important part isn’t that color and size were defined in the geom_point() but that they were defined outside of an aes() function! Anything set inside an aes() command will be of the form attribute=Column_Name and will change based on the data. Anything set outside an aes() command will be in the form attribute=value and will be fixed. 3.1.2 Box Plots Boxplots are a common way to show a categorical variable on the x-axis and continuous on the y-axis. ggplot(iris, aes(x=Species, y=Petal.Length)) + geom_boxplot() The boxes show the \\(25^{th}\\), \\(50^{th}\\), and \\(75^{th}\\) percentile and the lines coming off the box extend to the smallest and largest non-outlier observation. 3.2 Title &amp; Axis Labels To make a graph more understandable, it is necessary to tweak the axis labels and add a main title and such. Here we’ll adjust labels in a graph, including the legend labels. # Save the graph before I add more to it. P &lt;- ggplot( data=iris, aes(x=Sepal.Length, y=Petal.Length) ) + geom_point( aes(color=Species) ) + labs( title=&#39;Sepal Length vs Petal Length&#39;) + labs( x=&quot;Sepal Length (cm)&quot;, y=&quot;Petal Length (cm)&quot; ) + labs( color=&quot;Species Name&quot;) + labs( caption = &quot;iris data from Edgar Anderson (1935)&quot; ) # Print out the plot P You could either call the labs() command repeatedly with each label, or you could provide multiple arguements to just one labs() call. 3.3 Annotation One way to improve the clarity of a graph is to remove the legend and label the points directly on the graph. For example, we could instead have the species names near the cloud of data points for the species. Usually our annotations aren’t stored in the data.frame that contains our data of interest. So we need to either create a new (usually small) data.frame that contains all the information needed to create the annotation or we need to set the necessary information in-place. Either way, we need to specify the x and y coordinates, the label to be printed as well as any other attribute that is set in the global aes() command. That means if color has been set globally, the annotation layer also needs to address the color attribute. 3.3.1 Using a data.frame To do this in ggplot, we need to make a data frame that has the columns Sepal.Length and Petal.Length so that we can specify where each label should go, as well as the label that we want to print. Also, because color is matched to the Species column, this small dataset should also have a the Species column. This step always requires a bit of fussing with the graph because the text size and location should be chosen based on the size of the output graphic and if I rescale the image it often looks awkward. Typically I leave this step until the figure is being prepared for final publication. # create another data frame that has the text labels I want to add to the graph. annotation.data &lt;- data.frame( Sepal.Length = c(4.5, 6.5, 7.0), # Figured out the label location by eye. Petal.Length = c(2.25, 3.75, 6.5), # If I rescale the graph, I would redo this step. Species = c(&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;), Text = c(&#39;SETOSA&#39;, &#39;VERSICOLOR&#39;, &#39;VIRGINICA&#39;) ) # Use the previous plot I created, along with the # aes() options already defined. P + geom_text( data=annotation.data, aes(label=Text), size=2.5) + # write the labels theme( legend.position = &#39;none&#39; ) # remove the legend 3.3.2 Setting attributes in-line Instead of creating a new data frame, we could just add a new layer and just set all of the graph attributes manually. To do this, we have to have one layer for each text we want to add to the graph. P + geom_text( x=4.5, y=2.25, size=2, label=&#39;SETOSA&#39; ) + geom_text( x=6.5, y=3.75, size=2, label=&#39;VERSICOLOR&#39; ) + geom_text( x=7.0, y=6.50, size=2, label=&#39;VIRGINICA&#39; ) Finally there is a geom_label layer that draws a nice box around what you want to print. P + geom_label( x=4.5, y=2.25, size=2, label=&#39;SETOSA&#39; ) + geom_label( x=6.5, y=3.75, size=2, label=&#39;VERSICOLOR&#39; ) + geom_label( x=7.0, y=6.50, size=2, label=&#39;VIRGINICA&#39; ) My recommendation is to just set the x, y, and label attributes manually if you have one or two annotations to print on the graph. If you have many annotations to print, the create a data frame that contains all of them and use data= argument in the geom to use that created annotation data set. 3.4 Faceting The goal with faceting is to make many panels of graphics where each panel represents the same relationship between variables, but something changes between each panel. For example using the iris dataset we could look at the relationship between Sepal.Length and Petal.Length either with all the data in one graph, or one panel per species. library(ggplot2) ggplot(iris, aes(x=Sepal.Length, y=Petal.Length)) + geom_point() + facet_grid( . ~ Species ) The line facet_grid( formula ) tells ggplot2 to make panels, and the formula tells how to orient the panels. In R formulas are always interpretated in the order y ~ x. Because I want the species to change as we go across the page, but don’t have anything I want to change vertically we use . ~ Species to represent that. If we had wanted three graphs stacked then we could use Species ~ .. For a second example, we look at a dataset that examines the amount a waiter was tipped by 244 parties. Covariates that were measured include the day of the week, size of the party, total amount of the bill, amount tipped, whether there were smokers in the group and the gender of the person paying the bill data(tips, package=&#39;reshape&#39;) head(tips) ## total_bill tip sex smoker day time size ## 1 16.99 1.01 Female No Sun Dinner 2 ## 2 10.34 1.66 Male No Sun Dinner 3 ## 3 21.01 3.50 Male No Sun Dinner 3 ## 4 23.68 3.31 Male No Sun Dinner 2 ## 5 24.59 3.61 Female No Sun Dinner 4 ## 6 25.29 4.71 Male No Sun Dinner 4 It is easy to look at the relationship between the size of the bill and the percent tipped. ggplot(tips, aes(x = total_bill, y = tip / total_bill )) + geom_point() Next we ask if there is a difference in tipping percent based on gender or day of the week by plotting this relationship for each combination of gender and day. ggplot(tips, aes(x = total_bill, y = tip / total_bill )) + geom_point() + facet_grid( sex ~ day ) Sometimes we want multiple rows and columns of facets, but there is only one categorical variable with many levels. In that case we use facet_wrap which takes a one-sided formula. ggplot(tips, aes(x = total_bill, y = tip / total_bill )) + geom_point() + facet_wrap( ~ day ) Finally we can allow the x and y scales to vary between the panels by setting “free”, “free_x”, or “free_y”. In the following code, the y-axis scale changes between the gender groups. ggplot(tips, aes(x = total_bill, y = tip / total_bill )) + geom_point() + facet_grid( sex ~ day, scales=&quot;free_y&quot; ) 3.5 Exercises For the dataset trees, which should already be pre-loaded. Look at the help file using ?trees for more information about this data set. We wish to build a scatterplot that compares the height and girth of these cherry trees to the volume of lumber that was produced. Create a graph using ggplot2 with Height on the x-axis, Volume on the y-axis, and Girth as the either the size of the data point or the color of the data point. Which do you think is a more intuitive representation? Add appropriate labels for the main title and the x and y axes. The R-squared value for a regression through these points is 0.36 and the p-value for the statistical significance of height is 0.00038. Add text labels “R-squared = 0.36” and “p-value = 0.0004” somewhere on the graph. Consider the following small dataset that represents the number of times per day my wife played “Ring around the Rosy” with my daughter relative to the number of days since she has learned this game. The column yhat represents the best fitting line through the data, and lwr and upr represent a 95% confidence interval for the predicted value on that day. Rosy &lt;- data.frame( times = c(15, 11, 9, 12, 5, 2, 3), day = 1:7, yhat = c(14.36, 12.29, 10.21, 8.14, 6.07, 4.00, 1.93), lwr = c( 9.54, 8.5, 7.22, 5.47, 3.08, 0.22, -2.89), upr = c(19.18, 16.07, 13.2, 10.82, 9.06, 7.78, 6.75)) Using ggplot() and geom_point(), create a scatterplot with day along the x-axis and times along the y-axis. Add a line to the graph where the x-values are the day values but now the y-values are the predicted values which we’ve called yhat. Notice that you have to set the aesthetic y=times for the points and y=yhat for the line. Because each geom_ will accept an aes() command, you can specify the y attribute to be different for different layers of the graph. Add a ribbon that represents the confidence region of the regression line. The geom_ribbon() function requires an x, ymin, and ymax columns to be defined. For examples of using geom_ribbon() see the online documentation: http://docs.ggplot2.org/current/geom_ribbon.html. ggplot(Rosy, aes(x=day)) + geom_point(aes(y=times)) + geom_line( aes(y=yhat)) + geom_ribbon( aes(ymin=lwr, ymax=upr), fill=&#39;salmon&#39;) What happened when you added the ribbon? Did some points get hidden? If so, why? Reorder the statements that created the graph so that the ribbon is on the bottom and the data points are on top and the regression line is visible. The color of the ribbon fill is ugly. Use Google to find a list of named colors available to ggplot2. For example, I googled “ggplot2 named colors” and found the following link: http://sape.inf.usi.ch/quick-reference/ggplot2/colour. Choose a color for the fill that is pleasing to you. Add labels for the x-axis and y-axis that are appropriate along with a main title. We’ll next make some density plots that relate several factors towards the birthweight of a child. The MASS package contains a dataset called birthwt which contains information about 189 babies and their mothers. In particular there are columns for the mother’s race and smoking status during the pregnancy. Load the birthwt by either using the data() command or loading the MASS library. Read the help file for the dataset using MASS::birthwt. The covariates race and smoke are not stored in a user friendly manner. For example, smoking status is labeled using a 0 or a 1. Because it is not obvious which should represent that the mother smoked, we’ll add better labels to the race and smoke variables. For more information about dealing with factors and their levels, see the Factors chapter in these notes. library(tidyverse) data(&#39;birthwt&#39;, package=&#39;MASS&#39;) birthwt &lt;- birthwt %&gt;% mutate( race = factor(race, labels=c(&#39;White&#39;,&#39;Black&#39;,&#39;Other&#39;)), smoke = factor(smoke, labels=c(&#39;No Smoke&#39;, &#39;Smoke&#39;))) Graph a histogram of the birthweights bwt using ggplot(birthwt, aes(x=bwt)) + geom_histogram(). Make separate graphs that denote whether a mother smoked during pregnancy by appending + facet_grid() command to your original graphing command. Perhaps race matters in relation to smoking. Make our grid of graphs vary with smoking status changing vertically, and race changing horizontally (that is the formula in facet_grid() should have smoking be the y variable and race as the x). Remove race from the facet grid, (so go back to the graph you had in part d). I’d like to next add an estimated density line to the graphs, but to do that, I need to first change the y-axis to be density (instead of counts), which we do by using aes(y=..density..) in the ggplot() aesthetics command. Next we can add the estimated smooth density using the geom_density() command. To really make this look nice, lets change the fill color of the histograms to be something less dark, lets use fill='cornsilk' and color='grey60'. To play with different colors that have names, check out the following: [http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf]. Change the order in which the histogram and the density line are added to the plot. Does it matter and which do you prefer? Finally consider if you should have the histograms side-by-side or one ontop of the other (i.e. . ~ smoke or smoke ~ .). Which do you think better displayes the decrease in mean birthweight and why? Load the dataset ChickWeight which comes preloaded in R and get the background on the dataset by reading the manual page ?ChickWeight. Produce a separate scatter plot of weight vs age for each chick. Use color to distinguish the four different Diet treatments. We could examine this data by producing a scatterplot for each diet. Most of the code below is readable, but if we don’t add the group aesthetic the lines would not connect the dots for each Chick but would instead connect the dots across different chicks. data(ChickWeight) ggplot(ChickWeight, aes(x=Time, y=weight, group=Chick )) + geom_point() + geom_line() + facet_grid( ~ Diet) "],
["4-data-wrangling.html", "Chapter 4 Data Wrangling 4.1 Verbs 4.2 Split, apply, combine 4.3 Exercises", " Chapter 4 Data Wrangling library(tidyverse, quietly = TRUE) # loading ggplot2 and dplyr Many of the tools to manipulate data frames in R were written without a consistent syntax and are difficult use together. To remedy this, Hadley Wickham (the writer of ggplot2) introduced a package called plyr which was quite useful. As with many projects, his first version was good but not great and he introduced an improved version that works exclusively with data.frames called dplyr which we will investigate. The package dplyr strives to provide a convenient and consistent set of functions to handle the most common data frame manipulations and a mechanism for chaining these operations together to perform complex tasks. The Dr Wickham has put together a very nice introduction to the package that explains in more detail how the various pieces work and I encourage you to read it at some point. [http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html]. One of the aspects about the data.frame object is that R does some simplification for you, but it does not do it in a consistent manner. Somewhat obnoxiously character strings are always converted to factors and subsetting might return a data.frame or a vector or a scalar. This is fine at the command line, but can be problematic when programming. Furthermore, many operations are pretty slow using data.frame. To get around this, Dr Wickham introduced a modified version of the data.frame called a tibble. A tibble is a data.frame but with a few extra bits. For now we can ignore the differences. The pipe command %&gt;% allows for very readable code. The idea is that the %&gt;% operator works by translating the command a %&gt;% f(b) to the expression f(a,b). This operator works on any function and was introduced in the magrittr package. The beauty of this comes when you have a suite of functions that takes input arguments of the same type as their output. For example, if we wanted to start with x, and first apply function f(), then g(), and then h(), the usual R command would be h(g(f(x))) which is hard to read because you have to start reading at the innermost set of parentheses. Using the pipe command %&gt;%, this sequence of operations becomes x %&gt;% f() %&gt;% g() %&gt;% h(). Written Meaning a %&gt;% f(b) f(a,b) b %&gt;% f(a, .) f(a, b) x %&gt;% f() %&gt;% g() g( f(x) ) In dplyr, all the functions below take a data set as its first argument and outputs an appropriately modified data set. This will allow me to chain together commands in a readable fashion. The pipe command works with any function, not just the dplyr functions and I often find myself using it all over the place. 4.1 Verbs The foundational operations to perform on a data set are: add_row - Add an additional row of data. Subsetting - Returns a with only particular columns or rows – select - Selecting a subset of columns by name or column number. – filter - Selecting a subset of rows from a data frame based on logical expressions. – slice - Selecting a subset of rows by row number. arrange - Re-ordering the rows of a data frame. mutate - Add a new column that is some function of other columns. summarise - calculate some summary statistic of a column of data. This collapses a set of rows into a single row. Each of these operations is a function in the package dplyr. These functions all have a similar calling syntax, the first argument is a data set, subsequent arguments describe what to do with the input data frame and you can refer to the columns without using the df$column notation. All of these functions will return a data set. To demonstrate all of these actions, we will consider a tiny dataset of a gradebook of doctors at a Sacred Heart Hospital. # Create a tiny data frame that is easy to see what is happening grades &lt;- tribble( ~l.name, ~Gender, ~Exam1, ~Exam2, ~Final, &#39;Cox&#39;, &#39;M&#39;, 93, 98, 96, &#39;Dorian&#39;, &#39;M&#39;, 89, 70, 85, &#39;Kelso&#39;, &#39;M&#39;, 80, 82, 81, &#39;Turk&#39;, &#39;M&#39;, 70, 85, 92) grades ## # A tibble: 4 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Dorian M 89 70 85 ## 3 Kelso M 80 82 81 ## 4 Turk M 70 85 92 4.1.1 add_row Suppose that we want to add a row to our dataset. We can give it as much or as little information as we want and any missing information will be denoted as missing using a NA which stands for Not Available. grades %&gt;% add_row( l.name=&#39;Reid&#39;, Exam1=95, Exam2=92) ## # A tibble: 5 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Dorian M 89 70 85 ## 3 Kelso M 80 82 81 ## 4 Turk M 70 85 92 ## 5 Reid &lt;NA&gt; 95 92 NA Because we didn’t assign the result of our previous calculation to any object name, R just printed the result. Instead, lets add all of Dr Reid’s information and save the result by overwritting the grades data.frame with the new version. grades &lt;- grades %&gt;% add_row( l.name=&#39;Reid&#39;, Gender=&#39;F&#39;, Exam1=95, Exam2=92, Final=100) grades ## # A tibble: 5 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Dorian M 89 70 85 ## 3 Kelso M 80 82 81 ## 4 Turk M 70 85 92 ## 5 Reid F 95 92 100 4.1.2 Subsetting These function allows you select certain columns and rows of a data frame. 4.1.2.1 select() Often you only want to work with a small number of columns of a data frame and want to be able to select a subset of columns or perhaps remove a subset. The function to do that is dplyr::select() I could select the columns Exam columns by hand, or by using an extension of the : operator # select( grades, Exam1, Exam2 ) # from `grades`, select columns Exam1, Exam2 grades %&gt;% select( Exam1, Exam2 ) # Exam1 and Exam2 ## # A tibble: 5 x 2 ## Exam1 Exam2 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 93 98 ## 2 89 70 ## 3 80 82 ## 4 70 85 ## 5 95 92 grades %&gt;% select( Exam1:Final ) # Columns Exam1 through Final ## # A tibble: 5 x 3 ## Exam1 Exam2 Final ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 93 98 96 ## 2 89 70 85 ## 3 80 82 81 ## 4 70 85 92 ## 5 95 92 100 grades %&gt;% select( -Exam1 ) # Negative indexing by name drops a column ## # A tibble: 5 x 4 ## l.name Gender Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 98 96 ## 2 Dorian M 70 85 ## 3 Kelso M 82 81 ## 4 Turk M 85 92 ## 5 Reid F 92 100 grades %&gt;% select( 1:2 ) # Can select column by column position ## # A tibble: 5 x 2 ## l.name Gender ## &lt;chr&gt; &lt;chr&gt; ## 1 Cox M ## 2 Dorian M ## 3 Kelso M ## 4 Turk M ## 5 Reid F The select() command has a few other tricks. There are functional calls that describe the columns you wish to select that take advantage of pattern matching. I generally can get by with starts_with(), ends_with(), and contains(), but there is a final operator matches() that takes a regular expression. grades %&gt;% select( starts_with(&#39;Exam&#39;) ) # Exam1 and Exam2 ## # A tibble: 5 x 2 ## Exam1 Exam2 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 93 98 ## 2 89 70 ## 3 80 82 ## 4 70 85 ## 5 95 92 grades %&gt;% select( starts_with(&#39;Exam&#39;), starts_with(&#39;F&#39;) ) ## # A tibble: 5 x 3 ## Exam1 Exam2 Final ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 93 98 96 ## 2 89 70 85 ## 3 80 82 81 ## 4 70 85 92 ## 5 95 92 100 The dplyr::select function is quite handy, but there are several other packages out there that have a select function and we can get into trouble with loading other packages with the same function names. If I encounter the select function behaving in a weird manner or complaining about an input argument, my first remedy is to be explicit about it is the dplyr::select() function by appending the package name at the start. 4.1.2.2 filter() It is common to want to select particular rows where we have some logical expression to pick the rows. # select students with Final grades greater than 90 grades %&gt;% filter(Final &gt; 90) ## # A tibble: 3 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Turk M 70 85 92 ## 3 Reid F 95 92 100 You can have multiple logical expressions to select rows and they will be logically combined so that only rows that satisfy all of the conditions are selected. The logicals are joined together using &amp; (and) operator or the | (or) operator and you may explicitly use other logicals. For example a factor column type might be used to select rows where type is either one or two via the following: type==1 | type==2. # select students with Final grades above 90 and # average score also above 90 grades %&gt;% filter(Exam2 &gt; 90, Final &gt; 90) ## # A tibble: 2 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Reid F 95 92 100 # we could also use an &quot;and&quot; condition grades %&gt;% filter(Exam2 &gt; 90 &amp; Final &gt; 90) ## # A tibble: 2 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Reid F 95 92 100 4.1.2.3 slice() When you want to filter rows based on row number, this is called slicing. # grab the first 2 rows grades %&gt;% slice(1:2) ## # A tibble: 2 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Dorian M 89 70 85 4.1.3 arrange() We often need to re-order the rows of a data frame. For example, we might wish to take our grade book and sort the rows by the average score, or perhaps alphabetically. The arrange() function does exactly that. The first argument is the data frame to re-order, and the subsequent arguments are the columns to sort on. The order of the sorting column determines the precedent… the first sorting column is first used and the second sorting column is only used to break ties. grades %&gt;% arrange(l.name) ## # A tibble: 5 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cox M 93 98 96 ## 2 Dorian M 89 70 85 ## 3 Kelso M 80 82 81 ## 4 Reid F 95 92 100 ## 5 Turk M 70 85 92 The default sorting is in ascending order, so to sort the grades with the highest scoring person in the first row, we must tell arrange to do it in descending order using desc(column.name). grades %&gt;% arrange(desc(Final)) ## # A tibble: 5 x 5 ## l.name Gender Exam1 Exam2 Final ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Reid F 95 92 100 ## 2 Cox M 93 98 96 ## 3 Turk M 70 85 92 ## 4 Dorian M 89 70 85 ## 5 Kelso M 80 82 81 In a more complicated example, consider the following data and we want to order it first by Treatment Level and secondarily by the y-value. I want the Treatment level in the default ascending order (Low, Medium, High), but the y variable in descending order. # make some data dd &lt;- data.frame( Trt = factor(c(&quot;High&quot;, &quot;Med&quot;, &quot;High&quot;, &quot;Low&quot;), levels = c(&quot;Low&quot;, &quot;Med&quot;, &quot;High&quot;)), y = c(8, 3, 9, 9), z = c(1, 1, 1, 2)) dd ## Trt y z ## 1 High 8 1 ## 2 Med 3 1 ## 3 High 9 1 ## 4 Low 9 2 # arrange the rows first by treatment, and then by y (y in descending order) dd %&gt;% arrange(Trt, desc(y)) ## Trt y z ## 1 Low 9 2 ## 2 Med 3 1 ## 3 High 9 1 ## 4 High 8 1 4.1.4 mutate() The mutate command either creates a new column in the data frame or updates an already existing column. I often need to create a new column that is some function of the old columns. In the dplyr package, this is a mutate command. To do ths, we give a mutate( NewColumn = Function of Old Columns ) command. You can do multiple calculations within the same mutate() command, and you can even refer to columns that were created in the same mutate() command. grades &lt;- grades %&gt;% mutate( average = (Exam1 + Exam2 + Final)/3, grade = cut(average, c(0, 60, 70, 80, 90, 100), # cut takes numeric variable c( &#39;F&#39;,&#39;D&#39;,&#39;C&#39;,&#39;B&#39;,&#39;A&#39;)) ) # and makes a factor grades ## # A tibble: 5 x 7 ## l.name Gender Exam1 Exam2 Final average grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Cox M 93 98 96 95.7 A ## 2 Dorian M 89 70 85 81.3 B ## 3 Kelso M 80 82 81 81 B ## 4 Turk M 70 85 92 82.3 B ## 5 Reid F 95 92 100 95.7 A If we want to update some column information we will also use the mutate command, but we need some mechanism to selct the rows to change, while keeping all the other row values the same. The functions if_else() and case_when() are ideal for this task. The if_else syntax is if_else( logical.expression, TrueValue, FalseValue ). We can use this to update a score in our gradebook. # Update Doctor Reids Final Exam score to be a 98, leave everybody elses the same. grades &lt;- grades %&gt;% mutate( Final = if_else(l.name == &#39;Reid&#39;, 98, Final ) ) grades ## # A tibble: 5 x 7 ## l.name Gender Exam1 Exam2 Final average grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Cox M 93 98 96 95.7 A ## 2 Dorian M 89 70 85 81.3 B ## 3 Kelso M 80 82 81 81 B ## 4 Turk M 70 85 92 82.3 B ## 5 Reid F 95 92 98 95.7 A We could also use this to modify all the rows. For example, perhaps we want to change the gender column information to have levels Male and Female. # Update the Gender column labels grades &lt;- grades %&gt;% mutate( Gender = if_else(Gender == &#39;M&#39;, &#39;Male&#39;, &#39;Female&#39; ) ) grades ## # A tibble: 5 x 7 ## l.name Gender Exam1 Exam2 Final average grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; ## 1 Cox Male 93 98 96 95.7 A ## 2 Dorian Male 89 70 85 81.3 B ## 3 Kelso Male 80 82 81 81 B ## 4 Turk Male 70 85 92 82.3 B ## 5 Reid Female 95 92 98 95.7 A To do something similar for the case where we have 3 or more categories, we could use the ifelse() command repeatedly to address each category level seperately. However because the ifelse command is limited to just two cases, it would be nice if there was a generalization to multiple categories. The dplyr::case_when function is that generalization. The synax is case_when( logicalExpression1~Value1, logicalExpression2~Value2, ... ). We can have as many LogicalExpression ~ Value pairs as we want. Consider the following data frame that has name, gender, and political party affiliation of six individuals. In this example, we’ved coded male/female as 1/0 and political party as 1,2,3 for democratic, republican, and independent. people &lt;- data.frame( name = c(&#39;Barack&#39;,&#39;Michelle&#39;, &#39;George&#39;, &#39;Laura&#39;, &#39;Bernie&#39;, &#39;Deborah&#39;), gender = c(1,0,1,0,1,0), party = c(1,1,2,2,3,3) ) people ## name gender party ## 1 Barack 1 1 ## 2 Michelle 0 1 ## 3 George 1 2 ## 4 Laura 0 2 ## 5 Bernie 1 3 ## 6 Deborah 0 3 people &lt;- people %&gt;% mutate( gender = if_else( gender == 0, &#39;Female&#39;, &#39;Male&#39;) ) %&gt;% mutate( party = case_when( party == 1 ~ &#39;Democratic&#39;, party == 2 ~ &#39;Republican&#39;, party == 3 ~ &#39;Independent&#39;, TRUE ~ &#39;None Stated&#39; ) ) people ## name gender party ## 1 Barack Male Democratic ## 2 Michelle Female Democratic ## 3 George Male Republican ## 4 Laura Female Republican ## 5 Bernie Male Independent ## 6 Deborah Female Independent Often the last case is a catch all case where the logical expression will ALWAYS evaluate to TRUE and this is the value for all other input. As another alternative to the problem of recoding factor levels, we could use the command forcats::fct_recode() function. See the Factors chapter in this book for more information about factors. 4.1.5 summarise() By itself, this function is quite boring, but will become useful later on. Its purpose is to calculate summary statistics using any or all of the data columns. Notice that we get to chose the name of the new column. The way to think about this is that we are collapsing information stored in multiple rows into a single row of values. # calculate the mean of exam 1 grades %&gt;% summarise( mean.E1=mean(Exam1) ) ## # A tibble: 1 x 1 ## mean.E1 ## &lt;dbl&gt; ## 1 85.4 We could calculate multiple summary statistics if we like. # calculate the mean and standard deviation grades %&gt;% summarise( mean.E1=mean(Exam1), stddev.E1=sd(Exam1) ) ## # A tibble: 1 x 2 ## mean.E1 stddev.E1 ## &lt;dbl&gt; &lt;dbl&gt; ## 1 85.4 10.4 4.2 Split, apply, combine Aside from unifying the syntax behind the common operations, the major strength of the dplyr package is the ability to split a data frame into a bunch of sub-data frames, apply a sequence of one or more of the operations we just described, and then combine results back together. We’ll consider data from an experiment from spinning wool into yarn. This experiment considered two different types of wool (A or B) and three different levels of tension on the thread. The response variable is the number of breaks in the resulting yarn. For each of the 6 wool:tension combinations, there are 9 replicated observations per wool:tension level. data(warpbreaks) str(warpbreaks) ## &#39;data.frame&#39;: 54 obs. of 3 variables: ## $ breaks : num 26 30 54 25 70 52 51 26 67 18 ... ## $ wool : Factor w/ 2 levels &quot;A&quot;,&quot;B&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ tension: Factor w/ 3 levels &quot;L&quot;,&quot;M&quot;,&quot;H&quot;: 1 1 1 1 1 1 1 1 1 2 ... The first we must do is to create a data frame with additional information about how to break the data into sub-data frames. In this case, I want to break the data up into the 6 wool-by-tension combinations. Initially we will just figure out how many rows are in each wool-by-tension combination. # group_by: what variable(s) shall we group on. # n() is a function that returns how many rows are in the # currently selected sub-dataframe warpbreaks %&gt;% group_by( wool, tension) %&gt;% # grouping summarise(n = n() ) # how many in each group ## # A tibble: 6 x 3 ## # Groups: wool [2] ## wool tension n ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 A L 9 ## 2 A M 9 ## 3 A H 9 ## 4 B L 9 ## 5 B M 9 ## 6 B H 9 The group_by function takes a data.frame and returns the same data.frame, but with some extra information so that any subsequent function acts on each unique combination defined in the group_by. If you wish to remove this behavior, use group_by() to reset the grouping to have no grouping variable. Using the same summarise function, we could calculate the group mean and standard deviation for each wool-by-tension group. warpbreaks %&gt;% group_by(wool, tension) %&gt;% summarise( n = n(), # I added some formatting to show the mean.breaks = mean(breaks), # reader I am calculating several sd.breaks = sd(breaks)) # statistics. ## # A tibble: 6 x 5 ## # Groups: wool [2] ## wool tension n mean.breaks sd.breaks ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A L 9 44.6 18.1 ## 2 A M 9 24 8.66 ## 3 A H 9 24.6 10.3 ## 4 B L 9 28.2 9.86 ## 5 B M 9 28.8 9.43 ## 6 B H 9 18.8 4.89 If instead of summarizing each split, we might want to just do some calculation and the output should have the same number of rows as the input data frame. In this case I’ll tell dplyr that we are mutating the data frame instead of summarizing it. For example, suppose that I want to calculate the residual value \\[e_{ijk}=y_{ijk}-\\bar{y}_{ij\\cdot}\\] where \\(\\bar{y}_{ij\\cdot}\\) is the mean of each wool:tension combination. warpbreaks %&gt;% group_by(wool, tension) %&gt;% # group by wool:tension mutate(resid = breaks - mean(breaks)) %&gt;% # mean(breaks) of the group! head( ) # show the first couple of rows ## # A tibble: 6 x 4 ## # Groups: wool, tension [1] ## breaks wool tension resid ## &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 26 A L -18.6 ## 2 30 A L -14.6 ## 3 54 A L 9.44 ## 4 25 A L -19.6 ## 5 70 A L 25.4 ## 6 52 A L 7.44 4.3 Exercises The dataset ChickWeight tracks the weights of 48 baby chickens (chicks) feed four different diets. Feel free to complete all parts of the exercise in a single R pipeline at the end of the problem. Load the dataset using data(ChickWeight) Look at the help files for the description of the columns. Remove all the observations except for observations from day 10 or day 20. The tough part in this instruction is disguishing between “and” and “or”. Obviously there are no observations that occur from both day 10 AND day 20. Google ‘R logical operators’ to get an introducton to those. Calculate the mean and standard deviation of the chick weights for each diet group on days 10 and 20. The OpenIntro textbook on statistics includes a data set on body dimensions. Load the file using Body &lt;- read.csv(&#39;http://www.openintro.org/stat/data/bdims.csv&#39;) The column sex is coded as a 1 if the individual is male and 0 if female. This is a non-intuitive labeling system. Create a new column sex.MF that uses labels Male and Female. _Hint: the ifelse() command will be very convenient here. The ifelse() command in R functions similarly to the same command in Excel. Feel free to complete all parts of the exercise in a single R pipeline at the end of the problem.*_ The columns wgt and hgt measure weight and height in kilograms and centimeters (respectively). Use these to calculate the Body Mass Index (BMI) for each individual where \\[BMI=\\frac{Weight\\,(kg)}{\\left[Height\\,(m)\\right]^{2}}\\] Double check that your calculated BMI column is correct by examining the summary statistics of the column (e.g. summary(Body)). BMI values should be between 18 to 40 or so. Did you make an error in your calculation? The function cut takes a vector of continuous numerical data and creates a factor based on your give cut-points. # Define a continuous vector to convert to a factor x &lt;- 1:10 # divide range of x into three groups of equal length cut(x, breaks=3) ## [1] (0.991,4] (0.991,4] (0.991,4] (0.991,4] (4,7] (4,7] (4,7] ## [8] (7,10] (7,10] (7,10] ## Levels: (0.991,4] (4,7] (7,10] # divide x into four groups, where I specify all 5 break points cut(x, breaks = c(0, 2.5, 5.0, 7.5, 10)) ## [1] (0,2.5] (0,2.5] (2.5,5] (2.5,5] (2.5,5] (5,7.5] (5,7.5] ## [8] (7.5,10] (7.5,10] (7.5,10] ## Levels: (0,2.5] (2.5,5] (5,7.5] (7.5,10] # (0,2.5] (2.5,5] means 2.5 is included in first group # right=FALSE changes this to make 2.5 included in the second # divide x into 3 groups, but give them a nicer # set of group names cut(x, breaks=3, labels=c(&#39;Low&#39;,&#39;Medium&#39;,&#39;High&#39;)) ## [1] Low Low Low Low Medium Medium Medium High High High ## Levels: Low Medium High Create a new column of in the data frame that divides the age into decades (10-19, 20-29, 30-39, etc). Notice the oldest person in the study is 67. Body &lt;- Body %&gt;% mutate( Age.Grp = cut(age, breaks=c(10,20,30,40,50,60,70), right=FALSE)) Find the average BMI for each Sex by Age.Grp combination. "],
["5-statistical-models.html", "Chapter 5 Statistical Models 5.1 Formula Notation 5.2 Basic Models 5.3 Accessor function 5.4 Exercises", " Chapter 5 Statistical Models library(tidyverse, quietly = TRUE) # loading ggplot2 and dplyr options(tibble.width = Inf) # Print all the columns of a tibble (data.frame) While R is a full programming language, it was first developed by statisticians for statisticians. There are several functions to do common statistical tests but because those functions were developed early in R’s history, there is some inconsistency in how those functions work. There have been some attempts to standardize modeling object interfaces, but there were always be a little weirdness. 5.1 Formula Notation Most statistical modeling functions rely on a formula based interface. The primary purpose is to provide a consistent way to designate which columns in a data frame are the response variable and which are the explanatory variables. In particular the notation is \\[\\underbrace{y}_{\\textrm{LHS response}} \\;\\;\\; \\underbrace{\\sim}_{\\textrm{is a function of}} \\;\\;\\; \\underbrace{x}_{\\textrm{RHS explanatory}}\\] Mathematicians often refer to these terms as the Left Hand Side (LHS) and Right Hand Side (RHS). The LHS is always the response and the RHS contains the explanatory variables. In R, the LHS is usually just a single variable in the data. However the RHS can contain multiple variables and in complicated relationships. Right Hand Side Terms Meaning x1 + x2 Both x1 and x2 are additive explanatory variables. In this format, we are adding only the main effects of the x1 and x2 variables. x1:x2 This is the interaction term between x1 and x2 x1 * x2 Because whenever we add an interaction term to a model, we want to also have the main effects. So this is a short cut for adding the main effect of x1 and x2 and also the interaction term x1:x2. (x1 + x2 + x3)^2 This is the main effects of x1, x2, and x3 and also all of the second order interactions. poly(x, degree=2) This fits the degree 2 polynomial. When fit like this, R produces an orthogonal basis for the polynomial, which is more computationally stable, but won’t be appropiate for interpreting the polynomial coefficients. poly(x, degree=2, raw=TRUE) This fits the degree 2 polynomial using \\(\\beta_0 + \\beta_1 x + \\beta_2 x^2\\) and the polynomial polynomial coefficients are suitable for interpretation. I( x^2 ) Ignore the usual rules for interpreting formulas and do the mathematical calculation. This is not necessary for things like sqrt(x) or log(x) but required if there is a conflict between mathematics and the formula interpretation. 5.2 Basic Models The most common statistical models are generally referred to as linear models and the R function for creating a linear model is lm(). This section will introduce how to fit the model to data in a data frame as well as how to fit very specific t-test models. 5.2.1 t-tests There are several varients on T-tests depending on the question of interest, but they all require a continuous response and a categorical explanatory variable with two levels. If there is an obvious pairing between an observation in the first level of the explanatory variable with an observation in the second level, then it is a paired t-test, otherwise it is a two-sample t-test. 5.2.1.1 Two Sample t-tests First we’ll import data from the Lock5Data package that gives SAT scores and gender from 343 students in an introductory statistics class. We’ll also recode the GenderCode column to be more descriptive than 0 or 1. We’ll do a t-test to examine if there is evidence that males and females have a different SAT score at the college these data were take. data(&#39;GPAGender&#39;, package=&#39;Lock5Data&#39;) GPAGender &lt;- GPAGender %&gt;% mutate( Gender = ifelse(GenderCode == 1, &#39;Male&#39;, &#39;Female&#39;)) ggplot(GPAGender, aes(x=Gender, y=SAT)) + geom_boxplot() We’ll use the function t.test() using the formula interface for specifying the response and the explantory variables. The usual practice should be to save the output of the t.test function call (typically as an object named model or model_1 or similar). Once the model has been fit, all of the important quantities have been calculated and saved and we just need to ask for them. Unfortunately, the base functions in R don’t make this particularly easy, but the tidymodels group of packages for building statistical models allows us to wrap all of the important information into a data frame with one row. In this case we will use the broom::tidy() function to extract all the important model results information. model &lt;- t.test(SAT ~ Gender, data=GPAGender) print(model) # print the summary information to the screen ## ## Welch Two Sample t-test ## ## data: SAT by Gender ## t = -1.4135, df = 323.26, p-value = 0.1585 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -44.382840 7.270083 ## sample estimates: ## mean in group Female mean in group Male ## 1195.702 1214.258 broom::tidy(model) # all that information as a data frame ## # A tibble: 1 x 10 ## estimate estimate1 estimate2 statistic p.value parameter conf.low ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -18.6 1196. 1214. -1.41 0.158 323. -44.4 ## conf.high method alternative ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 7.27 Welch Two Sample t-test two.sided In the t.test function, the default behavior is to perform a test with a two-sided alternative and to calculate a 95% confidence interval. Those can be adjusted using the alternative and conf.level arguments. See the help documentation for t.test() function to see how to adust those. The t.test function can also be used without using a formula by inputing a vector of response variables for the first group and a vector of response variables for the second. The following results in the same model as the formula based interface. male_SATs &lt;- GPAGender %&gt;% filter( Gender == &#39;Male&#39; ) %&gt;% pull(SAT) female_SATs &lt;- GPAGender %&gt;% filter( Gender == &#39;Female&#39; ) %&gt;% pull(SAT) model &lt;- t.test( male_SATs, female_SATs ) broom::tidy(model) # all that information as a data frame ## # A tibble: 1 x 10 ## estimate estimate1 estimate2 statistic p.value parameter conf.low ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 18.6 1214. 1196. 1.41 0.158 323. -7.27 ## conf.high method alternative ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 44.4 Welch Two Sample t-test two.sided 5.2.1.2 Paired t-tests In a paired t-test, there is some mechanism for pairing observations in the two categories. For example, perhaps we observe the maximum weight lifted by a strongman competitor while wearing a weight belt vs not wearing the belt. Then we look at the difference between the weights lifted for each athlete. In the example we’ll look at here, we have the ages of 100 randomly selected married heterosexual couples from St. Lawerence County, NY. For any given man in the study, the obvious woman to compare his age to is his wife’s. So a paired test makes sense to perform. data(&#39;MarriageAges&#39;, package=&#39;Lock5Data&#39;) str(MarriageAges) ## &#39;data.frame&#39;: 105 obs. of 2 variables: ## $ Husband: int 53 38 46 30 31 26 29 48 65 29 ... ## $ Wife : int 50 34 44 36 23 31 25 51 46 26 ... ggplot(MarriageAges, aes(x=Husband, y=Wife)) + geom_point() + labs(x=&quot;Husband&#39;s Age&quot;, y=&quot;Wife&#39;s Age&quot;) To do a paired t-test, all we need to do is calculate the difference in age for each couple and pass that into the t.test() function. MarriageAges &lt;- MarriageAges %&gt;% mutate( Age_Diff = Husband - Wife) t.test( MarriageAges$Age_Diff) ## ## One Sample t-test ## ## data: MarriageAges$Age_Diff ## t = 5.8025, df = 104, p-value = 7.121e-08 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 1.861895 3.795248 ## sample estimates: ## mean of x ## 2.828571 Alternatively, we could pass the vector of Husband ages and the vector of Wife ages into the t.test() function and tell it that the data is paired so that the first husband is paired with the first wife. t.test( MarriageAges$Husband, MarriageAges$Wife, paired=TRUE ) ## ## Paired t-test ## ## data: MarriageAges$Husband and MarriageAges$Wife ## t = 5.8025, df = 104, p-value = 7.121e-08 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 1.861895 3.795248 ## sample estimates: ## mean of the differences ## 2.828571 Either way that the function is called, the broom::tidy() function could convert the printed output into a nice data frame which can then be used in further analysis. 5.2.2 lm objects The general linear model function lm is more widely used than t.test because lm can be made to perform a t-test and the general linear model allows for fitting more than one explanatory variable and those variables could be either categorical or continuous. The general workflow will be to: Visualize the data Call lm() using a formula to specify the model to fit. Save the results of the lm() call to some object (usually I name it model) Use accessor functions to ask for pertainent quantities that have already been calculated. Store prediction values and model confidence intervals for each data point in the original data frame. Graph the original data along with prediction values and model confidence intervals. To explore this topic we’ll use the iris data set to fit a regression model to predict petal length using sepal length. ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() Now suppose we want to fit a regression model to these data and allow each species to have its own slope. We would fit the interaction model model &lt;- lm( Petal.Length ~ Sepal.Length * Species, data = iris ) 5.3 Accessor function Once a model has been fit, we want to obtain a variety of information from the model object. The way that we get most all of this information using base R commands is to call the summary() function which returns a list and then grab whatever we want out of that. Typically for a report, we could just print out all of the summary information and let the reader pick out the information. summary(model) ## ## Call: ## lm(formula = Petal.Length ~ Sepal.Length * Species, data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.68611 -0.13442 -0.00856 0.15966 0.79607 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.8031 0.5310 1.512 0.133 ## Sepal.Length 0.1316 0.1058 1.244 0.216 ## Speciesversicolor -0.6179 0.6837 -0.904 0.368 ## Speciesvirginica -0.1926 0.6578 -0.293 0.770 ## Sepal.Length:Speciesversicolor 0.5548 0.1281 4.330 2.78e-05 *** ## Sepal.Length:Speciesvirginica 0.6184 0.1210 5.111 1.00e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2611 on 144 degrees of freedom ## Multiple R-squared: 0.9789, Adjusted R-squared: 0.9781 ## F-statistic: 1333 on 5 and 144 DF, p-value: &lt; 2.2e-16 But if we want to make a nice graph that includes the model’s \\(R^2\\) value on it, we need to code some way of grabbing particular bits of information from the model fit and wrestling into a format that we can easily manipulate it. Goal Base R command tidymodels version Summary table of Coefficients summary(model)$coef broom::tidy(model) Parameter Confidence Intervals confint(model) broom::tidy(model, conf.int=TRUE) Rsq and Adj-Rsq summary(model)$r.squared broom::glance(model) Model predictions predict(model) broom::augment(model, data) Model residuals resid(model) broom::augment(model, data) Model predictions w/ CI predict(model, interval='confidence') Model predictions w/ PI predict(model, interval='prediction') ANOVA table of model fit anova(model) The package broom has three ways to interact with a model. The tidy command gives a nice table of the model coefficents. The glance function gives information about how well the model fits the data overall. The augment function adds the fitted values, residuals, and other diagnostic information to the original data frame used to generate the model. Unfortunately it does not have a way of adding the lower and upper confidence intervals for the predicted values. Most of the time, I use the base R commands for accessing information from a model and only resort to the broom commands when I need to access very specific quantities. head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # Remove any previous model prediction values that I&#39;ve added, # and then add the model predictions iris &lt;- iris %&gt;% select( -matches(&#39;fit&#39;), -matches(&#39;lwr&#39;), -matches(&#39;upr&#39;) ) %&gt;% cbind( predict(model, newdata=., interval=&#39;confidence&#39;) ) head(iris, n=3) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species fit ## 1 5.1 3.5 1.4 0.2 setosa 1.474373 ## 2 4.9 3.0 1.4 0.2 setosa 1.448047 ## 3 4.7 3.2 1.3 0.2 setosa 1.421721 ## lwr upr ## 1 1.398783 1.549964 ## 2 1.371765 1.524329 ## 3 1.324643 1.518798 Now that the fitted values that define the regression lines and the associated confidence interval band information has been added to my iris data set, we can now plot the raw data and the regression model predictions. ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point() + geom_line( aes(y=fit) ) + geom_ribbon( aes( ymin=lwr, ymax=upr), alpha=.3 ) # alpha is the ribbon transparency Now to add the R-squared value to the graph, we need to add a simple text layer. To do that, I’ll make a data frame that has the information, and then add the x and y coordinates for where it should go. Rsq_data &lt;- broom::glance(model) %&gt;% select(r.squared) %&gt;% mutate(r.squared = round(r.squared, digits=3)) %&gt;% # only 3 digits of precision mutate(r.squared = paste(&#39;Rsq =&#39;, r.squared)) %&gt;% # append some text before mutate( Sepal.Length =7, Petal.Length=2.5) # set the location to place it Rsq_data ## # A tibble: 1 x 3 ## r.squared Sepal.Length Petal.Length ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rsq = 0.979 7 2.5 ggplot(iris, aes(x=Sepal.Length, y=Petal.Length, color=Species)) + geom_point( ) + geom_line( aes(y=fit) ) + geom_ribbon( aes( ymin=lwr, ymax=upr), alpha=.3 ) + # alpha is the ribbon transparency geom_label( data=Rsq_data, aes(label=r.squared, color=NULL) ) 5.4 Exercises Using the trees data frame that comes pre-installed in R, fit the regression model that uses the tree Height to explain the Volume of wood harvested from the tree. Graph the data Fit a lm model using the command model &lt;- lm(Volume ~ Height, data=trees). Print out the table of coefficients estimate names, estimated value, standard error, and upper and lower 95% confidence intervals. Add the model fitted values to the trees data frame along with the regression model confidence intervals. Graph the data and fitted regression line and uncertainty ribbon. Add the R-squared value as an annotation to the graph. The data set phbirths from the faraway package contains information birth weight, gestational length, and smoking status of mother. We’ll fit a quadratic model to predict infant birthweight using the gestational time. Create two scatterplots of gestational length and birthweight, one for each smoking status. Remove all the observations that are premature (less than 36 weeks). Fit the quadratic model model &lt;- lm(grams ~ poly(gestate,2) * smoke, data=phbirths) Add the model fitted values to the phbirths data frame along with the regression model confidence intervals. On your two scatterplots from part (a), add layers for the model fits and ribbon of uncertainty for the model fits. Create a column for the residuals in the phbirths data set using any of the following: phbirths$residuals = resid(model) phbirths &lt;- phbirths %&gt;% mutate( residuals = resid(model) ) phbirths &lt;- broom::augment(model, phbirths) Create a histogram of the residuals. "],
["6-flow-control.html", "Chapter 6 Flow Control 6.1 Logical Expressions 6.2 Decision statements 6.3 Loops 6.4 Exercises", " Chapter 6 Flow Control library(tidyverse, quietly = TRUE) # loading ggplot2 and dplyr Often it is necessary to write scripts that perform different action depending on the data or to automate a task that must be repeated many times. To address these issues we will introduce the if statement and its closely related cousin if else. To address repeated tasks we will define two types of loops, a while loop and a for loop. 6.1 Logical Expressions The most common logical expressions are the numerical expressions &lt;, &lt;=, ==, !=, &gt;=, &gt;. These are the usual logical comparisons from mathematics, with != being the not equal comparison. For any logical value or vector of values, the ! flips the logical values. df &lt;- data.frame(A=1:6, B=5:10) df ## A B ## 1 1 5 ## 2 2 6 ## 3 3 7 ## 4 4 8 ## 5 5 9 ## 6 6 10 df %&gt;% mutate(`A==3?` = A == 3, `A&lt;=3?` = A &lt;= 3, `A!=3?` = A != 3, `Flip Previous` = ! `A!=3?` ) ## A B A==3? A&lt;=3? A!=3? Flip Previous ## 1 1 5 FALSE TRUE TRUE FALSE ## 2 2 6 FALSE TRUE TRUE FALSE ## 3 3 7 TRUE TRUE FALSE TRUE ## 4 4 8 FALSE FALSE TRUE FALSE ## 5 5 9 FALSE FALSE TRUE FALSE ## 6 6 10 FALSE FALSE TRUE FALSE If we have two (or more) vectors of of logical values, we can do two pairwise operations. The “and” operator &amp; will result in a TRUE value if all elements are TRUE. The “or” operator will result in a TRUE value if either the left hand side or right hand side is TRUE. df %&gt;% mutate(C = A==5, D = B==5) %&gt;% mutate( result1_and = C &amp; D, # C and D result2_and = A==5 &amp; B==5, # directly result1_or = C | D, # C or D result2_or = A==5 | B==5) # directly ## A B C D result1_and result2_and result1_or result2_or ## 1 1 5 FALSE TRUE FALSE FALSE TRUE TRUE ## 2 2 6 FALSE FALSE FALSE FALSE FALSE FALSE ## 3 3 7 FALSE FALSE FALSE FALSE FALSE FALSE ## 4 4 8 FALSE FALSE FALSE FALSE FALSE FALSE ## 5 5 9 TRUE FALSE FALSE FALSE TRUE TRUE ## 6 6 10 FALSE FALSE FALSE FALSE FALSE FALSE Next we can summarize a vector of logicals using any(), all(), and which(). These functions do exactly what you would expect them to do. any(6:10 &lt;= 7 ) # Should return TRUE because there are two TRUE result ## [1] TRUE all(6:10 &lt;= 7 ) # Should return FALSE because there is at least one FALSE result ## [1] FALSE which( 6:10 &lt;= 7) # return the indices of the TRUE values ## [1] 1 2 Finally, I often need to figure out if a character string is in some set of values. df &lt;- data.frame( Type = rep(c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;), each=2), Value=rnorm(8) ) df ## Type Value ## 1 A -0.2564185 ## 2 A 1.3580859 ## 3 B -0.4278643 ## 4 B -0.7178690 ## 5 C 0.6326708 ## 6 C 0.1825581 ## 7 D 0.3807772 ## 8 D -0.2404868 df %&gt;% filter( Type %in% c(&#39;A&#39;,&#39;B&#39;) ) # Only rows with Type == &#39;A&#39; or Type ==&#39;B&#39; ## Type Value ## 1 A -0.2564185 ## 2 A 1.3580859 ## 3 B -0.4278643 ## 4 B -0.7178690 6.2 Decision statements 6.2.1 In dplyr wrangling A very common task within a data wrangling pipeline is to create a new column that recodes information in another column. Consider the following data frame that has name, gender, and political party affiliation of six individuals. In this example, we’ved coded male/female as 1/0 and political party as 1,2,3 for democratic, republican, and independent. people &lt;- data.frame( name = c(&#39;Barack&#39;,&#39;Michelle&#39;, &#39;George&#39;, &#39;Laura&#39;, &#39;Bernie&#39;, &#39;Deborah&#39;), gender = c(1,0,1,0,1,0), party = c(1,1,2,2,3,3) ) people ## name gender party ## 1 Barack 1 1 ## 2 Michelle 0 1 ## 3 George 1 2 ## 4 Laura 0 2 ## 5 Bernie 1 3 ## 6 Deborah 0 3 The command ifelse() works quite well within a dplyr::mutate() command and it responds correctly to vectors. The syntax is ifelse( logical.expression, TrueValue, FalseValue ). people &lt;- people %&gt;% mutate( gender2 = ifelse( gender == 0, &#39;Female&#39;, &#39;Male&#39;) ) people ## name gender party gender2 ## 1 Barack 1 1 Male ## 2 Michelle 0 1 Female ## 3 George 1 2 Male ## 4 Laura 0 2 Female ## 5 Bernie 1 3 Male ## 6 Deborah 0 3 Female To do something similar for the case where we have 3 or more categories, we could use the ifelse() command repeatedly to address each category level seperately. However because the ifelse command is limited to just two cases, it would be nice if there was a generalization to multiple categories. The dplyr::case_when function is that generalization. The synax is case_when( logicalExpression1~Value1, logicalExpression2~Value2, ... ). We can have as many LogicalExpression ~ Value pairs as we want. people &lt;- people %&gt;% mutate( party2 = case_when( party == 1 ~ &#39;Democratic&#39;, party == 2 ~ &#39;Republican&#39;, party == 3 ~ &#39;Independent&#39;, TRUE ~ &#39;None Stated&#39; ) ) people ## name gender party gender2 party2 ## 1 Barack 1 1 Male Democratic ## 2 Michelle 0 1 Female Democratic ## 3 George 1 2 Male Republican ## 4 Laura 0 2 Female Republican ## 5 Bernie 1 3 Male Independent ## 6 Deborah 0 3 Female Independent Often the last case is a catch all case where the logical expression will ALWAYS evaluate to TRUE and this is the value for all other input. As another alternative to the problem of recoding factor levels, we could use the command forcats::fct_recode() function. See the Factors chapter in this book for more information about factors. 6.2.2 General if else While programming, I often need to perform expressions that are more complicated than what the ifelse() command can do. The general format of an if or and if else is presented here. # Simplest version if( logical.test ){ expression # can be many lines of code } # Including the optional else if( logical.test ){ expression }else{ expression } where the else part is optional. Suppose that I have a piece of code that generates a random variable from the Binomial distribution with one sample (essentially just flipping a coin) but I’d like to label it head or tails instead of one or zero. # Flip the coin, and we get a 0 or 1 result &lt;- rbinom(n=1, size=1, prob=0.5) result ## [1] 0 # convert the 0/1 to Tail/Head if( result == 0 ){ result &lt;- &#39;Tail&#39; }else{ result &lt;- &#39;Head&#39; } result ## [1] &quot;Tail&quot; What is happening is that the test expression inside the if() is evaluated and if it is true, then the subsequent statement is executed. If the test expression is false, the next statement is skipped. The way the R language is defined, only the first statement after the if statement is executed (or skipped) depending on the test expression. If we want multiple statements to be executed (or skipped), we will wrap those expressions in curly brackets { }. I find it easier to follow the if else logic when I see the curly brackets so I use them even when there is only one expression to be executed. Also notice that the RStudio editor indents the code that might be skipped to try help give you a hint that it will be conditionally evaluated. # Flip the coin, and we get a 0 or 1 result &lt;- rbinom(n=1, size=1, prob=0.5) result ## [1] 1 # convert the 0/1 to Tail/Head if( result == 0 ){ result &lt;- &#39;Tail&#39; print(&quot; in the if statement, got a Tail! &quot;) }else{ result &lt;- &#39;Head&#39; print(&quot;In the else part!&quot;) } ## [1] &quot;In the else part!&quot; result ## [1] &quot;Head&quot; Run this code several times until you get both cases several times. Notice that in the Evironment tab in RStudio, the value of the variable result changes as you execute the code repeatedly. Finally we can nest if else statements together to allow you to write code that has many different execution routes. # randomly grab a number between 0,5 and round it up to 1,2, ..., 5 birth.order &lt;- ceiling( runif(1, 0,5) ) if( birth.order == 1 ){ print(&#39;The first child had more rules to follow&#39;) }else if( birth.order == 2 ){ print(&#39;The second child was ignored&#39;) }else if( birth.order == 3 ){ print(&#39;The third child was spoiled&#39;) }else{ # if birth.order is anything other than 1, 2 or 3 print(&#39;No more unfounded generalizations!&#39;) } ## [1] &quot;The first child had more rules to follow&quot; To provide a more statistically interesting example of when we might use an if else statement, consider the calculation of a p-value in a 1-sample t-test with a two-sided alternative. Recall the calculate was: If the test statistic t is negative, then p-value = \\(2*P\\left(T_{df} \\le t \\right)\\) If the test statistic t is positive, then p-value = \\(2*P\\left(T_{df} \\ge t \\right)\\). # create some fake data n &lt;- 20 # suppose this had a sample size of 20 x &lt;- rnorm(n, mean=2, sd=1) # testing H0: mu = 0 vs Ha: mu =/= 0 t &lt;- ( mean(x) - 0 ) / ( sd(x)/sqrt(n) ) df &lt;- n-1 if( t &lt; 0 ){ p.value &lt;- 2 * pt(t, df) }else{ p.value &lt;- 2 * (1 - pt(t, df)) } # print the resulting p-value p.value ## [1] 7.286816e-11 This sort of logic is necessary for the calculation of p-values and so something similar is found somewhere inside the t.test() function. 6.3 Loops It is often desirable to write code that does the same thing over and over, relieving you of the burden of repetitive tasks. To do this we’ll need a way to tell the computer to repeat some section of code over and over. However we’ll usually want something small to change each time through the loop and some way to tell the computer how many times to run the loop or when to stop repeating. 6.3.1 while Loops The basic form of a while loop is as follows: # while loop with multiple lines to be repeated while( logical.test ){ expression1 # multiple lines of R code expression2 } The computer will first evaluate the test expression. If it is true, it will execute the code once. It will then evaluate the test expression again to see if it is still true, and if so it will execute the code section a third time. The computer will continue with this process until the test expression finally evaluates as false. x &lt;- 2 while( x &lt; 100 ){ print( paste(&quot;In loop and x is now:&quot;, x) ) # print out current value of x x &lt;- 2*x } ## [1] &quot;In loop and x is now: 2&quot; ## [1] &quot;In loop and x is now: 4&quot; ## [1] &quot;In loop and x is now: 8&quot; ## [1] &quot;In loop and x is now: 16&quot; ## [1] &quot;In loop and x is now: 32&quot; ## [1] &quot;In loop and x is now: 64&quot; It is very common to forget to update the variable used in the test expression. In that case the test expression will never be false and the computer will never stop. This unfortunate situation is called an infinite loop. # Example of an infinite loop! Do not Run! x &lt;- 1 while( x &lt; 10 ){ print(x) } 6.3.2 for Loops Often we know ahead of time exactly how many times we should go through the loop. We could use a while loop, but there is also a second construct called a for loop that is quite useful. The format of a for loop is as follows: for( index in vector ){ expression1 expression2 } where the index variable will take on each value in vector in succession and then statement will be evaluated. As always, statement can be multiple statements wrapped in curly brackets {}. for( i in 1:5 ){ print( paste(&quot;In the loop and current value is i =&quot;, i) ) } ## [1] &quot;In the loop and current value is i = 1&quot; ## [1] &quot;In the loop and current value is i = 2&quot; ## [1] &quot;In the loop and current value is i = 3&quot; ## [1] &quot;In the loop and current value is i = 4&quot; ## [1] &quot;In the loop and current value is i = 5&quot; What is happening is that i starts out as the first element of the vector c(1,2,3,4,5), in this case, i starts out as 1. After i is assigned, the statements in the curly brackets are then evaluated. Once we get to the end of those statements, i is reassigned to the next element of the vector c(1,2,3,4,5). This process is repeated until i has been assigned to each element of the given vector. It is somewhat traditional to use i and j and the index variables, but they could be anything. We can use this loop to calculate the first \\(10\\) elements of the Fibonacci sequence. Recall that the Fibonacci sequence is defined by \\(F_{n}=F_{n-1}+F_{n-2}\\) where \\(F_{1}=0\\) and \\(F_{2}=1\\). F &lt;- rep(0, 10) # initialize a vector of zeros F[1] &lt;- 0 # F[1] should be zero F[2] &lt;- 1 # F[2] should be 1 print(F) # Show the value of F before the loop ## [1] 0 1 0 0 0 0 0 0 0 0 for( n in 3:10 ){ F[n] &lt;- F[n-1] + F[n-2] # define based on the prior two values print(F) # show F at each step of the loop } ## [1] 0 1 1 0 0 0 0 0 0 0 ## [1] 0 1 1 2 0 0 0 0 0 0 ## [1] 0 1 1 2 3 0 0 0 0 0 ## [1] 0 1 1 2 3 5 0 0 0 0 ## [1] 0 1 1 2 3 5 8 0 0 0 ## [1] 0 1 1 2 3 5 8 13 0 0 ## [1] 0 1 1 2 3 5 8 13 21 0 ## [1] 0 1 1 2 3 5 8 13 21 34 For a more statistical case where we might want to perform a loop, we can consider the creation of the bootstrap estimate of a sampling distribution. library(dplyr) library(ggplot2) SampDist &lt;- data.frame() # Make a data frame to store the means for( i in 1:1000 ){ SampDist &lt;- trees %&gt;% dplyr::sample_frac(replace=TRUE) %&gt;% dplyr::summarise(xbar=mean(Height)) %&gt;% # 1x1 data frame rbind( SampDist ) } ggplot(SampDist, aes(x=xbar)) + geom_histogram( binwidth=0.25) 6.4 Exercises I’ve created a dataset about presidential candidates for the 2020 US election and it is available on the github website for my STA 141 prez &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/dereksonderegger/444/master/data-raw/Prez_Candidate_Birthdays&#39;) prez ## # A tibble: 11 x 5 ## Candidate Gender Birthday Party AgeOnElection ## &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Pete Buttigieg M 1982-01-19 D 38 ## 2 Andrew Yang M 1975-01-13 D 45 ## 3 Juilan Castro M 1976-09-16 D 44 ## 4 Beto O&#39;Rourke M 1972-09-26 D 48 ## 5 Cory Booker M 1969-04-27 D 51 ## 6 Kamala Harris F 1964-10-20 D 56 ## 7 Amy Klobucher F 1960-05-25 D 60 ## 8 Elizabeth Warren F 1949-06-22 D 71 ## 9 Donald Trump M 1946-06-14 R 74 ## 10 Joe Biden M 1942-11-20 D 77 ## 11 Bernie Sanders M 1941-09-08 D 79 Recode the Gender column to have Male and Female levels. Similarly convert the party variable to be Democratic or Republican. Bernie Sanders was registered as an Independent up until his 2016 presidential run. Change his political party value into ‘Independent’. The \\(Uniform\\left(a,b\\right)\\) distribution is defined on x \\(\\in [a,b]\\) and represents a random variable that takes on any value of between a and b with equal probability. Technically since there are an infinite number of values between a and b, each value has a probability of 0 of being selected and I should say each interval of width \\(d\\) has equal probability. It has the density function \\[f\\left(x\\right)=\\begin{cases} \\frac{1}{b-a} &amp; \\;\\;\\;\\;a\\le x\\le b\\\\ 0 &amp; \\;\\;\\;\\;\\textrm{otherwise} \\end{cases}\\] The R function dunif() evaluates this density function for the above defined values of x, a, and b. Somewhere in that function, there is a chunk of code that evaluates the density for arbitrary values of \\(x\\). Run this code a few times and notice sometimes the result is \\(0\\) and sometimes it is \\(1/(10-4)=0.16666667\\). a &lt;- 4 # The min and max values we will use for this example b &lt;- 10 # Could be anything, but we need to pick something x &lt;- runif(n=1, 0,10) # one random value between 0 and 10 # what is value of f(x) at the randomly selected x value? dunif(x, a, b) ## [1] 0 We will write a sequence of statements that utilizes an if statements to appropriately calculate the density of x assuming that a, b , and x are given to you, but your code won’t know if x is between a and b. That is, your code needs to figure out if it is and give either 1/(b-a) or 0. We could write a set of if/else statements a &lt;- 4 b &lt;- 10 x &lt;- runif(n=1, 0,10) # one random value between 0 and 10 if( x &lt; a ){ result &lt;- ??? }else if( x &lt;= b ){ result &lt;- ??? }else{ result &lt;- ??? } print(paste(&#39;x=&#39;,round(x,digits=3), &#39; result=&#39;, round(result,digits=3))) Replace the ??? with the appropriate value, either 0 or \\(1/\\left(b-a\\right)\\). Run the code repeatedly until you are certain that it is calculating the correct density value. We could perform the logical comparison all in one comparison. Recall that we can use &amp; to mean “and” and | to mean “or”. In the following two code chunks, replace the ??? with either &amp; or | to make the appropriate result. x &lt;- runif(n=1, 0,10) # one random value between 0 and 10 if( (a&lt;=x) ??? (x&lt;=b) ){ result &lt;- 1/(b-a) }else{ result &lt;- 0 } print(paste(&#39;x=&#39;,round(x,digits=3), &#39; result=&#39;, round(result,digits=3))) x &lt;- runif(n=1, 0,10) # one random value between 0 and 10 if( (x&lt;a) ??? (b&lt;x) ){ result &lt;- 0 }else{ result &lt;- 1/(b-a) } print(paste(&#39;x=&#39;,round(x,digits=3), &#39; result=&#39;, round(result,digits=3))) x &lt;- runif(n=1, 0,10) # one random value between 0 and 10 result &lt;- ifelse( a&lt;x &amp; x&lt;b, ???, ??? ) print(paste(&#39;x=&#39;,round(x,digits=3), &#39; result=&#39;, round(result,digits=3))) I often want to repeat some section of code some number of times. For example, I might want to create a bunch plots that compare the density of a t-distribution with specified degrees of freedom to a standard normal distribution. library(ggplot2) df &lt;- 4 N &lt;- 1000 x &lt;- seq(-4, 4, length=N) data &lt;- data.frame( x = c(x,x), y = c(dnorm(x), dt(x, df)), type = c( rep(&#39;Normal&#39;,N), rep(&#39;T&#39;,N) ) ) # make a nice graph myplot &lt;- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) + geom_line() + labs(title = paste(&#39;Std Normal vs t with&#39;, df, &#39;degrees of freedom&#39;)) # actually print the nice graph we made print(myplot) Use a for loop to create similar graphs for degrees of freedom \\(2,3,4,\\dots,29,30\\). In retrospect, perhaps we didn’t need to produce all of those. Rewrite your loop so that we only produce graphs for \\(\\left\\{ 2,3,4,5,10,15,20,25,30\\right\\}\\) degrees of freedom. Hint: you can just modify the vector in the for statement to include the desired degrees of freedom. The for loop usually is the most natural one to use, but occasionally we have occasions where it is too cumbersome and a different sort of loop is appropriate. One example is taking a random sample from a truncated distribution. For example, I might want to take a sample from a normal distribution with mean \\(\\mu\\) and standard deviation \\(\\sigma\\) but for some reason need the answer to be larger than zero. One solution is to just sample from the given normal distribution until I get a value that is bigger than zero. mu &lt;- 0 sigma &lt;- 1 x &lt;- rnorm(1, mean=mu, sd=sigma) print(x) # start the while loop checking if x &lt; 0 # generate a new x value # print the new x value # end the while loop Replace the comments in the above code so that x is a random observation from the truncated normal distribution. "],
["7-factors.html", "Chapter 7 Factors 7.1 Creation and Structure 7.2 Change Labels 7.3 Reorder Levels 7.4 Add or substract Levels 7.5 Exercises", " Chapter 7 Factors library(tidyverse) # loading ggplot2 and dplyr In R we can store categorical information as either strings or as factors. To a casual user, it often doesn’t matter how the information is stored because the modeling and graphing programs happily convert strings into factors whenever necessary. However a deeper understanding of how factors are stored and manipulated allows a user much finer control in the modeling and graphing. We will be interested in the following broad classes of manipulations: Edit Factor Labels Goal forcats function Manually change the label(s) fct_recode(f, new_label = &quot;old_label&quot;) Systematically change all labels fct_relabel(f, function) Reorder Levels Goal forcats function Set order manually fct_relevel(f, 'b', 'a', 'c') Set order based on another vector fct_reorder(f, x) Set order based on which category is most frequent fct_infreq(f) Set order based on when they first appear fct_inorder(f) Reverse factor order fct_rev(f) Rotate order left or right fct_shift(f, steps) Add or Subtract Levels Goal forcats function Manually select categories to collapse into one fct_collapse(f, other = c('a','b')) Add a new factor level fct_expand(f, 'new level') 7.1 Creation and Structure R stores factors as a combination of a vector of category labels and vector of integers representing which category a data value belongs to. For example, lets create a vector of data relating to what soft drinks my siblings prefer. # A vector of character strings. drinks &lt;- c(&#39;DietCoke&#39;, &#39;Coke&#39;, &#39;Coke&#39;, &#39;Sprite&#39;, &#39;Pepsi&#39;) str(drinks) ## chr [1:5] &quot;DietCoke&quot; &quot;Coke&quot; &quot;Coke&quot; &quot;Sprite&quot; &quot;Pepsi&quot; # convert the vector of character strings into a factor vector drinks &lt;- factor(drinks) # Category and Label mapping table data.frame( Category=1:4, labels=levels(drinks)) ## Category labels ## 1 1 Coke ## 2 2 DietCoke ## 3 3 Pepsi ## 4 4 Sprite as.integer(drinks) # Print the category assignments ## [1] 2 1 1 4 3 Notice that the factor has levels “Coke”, “DietCoke”, “Pepsi”, and “Sprite” and that the order of these levels is very important because each observation is saved as an integer which denotes which category the observation belongs to. Because it takes less memory to store a single integer instead of potentially very long character string, factors are much more space efficient than storing the same data as strings. Whenever we do anything that sorts on this factor, the order of the labels in this mapping table determine the sort orders. In order to modify factor labels and levels, we basically need to modify this mapping table. We don’t do this directly, but rather using functions in the forcats package. 7.2 Change Labels To demonstrate the forcats functions, we will consider two datasets. The first consists of a dataset of a small US highschool with observations for each student and we record their year and gender. Students &lt;- expand.grid(Year=&#39;freshman&#39;, Gender=1, rep=1:23) %&gt;% add_row(Year=&#39;freshman&#39;, Gender=0, rep=1:25) %&gt;% add_row(Year=&#39;junior&#39;, Gender=1, rep=1:30) %&gt;% add_row(Year=&#39;junior&#39;, Gender=0, rep=1:32) %&gt;% add_row(Year=&#39;senior&#39;, Gender=1, rep=1:18) %&gt;% add_row(Year=&#39;senior&#39;, Gender=0, rep=1:19) %&gt;% add_row(Year=&#39;sophomore&#39;, Gender=1, rep=1:10) %&gt;% add_row(Year=&#39;sophomore&#39;, Gender=0, rep=1:12) # Variables that are character strings are coerced to factors. # Variables that are numeric are not, and should be explicitly turned to factors. Students &lt;- Students %&gt;% mutate( Gender = factor(Gender) ) Students %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() The first thing we ought to consider is how to change the factor labels for Gender. To do this we’ll use the fct_recode() function. # Change Gender from 0/1 to Female/Male Students &lt;- Students %&gt;% mutate( Gender = fct_recode(Gender, Male=&#39;1&#39;), Gender = fct_recode(Gender, Female=&#39;0&#39;) ) # Change &quot;Freshman&quot; to the gender neutral &quot;First Year&quot; Students &lt;- Students %&gt;% mutate( Year = fct_recode(Year, `first year` = &#39;freshman&#39;)) Students %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() We might want to apply some function to all the labels. Perhaps we want to remove white space or perhaps we want to capitalize all the labels. To apply a function to each of the labels, we use the fct_relabel() function. Students %&gt;% mutate( Year = fct_relabel(Year, stringr::str_to_upper) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() 7.3 Reorder Levels Once the factor labels are set, the next most common thing to do is to rearrange the factors. In our Students example, the order is messed up because it chose to order them in the same order that they appear in the data set. That is not appropriate and in this case, it makes sense to change the order to the chronological order First Year, Sophmore, Junior, Senior. To change the ordering manually, we use the fct::relevel() command. This function takes as many levels as you give it and leaves the unaccounted for levels in the same order as they were. # Seniors first, leave the rest in the order they already were Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() # reset all the levels orders Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophmore&#39;,&#39;first year&#39;) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() ## Warning: Unknown levels in `f`: sophmore # Reverse order of what I already had Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophmore&#39;,&#39;first year&#39;) ) %&gt;% mutate( Year = fct_rev(Year) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() ## Warning: Unknown levels in `f`: sophmore # Sometimes it is useful to rotate using + or - the number of shift steps # positive values move the first to the end. Negative values move the end to the front. Students %&gt;% mutate( Year = fct_relevel(Year, &#39;senior&#39;, &#39;junior&#39;,&#39;sophmore&#39;,&#39;first year&#39;) ) %&gt;% mutate( Year = fct_shift(Year, +1) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() ## Warning: Unknown levels in `f`: sophmore # In the order of the most number of records Students %&gt;% mutate( Year = fct_infreq(Year) ) %&gt;% ggplot( aes(x=Year, fill=Gender)) + geom_bar() + coord_flip() For a second example data set, consider a poll from Monmouth University of New Hampshire Democrats and Independents. Dems &lt;- tribble( ~Candidate, ~Percent, ~AgeOnElection, &#39;Elizabeth Warren&#39;, 27, 71, &#39;Joe Biden&#39;, 25, 77, &#39;Bernie Sanders&#39;, 12, 79, &#39;Pete Buttigieg&#39;, 10, 38, &#39;Kamala Harris&#39;, 3, 56, &#39;Cory Booker&#39;, 2, 51, &#39;Tulsi Gabbard&#39;, 2, 39, &#39;Amy Klobuchar&#39;, 2, 60, &#39;Tom Steyer&#39;, 2, 63, &#39;Andrew Yang&#39;, 2, 45, &#39;Other&#39;, 3, NA, &#39;No one&#39;, 1, NA, &#39;Undecided&#39;, 9, NA) We now want to first arrange the 2020 Democratic candidates for US president by their support. # Reorder Candidates based on the polling percent. The order of Smallest to largest # results in &#39;No one&#39; at the bottom and Elizabeth Warren at the top. Dems %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() We might consider moving the Other and Undecided categories as the first categories before “No one”. Dems %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;Other&#39;, after=0) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;Undecided&#39;, after=0) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() 7.4 Add or substract Levels Often we find that it is necessary to collapse several categories into one. In the Democratic candidate example, we might want to collapse No one, Other and Undecided into a single Other category. # This collapses the factor levels but I still have 3 rows of &quot;other&quot; Dems %&gt;% mutate( Candidate = fct_collapse(Candidate, other = c(&#39;No one&#39;, &#39;Other&#39;, &#39;Undecided&#39;)) ) ## # A tibble: 13 x 3 ## Candidate Percent AgeOnElection ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Elizabeth Warren 27 71 ## 2 Joe Biden 25 77 ## 3 Bernie Sanders 12 79 ## 4 Pete Buttigieg 10 38 ## 5 Kamala Harris 3 56 ## 6 Cory Booker 2 51 ## 7 Tulsi Gabbard 2 39 ## 8 Amy Klobuchar 2 60 ## 9 Tom Steyer 2 63 ## 10 Andrew Yang 2 45 ## 11 other 3 NA ## 12 other 1 NA ## 13 other 9 NA # Collopse the factor, then summarize by adding up the percentages Dems %&gt;% mutate( Candidate = fct_collapse(Candidate, other = c(&#39;No one&#39;, &#39;Other&#39;, &#39;Undecided&#39;)) ) %&gt;% group_by(Candidate) %&gt;% summarize(Percent = sum(Percent)) %&gt;% mutate( Candidate = fct_reorder(Candidate, Percent) ) %&gt;% mutate( Candidate = fct_relevel(Candidate, &#39;other&#39;, after=0) ) %&gt;% ggplot( aes(x=Candidate, y=Percent)) + geom_col() + coord_flip() I need to add the case where we are updating a column of factors and I want to replace a single observations level with another. To do this we do something like this: data &lt;- data.frame( Name=c(&#39;Alice&#39;,&#39;Bruce&#39;,&#39;Charlie&#39;), Grade = c(&#39;A&#39;,&#39;B&#39;,&#39;B&#39;) ) %&gt;% mutate( Grade = factor(Grade) ) %&gt;% mutate( Grade = fct_expand(Grade, &#39;C&#39;)) %&gt;% mutate( Grade = if_else(Name == &#39;Charlie&#39;, factor(&#39;C&#39;, levels=levels(Grade)), Grade ) ) data ## Name Grade ## 1 Alice A ## 2 Bruce B ## 3 Charlie C The key idea is that both the TRUE and the FALSE outputs have to have the same type (which is a factor), and both factors have to have a compatible set of levels. 7.5 Exercises In the package Lock5Data there is a dataset FloridaLakes which contains water sample measurements from 53 lakes in Florida, produce a bar graph shows the Lake and AvgMercury variables and make sure that the lakes are ordered by Average Mercury content. In the package Lock5Data, there is a dataset FootballBrain that has brain measurements for 75 individuals. The Group variable has three levels: Control is somebody that did not play football, FBNoConcuss is a football player with no history of concussions, or FBConcuss which is a football player with concussion history. The variable Cogniton measures their testing composite reaction time score. Make a box-plot graph of the groups vs cognition, but change the Group labels to something that would make sense to a reader. Because there is no data for the Control group, don’t show it on your resulting graph. Also notice that the original data set column name misspells “cognition”. In the package Lock5Data, there is a dataset RestaurantTips which gives tip data from the restaurant First Crush Bistro in Potsdam, NY. Graph the Bill versus the PctTip for each Day of the week where we use Day as the variable to facet_grid or facet_wrap on. Make sure the Day variable has conventional days. Also include information about if the bill was paid via credit card and also make sure the credit card labels are either Credit Card or Cash. "],
["statistical-tables.html", "Statistical Tables Example Distributions mosaic::plotDist() function Base R functions Exercises", " Statistical Tables library(tidyverse) Statistics makes use of a wide variety of distributions and before the days of personal computers, every statistician had books with hundreds and hundreds of pages of tables allowing them to look up particular values. Fortunately in the modern age, we don’t need those books and tables, but we do still need to access those values. To make life easier and consistent for R users, every distribution is accessed in the same manner. Example Distributions Distribution R Stem Parameters Parameter Interpretation Binomial binom size prob Number of Trials Probability of Success (per Trial) Exponential exp rate Mean of the distribution Normal norm mean=0 sd=1 Center of the distribution Standard deviation Uniform unif min=0 max=1 Minimum of the distribution Maximum of the distribution t t df Degrees of freedom F f df1 df2 Numerator Degrees of freedom Denominator Degrees of freedom All of the functions in R to manipulate distributions have a similar naming scheme. They begin with a d,p,q, or r and then the stem of the distribution. For example, I might use a function called pnorm(). The above table lists the most common distributions you might see in an introductory statistics course. mosaic::plotDist() function The mosaic package provides a very useful routine for understanding a distribution. The plotDist() function takes the R name of the distribution along with whatever parameters are necessary for that function and show the distribution. For reference below is a list of common distributions and their R name and a list of necessary parameters. For example, to see the normal distribution with mean \\(\\mu=10\\) and standard deviation \\(\\sigma=2\\), we use mosaic::plotDist(&#39;norm&#39;, mean=10, sd=2) This function works for discrete distributions as well. mosaic::plotDist(&#39;binom&#39;, size=10, prob=.3) Base R functions All the probability distributions available in R are accessed in exactly the same way, using a d-function, p-function, q-function, and r-function. For the rest of this section suppose that \\(X\\) is a random variable from the distribution of interest and \\(x\\) is some possible value that \\(X\\) could take on. Notice that the p-function is the inverse of the q-function. Function Result d-function(x) The height of the probability distribution/density at given \\(x\\) p-function(x) Probability less than or equal to x q-function(q) The q quantile of the distribution. r-function(n) Generate \\(n\\) random observations from the distribution For each distribution in R, there will be this set of functions but we replace the “-function” with the distribution name or a shortened version. norm, exp, binom, t, f are the names for the normal, exponential, binomial, T and F distributions. Furthermore, most distributions have additional parameters that define the distribution and will also be passed as arguments to these functions, although, if a reasonable default value for the parameter exists, there will be a default. d-function The purpose of the d-function is to calculate the height of a probability mass function or a density function (The “d” actually stands for density). Notice that for discrete distributions, this is the probability of observing that particular value, while for continuous distributions, the height doesn’t have a nice physical interpretation. We start with an example of the Binomial distribution. For \\(X\\sim Binomial\\left(n=10,\\pi=.2\\right)\\) suppose we wanted to know \\(P(X=0)\\)? We know the probability mass function is \\[P\\left(X=x\\right)={n \\choose x}\\pi^{x}\\left(1-\\pi\\right)^{n-x}\\] thus \\[P\\left(X=0\\right) = {10 \\choose 0}\\,0.2^{0}\\left(0.8\\right)^{10} = 1\\cdot1\\cdot0.8^{10} \\approx 0.107\\] but that calculation is fairly tedious. To get R to do the same calculation, we just need the height of the probability mass function at \\(0\\). To do this calculation, we need to know the x value we are interested in along with the distribution parameters \\(n\\) and \\(\\pi\\). The first thing we should do is check the help file for the binomial distribution functions to see what parameters are needed and what they are named. ?dbinom The help file shows us the parameters \\(n\\) and \\(\\pi\\) are called size and prob respectively. So to calculate the probability that \\(X=0\\) we would use the following command: dbinom(0, size=10, prob=.2) ## [1] 0.1073742 p-function Often we are interested in the probability of observing some value or anything less (In probability theory, we call this the cumulative density function or CDF). P-values will be calculated this way, so we want a nice easy way to do this. To start our example with the binomial distribution, again let \\(X\\sim Binomial\\left(n=10,\\pi=0.2\\right)\\). Suppose I want to know what the probability of observing a 0, 1, or 2? That is, what is \\(P\\left(X\\le2\\right)\\)? I could just find the probability of each and add them up. dbinom(0, size=10, prob=.2) + # P(X==0) + dbinom(1, size=10, prob=.2) + # P(X==1) + dbinom(2, size=10, prob=.2) # P(X==2) ## [1] 0.6777995 but this would get tedious for binomial distributions with a large number of trials. The shortcut is to use the pbinom() function. pbinom(2, size=10, prob=.2) ## [1] 0.6777995 For discrete distributions, you must be careful because R will give you the probability of less than or equal to 2. If you wanted less than two, you should use dbinom(1,10,.2). The normal distribution works similarly. Suppose for \\(Z\\sim N\\left(0,1\\right)\\) and we wanted to know \\(P\\left(Z\\le-1\\right)\\)? The answer is easily found via pnorm(). pnorm(-1) ## [1] 0.1586553 Notice for continuous random variables, the probability \\(P\\left(Z=-1\\right)=0\\) so we can ignore the issue of “less than” vs “less than or equal to”. Often times we will want to know the probability of greater than some value. That is, we might want to find \\(P\\left(Z \\ge -1\\right)\\). For the normal distribution, there are a number of tricks we could use. Notably \\[P\\left(Z\\ge-1\\right) = P\\left(Z\\le1\\right)=1-P\\left(Z&lt;-1\\right)\\] but sometimes I’m lazy and would like to tell R to give me the area to the right instead of area to the left (which is the default). This can be done by setting the argument \\(lower.tail=FALSE\\). The mosaic package includes an augmented version of the pnorm() function called xpnorm() that calculates the same number but includes some extra information and produces a pretty graph to help us understand what we just calculated and do the tedious “1 minus” calculation to find the upper area. Fortunately this x-variant exists for the Normal, Chi-squared, F, Gamma continuous distributions and the discrete Poisson, Geometric, and Binomial distributions. mosaic::xpnorm(-1) ## ## If X ~ N(0, 1), then ## P(X &lt;= -1) = P(Z &lt;= -1) = 0.1587 ## P(X &gt; -1) = P(Z &gt; -1) = 0.8413 ## ## [1] 0.1586553 q-function In class, we will also find ourselves asking for the quantiles of a distribution. Percentiles are by definition 1/100, 2/100, etc but if I am interested in something that isn’t and even division of 100, we get fancy can call them quantiles. This is a small semantic quibble, but we ought to be precise. That being said, I won’t correct somebody if they call these percentiles. For example, I might want to find the 0.30 quantile, which is the value such that 30% of the distribution is less than it, and 70% is greater. Mathematically, I wish to find the value \\(z\\) such that \\(P(Z&lt;z)=0.30\\). To find this value in the tables in a book, we use the table in reverse. R gives us a handy way to do this with the qnorm() function and the mosaic package provides a nice visualization using the augmented xqnorm(). Below, I specify that I’m using a function in the mosaic package by specifying it via PackageName::FunctionName() format because I haven’t loaded the mosaic package because some of its functions conflict with dplyr. mosaic::xqnorm(0.30) # Give me the value along with a pretty picture ## ## If X ~ N(0, 1), then ## P(X &lt;= -0.5244005) = 0.3 ## P(X &gt; -0.5244005) = 0.7 ## ## [1] -0.5244005 qnorm(.30) # No pretty picture, just the value ## [1] -0.5244005 r-function Finally, I often want to be able to generate random data from a particular distribution. R does this with the r-function. The first argument to this function the number of random variables to draw and any remaining arguments are the parameters of the distribution. rnorm(5, mean=20, sd=2) ## [1] 19.20523 23.26254 18.07327 19.21884 14.74727 rbinom(4, size=10, prob=.8) ## [1] 7 8 9 8 Exercises We will examine how to use the probability mass functions (a.k.a. d-functions) and cumulative probability function (a.k.a. p-function) for the Poisson distribution. Create a graph of the distribution of a Poisson random variable with rate parameter \\(\\lambda=2\\) using the mosaic function plotDist(). Calculate the probability that a Poisson random variable (with rate parameter \\(\\lambda=2\\) ) is exactly equal to 3 using the dpois() function. Be sure that this value matches the graphed distribution in part (a). For a Poisson random variable with rate parameter \\(\\lambda=2\\), calculate the probability it is less than or equal to 3, by summing the four values returned by the Poisson d-function. Perform the same calculation as the previous question but using the cumulative probability function ppois(). We will examine how to use the cumulative probability functions (a.k.a. p-functions) for the normal and exponential distributions. Use the mosaic function plotDist() to produce a graph of the standard normal distribution (that is a normal distribution with mean \\(\\mu=0\\) and standard deviation \\(\\sigma=1\\). For a standard normal, use the pnorm() function or its mosaic augmented version xpnorm() to calculate \\(P\\left(Z&lt;-1\\right)\\) \\(P\\left(Z\\ge1.5\\right)\\) Use the mosaic function plotDist() to produce a graph of an exponential distribution with rate parameter 2. Suppose that \\(Y\\sim Exp\\left(2\\right)\\), as above, use the pexp() function to calculate \\(P\\left(Y \\le 1 \\right)\\). (Unfortunately there isn’t a mosaic augmented xpexp() function.) We next examine how to calculate quantile values for the normal and exponential distributions using R’s q-functions. Find the value of a standard normal distribution (\\(\\mu=0\\), \\(\\sigma=1\\)) such that 5% of the distribution is to the left of the value using the qnorm() function or the mosaic augmented version xqnorm(). Find the value of an exponential distribution with rate 2 such that 60% of the distribution is less than it using the qexp() function. Finally we will look at generating random deviates from a distribution. Generate a single value from a uniform distribution with minimum 0, and maximum 1 using the runif() function. Repeat this step several times and confirm you are getting different values each time. Generate a sample of size 20 from the same uniform distribution and save it as the vector x using the following: x &lt;- runif(20, min=0, max=1) Then produce a histogram of the sample using the function hist() or geom_histogram data.frame(x=x) %&gt;% ggplot(aes(x=x)) + geom_histogram(bins=10) Generate a sample of 2000 from a normal distribution with mean=10 and standard deviation sd=2 using the rnorm() function. Create a histogram the the resulting sample. "],
["rmarkdown-tricks.html", "Rmarkdown Tricks Chunk Options Verbatim &amp; List Environments Mathematical expressions Tables R functions to produce table code.", " Rmarkdown Tricks We have been using RMarkdown files to combine the analysis and discussion into one nice document that contains all the analysis steps so that your research is reproducible. There are many resources on the web about Markdown and the variant that RStudio uses (called RMarkdown), but the easiest reference is to just use the RStudio help tab to access the help. I particular like Help -&gt; Cheatsheets -&gt; RMarkdown Reference Guide because it gives me the standard Markdown information but also a bunch of information about the options I can use to customize the behavior of individual R code chunks. Most of what is presented here isn’t primarily about how to use R, but rather how to work with tools in RMarkdown so that the final product is neat and tidy. While you could print out your RMarkdown file and then clean it up in MS Word, sometimes there is a good to want as nice a starting point as possible. Chunk Options Within an Rmarkdown file, we usually have some R chunk and there are many things we could to tweak how the results are displayed. ` ``{r, echo=FALSE, fig.height=4, fig.width=6} plot(cars) ` `` In this example, I’ve shown what a code chunk might look like when I include different chunk options. In this case I’ve set the figure output height/width in inches and using the echo=FALSE, I’ve specified that the code is to be run and the output to be shown, but we don’t want to see the R-code that produces the output. The comprehensive set of R chunk options is available by the knitr package author Yihui Xie at the knitr website. However, below I’ll list my favorite and most used options. I’ve grabbed these definitions from the Rmarkdown reference guide that the RStudio folks created. Option Default Description echo TRUE If FALSE, knitr will not display the code in the code chunk above it’s results in the final document. results 'markup' If 'hide', knitr will not display the code’s results in the final document. If 'hold', knitr will delay displaying all output pieces until the end of the chunk. If 'asis', knitr will pass through results without reformatting them (useful if results return raw HTML, etc.) error TRUE If FALSE, knitr will not display any error messages generated by the code. message TRUE If FALSE, knitr will not display any messages generated by the code. warning TRUE If FALSE, knitr will not display any warning messages generated by the code. fig.height 7 The height to use in R for plots created by the chunk (in inches). fig.width 7 The height to use in R for plots created by the chunk (in inches). Verbatim &amp; List Environments The way that Markdown starts a verbatim environment is to indent your text with 4 spaces. If you have the following code in your Rmarkdown file: This is text that will be printed verbatim. Then you’ll see the following output: This is text that will be printed verbatim. Notice the Markdown verbatim environment is exactly how your R code chunks get displayed exactly how your wrote them. This is a necessary and handy trick for producing really nice knitted output. Markdown unfortunately ALSO uses four spaces to denote an indented list environment. 1. Problem definition. This problem defintion spans several lines. On the second line, I&#39;ll indent 4 spaces to keep ourselves in the list environment. a) Part number a. This might be very long. To keep ourselves in this list element, we indent 8 spaces. (4 for problem 1, and four for part a). b) Part number b Produces the following output: Problem definition. This problem defintion spans several lines. On the second line, I’ll indent 4 spaces to keep ourselves in the list environment. Part number a. This might be very long. To keep ourselves in this list element, we indent 8 spaces. (4 for problem 1, and four for part a). Part number b But notice what happens if I insert R code chunk between part a) and b) and critically, there is no four spaces that indents the R chunk. 1. Problem definition. a) Part number a ` ``{r} 2+3 ` `` b) Part number b Without the four spaces on the code chunk between parts (a) and (b), we fall out of the nested list environment and begin a verbatim environment. Problem definition. Part number a 2+3 ## [1] 5 b) Part number b So to keep ourselves in the nested list environment, we need to indent the R chunk 4 (or 8) spaces. If we indent it 4 spaces, then the R code and output will be aligned with the a), if we use 8 spaces, it will be indented from the a). 1. Problem definition. a) Part number a ` ``{r} 2+3 ` `` b) Part number b Problem definition. Part number a 2+3 ## [1] 5 Part number b I really like the code indented from the a) header, but then the code editor doesn’t do highlighting because on first blush, it looks like the verbatim environment and RStudio isn’t smart enough to realize that we aren’t in the verbatim. So my solution is to get the R code working and then indent it the 8 spaces. Finally, I often leave a blank line separating my response in part (a) to the problem definition for part (b). Again the RStudio editor isn’t smart enough to realize that we are writing an R chunk. Unfortunately I don’t have a clever hack to keep the editor from thinking that you are in the verbatim environment. Fortunately, when we knit, it will all be fine. Mathematical expressions The primary way to insert a mathematical expression is to use a markup language called LaTeX. This is a very powerful system and it is what most Mathematicians use to write their documents. The downside is that there is a lot to learn. However, you can get most of what you need pretty easily. For RMarkdown to recognize you are writing math using LaTeX, you need to enclose the LaTeX with dollar signs ($). Some examples of common LaTeX patterns are given below: Goal LaTeX Output LaTeX Output power $x^2$ \\(x^2\\) $y^{0.95}$ \\(y^{0.95}\\) Subscript $x_i$ \\(x_i\\) $t_{24}$ \\(t_{24}\\) Greek $\\alpha$ $\\beta$ \\(\\alpha\\) \\(\\beta\\) $\\theta$ $\\Theta$ \\(\\theta\\) \\(\\Theta\\) Bar $\\bar{x}$ \\(\\bar{x}\\) $\\bar{mu}_i$ \\(\\bar{\\mu}_i\\) Hat $\\hat{mu}$ \\(\\hat{\\mu}\\) $\\hat{y}_i$ \\(\\hat{y}_i\\) Star $y^*$ \\(y^*\\) $\\hat{\\mu}^*_i$ \\(\\hat{\\mu}^*_i\\) Centered Dot $\\cdot$ \\(\\cdot\\) $\\bar{y}_{i\\cdot}$ \\(\\bar{y}_{i\\cdot}\\) Sum $\\sum x_i$ \\(\\sum x_i\\) $\\sum_{i=0}^N x_i$ \\(\\sum_{i=0}^N x_i\\) Square Root $\\sqrt{a}$ \\(\\sqrt{a}\\) $\\sqrt{a^2 + b^2}$ \\(\\sqrt{a^2 + b^2}\\) Fractions $\\frac{a}{b}$ \\(\\frac{a}{b}\\) $\\frac{x_i - \\bar{x}{s/\\sqrt{n}$ \\(\\frac{x_i - \\bar{x}}{s/\\sqrt{n}}\\) Within your RMarkdown document, you can include LaTeX code by enclosing it with dollar signs. So you might write $\\alpha=0.05$ in your text, but after it is knitted to a pdf, html, or Word, you’ll see \\(\\alpha=0.05\\). If you want your mathematical equation to be on its own line, all by itself, enclose it with double dollar signs. So $$z_i = \\frac{z_i-\\bar{x}}{\\sigma / \\sqrt{n}}$$ would be displayed as \\[ z_{i}=\\frac{x_{i}-\\bar{X}}{\\sigma/\\sqrt{n}} \\] Unfortunately RMarkdown is a little picky about spaces near the $ and $$ signs and you can’t have any spaces between them and the LaTeX command. For a more information about all the different symbols you can use, google ‘LaTeX math symbols’. Tables For the following descriptions of the simple, grid, and pipe tables, I’ve shamelessly stolen from the Pandoc documentation. [http://pandoc.org/README.html#tables] One way to print a table is to just print in in R and have the table presented in the code chunk. For example, suppose I want to print out the first 4 rows of the trees dataset. data &lt;- trees[1:4, ] data ## Girth Height Volume ## 1 8.3 70 10.3 ## 2 8.6 65 10.3 ## 3 8.8 63 10.2 ## 4 10.5 72 16.4 Usually this is sufficient, but suppose you want something a bit nicer because you are generating tables regularly and you don’t want to have to clean them up by hand. Tables in RMarkdown follow the table conventions from the Markdown class with a few minor exceptions. Markdown provides 4 ways to define a table and RMarkdown supports 3 of those. 7.5.1 Simple Tables Simple tables look like this (Notice I don’t wrap these dollar signs or anything, just a blank line above and below the table): Right Left Center Default ------- ------ ---------- ------- 12 12 hmmm 12 123 123 123 123 1 1 1 1 and would be rendered like this: Right Left Center Default 12 12 hmmm 12 123 123 123 123 1 1 1 1 The headers and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it. If the dashed line is flush with the header text on the right side but extends beyond it on the left, the column is right-aligned. If the dashed line is flush with the header text on the left side but extends beyond it on the right, the column is left-aligned. If the dashed line extends beyond the header text on both sides, the column is centered. If the dashed line is flush with the header text on both sides, the default alignment is used (in most cases, this will be left). The table must end with a blank line, or a line of dashes followed by a blank line. 7.5.2 Grid Tables Grid tables are a little more flexible and each cell can take an arbitrary Markdown block elements (such as lists). +---------------+---------------+--------------------+ | Fruit | Price | Advantages | +===============+===============+====================+ | Bananas | $1.34 | - built-in wrapper | | | | - bright color | +---------------+---------------+--------------------+ | Oranges | $2.10 | - cures scurvy | | | | - tasty | +---------------+---------------+--------------------+ which is rendered as the following: Fruit Price Advantages Bananas $1.34 built-in wrapper bright color Oranges $2.10 cures scurvy tasty Grid table doesn’t support Left/Center/Right alignment. Both Simple tables and Grid tables require you to format the blocks nicely inside the RMarkdown file and that can be a bit annoying if something changes and you have to fix the spacing in the rest of the table. Both Simple and Grid tables don’t require column headers. 7.5.3 Pipe Tables Pipe tables look quite similar to grid tables but Markdown isn’t as picky about the pipes lining up. However, it does require a header row (which you could leave the elements blank in). | Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | which will render as the following: Right Left Default Center 12 12 12 12 123 123 123 123 1 1 1 1 In general I prefer to use the pipe tables because it seems a little less picky about getting everything correct. However it is still pretty annoying to get the table laid out correctly. In all of these tables, you can use the regular RMarkdown formatting tricks for italicizing and bolding. So I could have a table such as the following: | Source | df | Sum of Sq | Mean Sq | F | $Pr(&gt;F_{1,29})$ | |:------------|-----:|--------------:|--------------:|-------:|--------------------:| | Girth | *1* | 7581.8 | 7581.8 | 419.26 | **&lt; 2.2e-16** | | Residual | 29 | 524.3 | 18.1 | | | and have it look like this: Source df Sum of Sq Mean Sq F \\(Pr(&gt;F_{1,29})\\) Girth 1 7581.8 7581.8 419.26 &lt; 2.2e-16 Residual 29 524.3 18.1 The problem with all of this is that I don’t want to create these by hand. Instead I would like functions that take a data frame or matrix and spit out the RMarkdown code for the table. R functions to produce table code. There are a couple of different packages that convert a data frame to simple/grid/pipe table. We will explore a couple of these, starting with the most basic and moving to the more complicated. The general idea is that we’ll produce the appropriate simple/grid/pipe table syntax in R, and when it gets knitted, then RMarkdown will turn our simple/grid/pipe table into something pretty. 7.5.4 knitr::kable The knitr package includes a function that produces simple tables. It doesn’t have much customizability, but it gets the job done. One nice aspect about kable compared to pander is that we don’t need to set any additional chunk options. knitr::kable( data ) Girth Height Volume 8.3 70 10.3 8.6 65 10.3 8.8 63 10.2 10.5 72 16.4 7.5.5 Package pander The package pander seems to be a nice compromise between customization and not having to learn too much. It is relatively powerful in that it will take summary() and anova() output and produce tables for them. By default pander will produce simple tables, but you can ask for Grid or Pipe tables. To use pander results, we need to add the chunk option results='hold' to chunk so that the knitting process doesn’t try to convert the output into pander::pander( data, style=&#39;rmarkdown&#39; ) # style is pipe tables... Girth Height Volume 8.3 70 10.3 8.6 65 10.3 8.8 63 10.2 10.5 72 16.4 The pander package deals with summary and anova tables from a variety of different analyses. So you can simply ask for a nice looking version using the following: model &lt;- lm( Volume ~ Girth, data=trees ) # a simple regression pander::pander( summary(model) ) # my usual summary table Estimate Std. Error t value Pr(&gt;|t|) (Intercept) -36.94 3.365 -10.98 7.621e-12 Girth 5.066 0.2474 20.48 8.644e-19 Fitting linear model: Volume ~ Girth Observations Residual Std. Error \\(R^2\\) Adjusted \\(R^2\\) 31 4.252 0.9353 0.9331 pander::pander( anova( model ) ) # my usual anova table Analysis of Variance Table Df Sum Sq Mean Sq F value Pr(&gt;F) Girth 1 7582 7582 419.4 8.644e-19 Residuals 29 524.3 18.08 NA NA "],
["8-data-structures.html", "Chapter 8 Data Structures 8.1 Vectors 8.2 Matrices 8.3 Data Frames 8.4 Lists 8.5 Exercises", " Chapter 8 Data Structures library(tidyverse) library(rvest) # rvest is not loaded in the tidyverse Metapackage In the introduction section of these notes, we concentrated on data.frames created and manipulated using dplyr. There are other data structures that are used in R and it is useful to learn how to manipulate those other data structures. Furthermore, it is also useful to be able to use base R functionality to do certain manipulations on data.frames. 8.1 Vectors R operates on vectors where we think of a vector as a collection of objects, usually numbers. The first thing we need to be able to do is define an arbitrary collection using the c() function. The “c” stands for collection. # Define the vector of numbers 1, ..., 4 c(1,2,3,4) ## [1] 1 2 3 4 There are many other ways to define vectors. The function rep(x, times) just repeats x a the number times specified by times. rep(2, 5) # repeat 2 five times... 2 2 2 2 2 ## [1] 2 2 2 2 2 rep( c(&#39;A&#39;,&#39;B&#39;), 3 ) # repeat A B three times A B A B A B ## [1] &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; &quot;A&quot; &quot;B&quot; Finally, we can also define a sequence of numbers using the seq(from, to, by, length.out) function which expects the user to supply 3 out of 4 possible arguments. The possible arguments are from, to, by, and length.out. From is the starting point of the sequence, to is the ending point, by is the difference between any two successive elements, and length.out is the total number of elements in the vector. seq(from=1, to=4, by=1) ## [1] 1 2 3 4 seq(1,4) # &#39;by&#39; has a default of 1 ## [1] 1 2 3 4 1:4 # a shortcut for seq(1,4) ## [1] 1 2 3 4 seq(1,5, by=.5) ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 seq(1,5, length.out=11) ## [1] 1.0 1.4 1.8 2.2 2.6 3.0 3.4 3.8 4.2 4.6 5.0 If we have two vectors and we wish to combine them, we can again use the c() function. vec1 &lt;- c(1,2,3) vec2 &lt;- c(4,5,6) vec3 &lt;- c(vec1, vec2) vec3 ## [1] 1 2 3 4 5 6 8.1.1 Accessing Vector Elements Suppose I have defined a vector foo &lt;- c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;F&#39;) and I am interested in accessing whatever is in the first spot of the vector. Or perhaps the 3rd or 5th element. To do that we use the [] notation, where the square bracket represents a subscript. foo[1] # First element in vector foo ## [1] &quot;A&quot; foo[4] # Fourth element in vector foo ## [1] &quot;D&quot; This subscripting notation can get more complicated. For example I might want the 2nd and 3rd element or the 3rd through 5th elements. foo[c(2,3)] # elements 2 and 3 ## [1] &quot;B&quot; &quot;C&quot; foo[ 3:5 ] # elements 3 to 5 ## [1] &quot;C&quot; &quot;D&quot; &quot;F&quot; Finally, I might be interested in getting the entire vector except for a certain element. To do this, R allows us to use the square bracket notation with a negative index number. foo[-1] # everything but the first element ## [1] &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;F&quot; foo[ -1*c(1,2) ] # everything but the first two elements ## [1] &quot;C&quot; &quot;D&quot; &quot;F&quot; Now is a good time to address what is the [1] doing in our output? Because vectors are often very long and might span multiple lines, R is trying to help us by telling us the index number of the left most value. If we have a very long vector, the second line of values will start with the index of the first value on the second line. # The letters vector is a vector of all 26 lower-case letters letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; ## [18] &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; Here the [1] is telling me that a is the first element of the vector and the [18] is telling me that r is the 18th element of the vector. 8.1.2 Scalar Functions Applied to Vectors It is very common to want to perform some operation on all the elements of a vector simultaneously. For example, I might want take the absolute value of every element. Functions that are inherently defined on single values will almost always apply the function to each element of the vector if given a vector. x &lt;- -5:5 x ## [1] -5 -4 -3 -2 -1 0 1 2 3 4 5 abs(x) ## [1] 5 4 3 2 1 0 1 2 3 4 5 exp(x) ## [1] 6.737947e-03 1.831564e-02 4.978707e-02 1.353353e-01 3.678794e-01 ## [6] 1.000000e+00 2.718282e+00 7.389056e+00 2.008554e+01 5.459815e+01 ## [11] 1.484132e+02 8.1.3 Vector Algebra All algebra done with vectors will be done element-wise by default.For matrix and vector multiplication as usually defined by mathematicians, use %*% instead of *. So two vectors added together result in their individual elements being summed. x &lt;- 1:4 y &lt;- 5:8 x + y ## [1] 6 8 10 12 x * y ## [1] 5 12 21 32 R does another trick when doing vector algebra. If the lengths of the two vectors don’t match, R will recycle the elements of the shorter vector to come up with vector the same length as the longer. This is potentially confusing, but is most often used when adding a long vector to a vector of length 1. x &lt;- 1:4 x + 1 ## [1] 2 3 4 5 8.1.4 Commonly Used Vector Functions Function Result min(x) Minimum value in vector x max(x) Maximum value in vector x length(x) Number of elements in vector x sum(x) Sum of all the elements in vector x mean(x) Mean of the elements in vector x median(x) Median of the elements in vector x var(x) Variance of the elements in vector x sd(x) Standard deviation of the elements in x Putting this all together, we can easily perform tedious calculations with ease. To demonstrate how scalars, vectors, and functions of them work together, we will calculate the variance of 5 numbers. Recall that variance is defined as \\[ Var\\left(x\\right)=\\frac{\\sum_{i=1}^{n}\\left(x_{i}-\\bar{x}\\right)^{2}}{n-1} \\] x &lt;- c(2,4,6,8,10) xbar &lt;- mean(x) # calculate the mean xbar ## [1] 6 x - xbar # calculate the errors ## [1] -4 -2 0 2 4 (x-xbar)^2 ## [1] 16 4 0 4 16 sum( (x-xbar)^2 ) ## [1] 40 n &lt;- length(x) # how many data points do we have n ## [1] 5 sum((x-xbar)^2)/(n-1) # calculating the variance by hand ## [1] 10 var(x) # Same thing using the built-in variance function ## [1] 10 8.2 Matrices We often want to store numerical data in a square or rectangular format and mathematicians will call these “matrices”. These will have two dimensions, rows and columns. To create a matrix in R we can create it directly using the matrix() command which requires the data to fill the matrix with, and optionally, some information about the number of rows and columns: W &lt;- matrix( c(1,2,3,4,5,6), nrow=2, ncol=3 ) W ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 Notice that because we only gave it six values, the information the number of columns is redundant and could be left off and R would figure out how many columns are needed. Next notice that the order that R chose to fill in the matrix was to fill in the first column then the second, and then the third. If we wanted to fill the matrix in order of the rows first, then we’d use the optional byrow=TRUE argument. W &lt;- matrix( c(1,2,3,4,5,6), nrow=2, byrow=TRUE ) W ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 The alternative to the matrix() command is we could create two columns as individual vectors and just push them together. Or we could have made three rows and lump them by rows instead. To do this we’ll use a group of functions that bind vectors together. To join two column vectors together, we’ll use cbind and to bind rows together we’ll use the rbind function a &lt;- c(1,2,3) b &lt;- c(4,5,6) cbind(a,b) # Column Bind: a,b are columns in resultant matrix ## a b ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 rbind(a,b) # Row Bind: a,b are rows in resultant matrix ## [,1] [,2] [,3] ## a 1 2 3 ## b 4 5 6 Notice that doing this has provided R with some names for the individual rows and columns. I can change these using the commands colnames() and rownames(). M &lt;- matrix(1:6, nrow=3, ncol=2, byrow=TRUE) colnames(M) &lt;- c(&#39;Column1&#39;, &#39;Column2&#39;) # set column labels rownames(M) &lt;- c(&#39;Row1&#39;, &#39;Row2&#39;,&#39;Row3&#39;) # set row labels M ## Column1 Column2 ## Row1 1 2 ## Row2 3 4 ## Row3 5 6 This is actually a pretty peculiar way of setting the attributes of the object M because it looks like we are evaluating a function and assigning some value to the function output. Yes it is weird, but R was developed in the 70s and it seemed like a good idea at the time. Accessing a particular element of a matrix is done in a similar manner as with vectors, using the [ ] notation, but this time we must specify which row and which column. Notice that this scheme always is [row, col]. M1 &lt;- matrix(1:6, nrow=3, ncol=2) M1 ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 M1[1,2] # Grab row 1, column 2 value ## [1] 4 M1[1, 1:2] # Grab row 1, and columns 1 and 2. ## [1] 1 4 I might want to grab a single row or a single column out of a matrix, which is sometimes referred to as taking a slice of the matrix. I could figure out how long that vector is, but often I’m too lazy. Instead I can just specify the specify the particular row or column I want. M1 ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 M1[1, ] # grab the 1st row ## [1] 1 4 M1[ ,2] # grab second column (the spaces are optional...) ## [1] 4 5 6 8.3 Data Frames Matrices are great for mathematical operations, but I also want to be able to store data that is numerical. For example I might want to store a categorical variable such as manufacturer brand. To generalize our concept of a matrix to include these types of data, we will create a structure called a data.frame. These are very much like a simple Excel spreadsheet where each column represents a different trait or measurement type and each row will represent an individual. Perhaps the easiest way to create a data frame is to just type the columns of data data &lt;- data.frame( Name = c(&#39;Bob&#39;,&#39;Jeff&#39;,&#39;Mary&#39;), Score = c(90, 75, 92) ) # Show the data.frame data ## Name Score ## 1 Bob 90 ## 2 Jeff 75 ## 3 Mary 92 Because a data frame feels like a matrix, R also allows matrix notation for accessing particular values. Format Result [a,b] Element in row a and column b [a,] All of row a [,b] All of column b Because the columns have meaning and we have given them column names, it is desirable to want to access an element by the name of the column as opposed to the column number.In large Excel spreadsheets I often get annoyed trying to remember which column something was in and muttering “Was total biomass in column P or Q?” A system where I could just name the column Total.Biomass and be done with it is much nicer to work with and I make fewer dumb mistakes. data$Name # The $-sign means to reference a column by its label ## [1] Bob Jeff Mary ## Levels: Bob Jeff Mary data$Name[2] # Notice that data$Name results in a vector, which I can manipulate ## [1] Jeff ## Levels: Bob Jeff Mary I can mix the [ ] notation with the column names. The following is also acceptable: data[, &#39;Name&#39;] # Grab the column labeled &#39;Name&#39; ## [1] Bob Jeff Mary ## Levels: Bob Jeff Mary The next thing we might wish to do is add a new column to a preexisting data frame. There are two ways to do this. First, we could use the cbind() function to bind two data frames together. Second we could reference a new column name and assign values to it. Second.score &lt;- data.frame(Score2=c(41,42,43)) # another data.frame data &lt;- cbind( data, Second.score ) # squish them together data ## Name Score Score2 ## 1 Bob 90 41 ## 2 Jeff 75 42 ## 3 Mary 92 43 # if you assign a value to a column that doesn&#39;t exist, R will create it data$Score3 &lt;- c(61,62,63) # the Score3 column will created data ## Name Score Score2 Score3 ## 1 Bob 90 41 61 ## 2 Jeff 75 42 62 ## 3 Mary 92 43 63 Data frames are very commonly used and many commonly used functions will take a data= argument and all other arguments are assumed to be in the given data frame. Unfortunately this is not universally supported by all functions and you must look at the help file for the function you are interested in. Data frames are also very restrictive in that the shape of the data must be rectangular. If I try to create a new column that doesn’t have enough rows, R will complain. data$Score4 &lt;- c(1,2) ## Error in `$&lt;-.data.frame`(`*tmp*`, Score4, value = c(1, 2)): replacement has 2 rows, data has 3 8.4 Lists Data frames are quite useful for storing data but sometimes we’ll need to store a bunch of different pieces of information and it won’t fit neatly as a data frame. The most general form of a data structure is called a list. This can be thought of as a vector of objects where there is no requirement for each element to be the same type of object. Consider that I might need to store information about person. For example, suppose that I want make an object that holds information about my immediate family. This object should have my spouse’s name (just one name) as well as my siblings. But because I have many siblings, I want the siblings to be a vector of names. Likewise I might also include my pets, but we don’t want any requirement that the number of pets is the same as the number of siblings (or spouses!). wife &lt;- &#39;Aubrey&#39; sibs &lt;- c(&#39;Tina&#39;,&#39;Caroline&#39;,&#39;Brandon&#39;,&#39;John&#39;) pets &lt;- c(&#39;Beau&#39;,&#39;Tess&#39;,&#39;Kaylee&#39;) Derek &lt;- list(Spouse=wife, Siblings=sibs, Pets=pets) # Create the list str(Derek) # show the structure of object ## List of 3 ## $ Spouse : chr &quot;Aubrey&quot; ## $ Siblings: chr [1:4] &quot;Tina&quot; &quot;Caroline&quot; &quot;Brandon&quot; &quot;John&quot; ## $ Pets : chr [1:3] &quot;Beau&quot; &quot;Tess&quot; &quot;Kaylee&quot; Notice that the object Derek is a list of three elements. The first is the single string containing my wife’s name. The next is a vector of my siblings’ names and it is a vector of length four. Finally the vector of pets’ names is only of length three. To access any element of this list we can use an indexing scheme similar to matrices and vectors. The only difference is that we’ll use two square brackets instead of one. Derek[[ 1 ]] # First element of the list is Spouse! ## [1] &quot;Aubrey&quot; Derek[[ 3 ]] # Third element of the list is the vector of pets ## [1] &quot;Beau&quot; &quot;Tess&quot; &quot;Kaylee&quot; There is a second way I can access elements. For data frames it was convenient to use the notation DataFrame$ColumnName and we will use the same convention for lists. Actually a data frame is just a list with the requirement that each list element is a vector and all vectors are of the same length. To access my pets names we can use the following notation: Derek$Pets # Using the &#39;$&#39; notation ## [1] &quot;Beau&quot; &quot;Tess&quot; &quot;Kaylee&quot; Derek[[ &#39;Pets&#39; ]] # Using the &#39;[[ ]]&#39; notation ## [1] &quot;Beau&quot; &quot;Tess&quot; &quot;Kaylee&quot; To add something new to the list object, we can just make an assignment in a similar fashion as we did for data.frame and just assign a value to a slot that doesn’t (yet!) exist. Derek$Spawn &lt;- c(&#39;Elise&#39;, &#39;Casey&#39;) We can also add extremely complicated items to my list. Here we’ll add a data.frame as another list element. # Recall that we previous had defined a data.frame called &quot;data&quot; Derek$RandomDataFrame &lt;- data # Assign it to be a list element str(Derek) ## List of 5 ## $ Spouse : chr &quot;Aubrey&quot; ## $ Siblings : chr [1:4] &quot;Tina&quot; &quot;Caroline&quot; &quot;Brandon&quot; &quot;John&quot; ## $ Pets : chr [1:3] &quot;Beau&quot; &quot;Tess&quot; &quot;Kaylee&quot; ## $ Spawn : chr [1:2] &quot;Elise&quot; &quot;Casey&quot; ## $ RandomDataFrame:&#39;data.frame&#39;: 3 obs. of 4 variables: ## ..$ Name : Factor w/ 3 levels &quot;Bob&quot;,&quot;Jeff&quot;,&quot;Mary&quot;: 1 2 3 ## ..$ Score : num [1:3] 90 75 92 ## ..$ Score2: num [1:3] 41 42 43 ## ..$ Score3: num [1:3] 61 62 63 Now we see that the list Derek has five elements and some of those elements are pretty complicated. In fact, I could happily have lists of lists and have a very complicated nesting structure. The place that most users will run into lists is that the output of many statistical procedures will return the results in a list object. When a user asks R to perform a regression, the output returned is a list object, and we’ll need to grab particular information from that object afterwards. For example, the output from a t-test in R is a list: x &lt;- c(5.1, 4.9, 5.6, 4.2, 4.8, 4.5, 5.3, 5.2) # some toy data results &lt;- t.test(x, alternative=&#39;less&#39;, mu=5) # do a t-test str(results) # examine the resulting object ## List of 9 ## $ statistic : Named num -0.314 ## ..- attr(*, &quot;names&quot;)= chr &quot;t&quot; ## $ parameter : Named num 7 ## ..- attr(*, &quot;names&quot;)= chr &quot;df&quot; ## $ p.value : num 0.381 ## $ conf.int : num [1:2] -Inf 5.25 ## ..- attr(*, &quot;conf.level&quot;)= num 0.95 ## $ estimate : Named num 4.95 ## ..- attr(*, &quot;names&quot;)= chr &quot;mean of x&quot; ## $ null.value : Named num 5 ## ..- attr(*, &quot;names&quot;)= chr &quot;mean&quot; ## $ alternative: chr &quot;less&quot; ## $ method : chr &quot;One Sample t-test&quot; ## $ data.name : chr &quot;x&quot; ## - attr(*, &quot;class&quot;)= chr &quot;htest&quot; We see that result is actually a list with 9 elements in it. To access the p-value we could use: results$p.value ## [1] 0.3813385 If I ask R to print the object results, it will hide the structure from you and print it in a “pretty” fashion because there is a print function defined specifically for objects created by the t.test() function. results ## ## One Sample t-test ## ## data: x ## t = -0.31399, df = 7, p-value = 0.3813 ## alternative hypothesis: true mean is less than 5 ## 95 percent confidence interval: ## -Inf 5.251691 ## sample estimates: ## mean of x ## 4.95 8.5 Exercises Create a vector of three elements (2,4,6) and name that vector vec_a. Create a second vector, vec_b, that contains (8,10,12). Add these two vectors together and name the result vec_c. Create a vector, named vec_d, that contains only two elements (14,20). Add this vector to vec_a. What is the result and what do you think R did (look up the recycling rule using Google)? What is the warning message that R gives you? Next add 5 to the vector vec_a. What is the result and what did R do? Why doesn’t in give you a warning message similar to what you saw in the previous problem? Generate the vector of integers \\(\\left\\{ 1,2,\\dots5\\right\\}\\) in two different ways. First using the seq() function Using the a:b shortcut. Generate the vector of even numbers \\(\\left\\{ 2,4,6,\\dots,20\\right\\}\\) Using the seq() function and Using the a:b shortcut and some subsequent algebra. Hint: Generate the vector 1-10 and then multiple it by 2. Generate a vector of 21 elements that are evenly placed between 0 and 1 using the seq() command and name this vector x. Generate the vector \\(\\left\\{ 2,4,8,2,4,8,2,4,8\\right\\}\\) using the rep() command to replicate the vector c(2,4,8). Generate the vector \\(\\left\\{ 2,2,2,2,4,4,4,4,8,8,8,8\\right\\}\\) using the rep() command. You might need to check the help file for rep() to see all of the options that rep() will accept. In particular, look at the optional argument each=. The vector letters is a built-in vector to R and contains the lower case English alphabet. Extract the 9th element of the letters vector. Extract the sub-vector that contains the 9th, 11th, and 19th elements. Extract the sub-vector that contains everything except the last two elements. In this problem, we will work with the matrix \\[ \\left[\\begin{array}{ccccc} 2 &amp; 4 &amp; 6 &amp; 8 &amp; 10\\\\ 12 &amp; 14 &amp; 16 &amp; 18 &amp; 20\\\\ 22 &amp; 24 &amp; 26 &amp; 28 &amp; 30 \\end{array}\\right]\\] Create the matrix in two ways and save the resulting matrix as M. Create the matrix using some combination of the seq() and matrix() commands. Create the same matrix by some combination of multiple seq() commands and either the rbind() or cbind() command. Extract the second row out of M. Extract the element in the third row and second column of M. Create and manipulate a data frame. Create a data.frame named my.trees that has the following columns: Girth = {8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11.0} Height= {70, 65, 63, 72, 81, 83, 66} Volume= {10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6} Without using dplyr functions, extract the third observation (i.e. the third row) Without using dplyr functions, extract the Girth column referring to it by name (don’t use whatever order you placed the columns in). Without using dplyr functions, print out a data frame of all the observations except for the fourth observation. (i.e. Remove the fourth observation/row.) Without using dplyr functions, use the which() command to create a vector of row indices that have a girth greater than 10. Call that vector index. Without using dplyr functions, use the index vector to create a small data set with just the large girth trees. Without using dplyr functions, use the index vector to create a small data set with just the small girth trees. Creation of data frames is usually done by binding together vectors while using seq and rep commands. However often we need to create a data frame that contains all possible combinations of several variables. The function expand.grid() addresses this need. expand.grid( F1=c(&#39;A&#39;,&#39;B&#39;), F2=c(&#39;x&#39;,&#39;w&#39;,&#39;z&#39;), replicate=1:2 ) A fun example of using this function is making several graphs of the standard normal distribution versus the t-distribution. Use the expand.grid function to create a data.frame with all combinations of x=seq(-4,4,by=.01), dist=c('Normal','t'), and df=c(2,3,4,5,10,15,20,30). Use the dplyr::mutate command with the if_else command to generate the function heights y using either dt(x,df) or dnorm(x) depending on what is in the distribution column. expand.grid( x=seq(-4,4,by=.01), dist=c(&#39;Normal&#39;,&#39;t&#39;), df=c(2,3,4,5,10,15,20,30) ) %&gt;% mutate( y = if_else(dist == &#39;t&#39;, dt(x, df), dnorm(x) ) ) %&gt;% ggplot( aes( x=x, y=y, color=dist) ) + geom_line() + facet_wrap(~df) Create and manipulate a list. Create a list named my.test with elements x = c(4,5,6,7,8,9,10) y = c(34,35,41,40,45,47,51) slope = 2.82 p.value = 0.000131 Extract the second element in the list. Extract the element named p.value from the list. The function lm() creates a linear model, which is a general class of model that includes both regression and ANOVA. We will call this on a data frame and examine the results. For this problem, there isn’t much to figure out, but rather the goal is to recognize the data structures being used in common analysis functions. There are many data sets that are included with R and its packages. One of which is the trees data which is a data set of \\(n=31\\) cherry trees. Load this dataset into your current workspace using the command: data(trees) # load trees data.frame Examine the data frame using the str() command. Look at the help file for the data using the command help(trees) or ?trees. Perform a regression relating the volume of lumber produced to the girth and height of the tree using the following command m &lt;- lm( Volume ~ Girth + Height, data=trees) Use the str() command to inspect m. Extract the model coefficients from this list. "],
["9-importing-data.html", "Chapter 9 Importing Data 9.1 Working directory 9.2 Comma Separated Data 9.3 MS Excel 9.4 Exercises", " Chapter 9 Importing Data Reading data from external sources is necessary. It is most common for data to be in a data-frame like storage, such as a MS Excel workbook, so we will concentrate on reading data into a data.frame. In the typical way data is organized, we think of each column of data representing some trait or variable that we might be interested in. In general, we might wish to investigate the relationship between variables. In contrast, the rows of our data represent a single object on which the column traits are measured. For example, in a grade book for recording students scores throughout the semester, their is one row for every student and columns for each assignment. A greenhouse experiment dataset will have a row for every plant and columns for treatment type and biomass. 9.1 Working directory One concept that will be important is to recognize that every time you start up RStudio, it picks an appropriate working directory. This is the directory where it will first look for script files or data files. By default when you double click on an R script or Rmarkdown file to launch RStudio, it will set the working directory to be the directory that the file was in. Similarly, when you knit an Rmarkdown file, the working directory will be set to the directory where the Rmarkdown file is. For both of these reasons, I always program my scripts assuming that paths to any data files will be relative to where where my Rmarkdown file is. To set the working directory explicitly, you can use the GUI tools Session -&gt; Set Working Directory.... The functions that we will use in this lab all accept a character string that denotes the location of the file. This location could be a web address, it could be an absolute path on your computer, or it could be a path relative to the location of your Rmarkdown file. 'MyFile.csv' Look in the working directory for MyFile.csv. 'MyFolder/Myfile.csv' In the working directory, there is a subdirectory called MyFolder and inside that folder there is a filed called MyFile.csv. 9.2 Comma Separated Data To consider how data might be stored, we first consider the simplest file format… the comma separated values file. In this file time, each of the “cells” of data are separated by a comma. For example, the data file storing scores for three students might be as follows: Able, Dave, 98, 92, 94 Bowles, Jason, 85, 89, 91 Carr, Jasmine, 81, 96, 97 Typically when you open up such a file on a computer with Microsoft Excel installed, Excel will open up the file assuming it is a spreadsheet and put each element in its own cell. However, you can also open the file using a more primitive program (say Notepad in Windows, TextEdit on a Mac) you’ll see the raw form of the data. Having just the raw data without any sort of column header is problematic (which of the three exams was the final??). Ideally we would have column headers that store the name of the column. LastName, FirstName, Exam1, Exam2, FinalExam Able, Dave, 98, 92, 94 Bowles, Jason, 85, 89, 91 Carr, Jasmine, 81, 96, 97 To see another example, open the “Body Fat” dataset from the Lock\\(^{5}\\) introductory text book at the website [http://www.lock5stat.com/datasets/BodyFat.csv]. The first few rows of the file are as follows: Bodyfat,Age,Weight,Height,Neck,Chest,Abdomen,Ankle,Biceps,Wrist 32.3,41,247.25,73.5,42.1,117,115.6,26.3,37.3,19.7 22.5,31,177.25,71.5,36.2,101.1,92.4,24.6,30.1,18.2 22,42,156.25,69,35.5,97.8,86,24,31.2,17.4 12.3,23,154.25,67.75,36.2,93.1,85.2,21.9,32,17.1 20.5,46,177,70,37.2,99.7,95.6,22.5,29.1,17.7 To make R read in the data arranged in this format, we need to tell R three things: Where does the data live? Often this will be the name of a file on your computer, but the file could just as easily live on the internet (provided your computer has internet access). Is the first row data or is it the column names? What character separates the data? Some programs store data using tabs to distinguish between elements, some others use white space. R’s mechanism for reading in data is flexible enough to allow you to specify what the separator is. The primary function that we’ll use to read data from a file and into R is the function read.table(). This function has many optional arguments but the most commonly used ones are outlined in the table below. Argument Default What it does file A character string denoting the file location header FALSE Is the first line column headers? sep &quot; &quot; What character separates columns. &quot; &quot; == any whitespace skip 0 The number of lines to skip before reading data. This is useful when there are lines of text that describe the data or aren’t actual data na.strings ‘NA’ What values represent missing data. Can have multiple. E.g. c('NA', -9999) quote &quot; and ’ For character strings, what characters represent quotes. To read in the “Body Fat” dataset we could run the R command: BodyFat &lt;- read.table( file = &#39;http://www.lock5stat.com/datasets/BodyFat.csv&#39;, # where the data lives header = TRUE, # first line is column names sep = &#39;,&#39; ) # Data is sparated by commas str(BodyFat) ## &#39;data.frame&#39;: 100 obs. of 10 variables: ## $ Bodyfat: num 32.3 22.5 22 12.3 20.5 22.6 28.7 21.3 29.9 21.3 ... ## $ Age : int 41 31 42 23 46 54 43 42 37 41 ... ## $ Weight : num 247 177 156 154 177 ... ## $ Height : num 73.5 71.5 69 67.8 70 ... ## $ Neck : num 42.1 36.2 35.5 36.2 37.2 39.9 37.9 35.3 42.1 39.8 ... ## $ Chest : num 117 101.1 97.8 93.1 99.7 ... ## $ Abdomen: num 115.6 92.4 86 85.2 95.6 ... ## $ Ankle : num 26.3 24.6 24 21.9 22.5 22 23.7 21.9 24.8 25.2 ... ## $ Biceps : num 37.3 30.1 31.2 32 29.1 35.9 32.1 30.7 34.4 37.5 ... ## $ Wrist : num 19.7 18.2 17.4 17.1 17.7 18.9 18.7 17.4 18.4 18.7 ... Looking at the help file for read.table() we see that there are variants such as read.csv() that sets the default arguments to header and sep more intelligently. Also, there are many options to customize how R responds to different input. 9.3 MS Excel Commonly our data is stored as a MS Excel file. There are two approaches you could use to import the data into R. From within Excel, export the worksheet that contains your data as a comma separated values (.csv) file and proceed using the tools in the previous section. Use functions within R that automatically convert the worksheet into a .csv file and read it in. One package that works nicely for this is the readxl package. I generally prefer using option 2 because all of my collaborators can’t live without Excel and I’ve resigned myself to this. However if you have complicated formulas in your Excel file, it is often times safer to export it as a .csv file to guarantee the data imported into R is correct. Furthermore, other spreadsheet applications (such as Google sheets) requires you to export the data as a .csv file so it is good to know both paths. Because R can only import a complete worksheet, the desired data worksheet must be free of notes to yourself about how the data was collected, preliminary graphics, or other stuff that isn’t the data. I find it very helpful to have a worksheet in which I describe the sampling procedure and describe what each column means (and give the units!), then a second worksheet where the actual data is, and finally a third worksheet where my “Excel Only” collaborators have created whatever plots and summary statistics they need. The simplest package for importing Excel files seems to be the package readxl. Another package that does this is the XLConnect which does the Excel -&gt; .csv conversion using Java. Another package the works well is the xlsx package, but it also requires Java to be installed. The nice thing about these two packages is that they also allow you to write Excel files as well. The RODBC package allows R to connect to various databases and it is possible to make it consider an Excel file as an extremely crude database. The readxl package provides a function read_exel() that allows us to specify which sheet within the Excel file to read and what character specifies missing data (it assumes a blank cell is missing data if you don’t specifying anything). One annoying change between read.table() and read_excel() is that the argument for specifying where the file is is different (path= instead of file=). Another difference between the two is that read_excel() does not yet have the capability of handling a path that is a web address. From GitHub, download the files Example_1.xls, Example_2.xls, Example_3.xls and Example_4.xls from the directory [https://github.com/dereksonderegger/570L/tree/master/data-raw]. Place these files in the same directory that you store your course work or make a subdirectory data to store the files in. Make sure that the working directory that RStudio is using is that same directory (Session -&gt; Set Working Directory). # load the library that has the read.xls function. library(readxl) # Where does the data live relative to my current working location? # # In my directory where this Rmarkdown file lives, I have made a subdirectory # named &#39;data-raw&#39; to store all the data files. So the path to my data # file will be &#39;data-raw/Example_1.xls&#39;. # If you stored the files in the same directory as your RMarkdown script, you # don&#39;t have to add any additional information and you can just tell it the # file name &#39;Example_1.xls&#39; # Alternatively I could give the full path to this file starting at the root # directory which, for me, is &#39;~/GitHub/STA570L_Book/data-raw/Example_1.xls&#39; # but for Windows users it might be &#39;Z:/570L/Lab7/Example_1.xls&#39;. This looks # odd because Windows usually uses a backslash to represent the directory # structure, but a backslash has special meaning in R and so it wants # to separate directories via forwardslashes. # read the first worksheet of the Example_1 file data.1 &lt;- read_excel( &#39;data-raw/Example_1.xls&#39; ) # relative to this Rmarkdown file data.1 &lt;- read_excel(&#39;~/GitHub/570L/data-raw/Example_1.xls&#39;) # absolute path # read the second worksheet where the second worksheet is named &#39;data&#39; data.2 &lt;- read_excel(&#39;data-raw/Example_2.xls&#39;, sheet=2 ) data.2 &lt;- read_excel(&#39;data-raw/Example_2.xls&#39;, sheet=&#39;data&#39;) There is one additional problem that shows up while reading in Excel files. Blank columns often show up in Excel files because at some point there was some text in a cell that got deleted but a space remains and Excel still thinks there is data in the column. To fix this, you could find the cell with the space in it, or you can select a bunch of columns at the edge and delete the entire columns. Alternatively, you could remove the column after it is read into R using tools we’ll learn when we get to the Manipulating Data chapter. Open up the file Example_4.xls in Excel and confirm that the data sheet has name columns out to carb. Read in the data frame using the following code: data.4 &lt;- read_excel(&#39;./data-raw/Example_4.xls&#39;, sheet=&#39;data&#39;) # Extra Column Example ## New names: ## * `` -&gt; ...13 ## * `` -&gt; ...14 str(data.4) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 34 obs. of 14 variables: ## $ model: chr &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; &quot;Hornet 4 Drive&quot; ... ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp : num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat : num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec : num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear : num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb : num 4 4 1 1 2 1 4 2 2 4 ... ## $ ...13: logi NA NA NA NA NA NA ... ## $ ...14: logi NA NA NA NA NA NA ... We notice that after reading in the data, there is an additional column that just has missing data (the NA stands for not available which means that the data is missing) and a row with just a single blank. Go back to the Excel file and go to row 4 column N and notice that the cell isn’t actually blank, there is a space. Delete the space, save the file, and then reload the data into R. You should notice that the extra columns are now gone. 9.4 Exercises Download from GitHub the data file Example_5.xls. Open it in Excel and figure out which sheet of data we should import into R. At the same time figure out how many initial rows need to be skipped. Import the data set into a data frame and show the structure of the imported data using the str() command. Make sure that your data has \\(n=31\\) observations and the three columns are appropriately named. "],
["10-user-defined-functions.html", "Chapter 10 User Defined Functions 10.1 Basic function definition 10.2 Parameter Defaults 10.3 Ellipses 10.4 Function Overloading 10.5 Debugging 10.6 Scope 10.7 Exercises", " Chapter 10 User Defined Functions library(tidyverse) It is very important to be able to define a piece of programming logic that is repeated often. For example, I don’t want to have to always program the mathematical code for calculating the sample variance of a vector of data. Instead I just want to call a function that does everything for me and I don’t have to worry about the details. While hiding the computational details is nice, fundamentally writing functions allows us to think about our problems at a higher layer of abstraction. For example, most scientists just want to run a t-test on their data and get the appropriate p-value out; they want to focus on their problem and not how to calculate what the appropriate degrees of freedom are. Functions let us do that. 10.1 Basic function definition In the course of your analysis, it can be useful to define your own functions. The format for defining your own function is function.name &lt;- function(arg1, arg2, arg3){ statement1 statement2 } where arg1 is the first argument passed to the function and arg2 is the second. To illustrate how to define your own function, we will define a variance calculating function. # define my function my.var &lt;- function(x){ n &lt;- length(x) # calculate sample size xbar &lt;- mean(x) # calculate sample mean SSE &lt;- sum( (x-xbar)^2 ) # calculate sum of squared error v &lt;- SSE / ( n - 1 ) # &quot;average&quot; squared error return(v) # result of function is v } # create a vector that I wish to calculate the variance of test.vector &lt;- c(1,2,2,4,5) # calculate the variance using my function calculated.var &lt;- my.var( test.vector ) calculated.var ## [1] 2.7 Notice that even though I defined my function using x as my vector of data, and passed my function something named test.vector, R does the appropriate renaming.If my function doesn’t modify its input arguments, then R just passes a pointer to the inputs to avoid copying large amounts of data when you call a function. If your function modifies its input, then R will take the input data, copy it, and then pass that new copy to the function. This means that a function cannot modify its arguments. In Computer Science parlance, R does not allow for procedural side effects. Think of the variable x as a placeholder, with it being replaced by whatever gets passed into the function. When I call a function, the function might cause something to happen (e.g. draw a plot) or it might do some calculates the result is returned by the function and we might want to save that. Inside a function, if I want the result of some calculation saved, I return the result as the output of the function. The way I specify to do this is via the return statement. (Actually R doesn’t completely require this. But the alternative method is less intuitive and I strongly recommend using the return() statement for readability.) By writing a function, I can use the same chunk of code repeatedly. This means that I can do all my tedious calculations inside the function and just call the function whenever I want and happily ignore the details. Consider the function t.test() which we have used to do all the calculations in a t-test. We could write a similar function using the following code: # define my function one.sample.t.test &lt;- function(input.data, mu0){ n &lt;- length(input.data) xbar &lt;- mean(input.data) s &lt;- sd(input.data) t &lt;- (xbar - mu0)/(s / sqrt(n)) if( t &lt; 0 ){ p.value &lt;- 2 * pt(t, df=n-1) }else{ p.value &lt;- 2 * (1-pt(t, df=n-1)) } # we haven&#39;t addressed how to print things in a organized # fashion, the following is ugly, but works... # Notice that this function returns a character string # with the necessary information in the string. return( paste(&#39;t =&#39;, round(t, digits=3), &#39; and p.value =&#39;, round(p.value, 3)) ) } # create a vector that I wish apply a one-sample t-test on. test.data &lt;- c(1,2,2,4,5,4,3,2,3,2,4,5,6) one.sample.t.test( test.data, mu0=2 ) ## [1] &quot;t = 3.157 and p.value = 0.008&quot; Nearly every function we use to do data analysis is written in a similar fashion. Somebody decided it would be convenient to have a function that did an ANOVA analysis and they wrote something similar to the above function, but is a bit grander in scope. Even if you don’t end up writing any of your own functions, knowing how to will help you understand why certain functions you use are designed the way they are. 10.2 Parameter Defaults When I define a function and can let it take as many arguments as I want and I can also give default values to the arguments. For example we can define the normal density function using the following code which gives a default mean of \\(0\\) and default standard deviation of \\(1\\). # a function that defines the shape of a normal distribution. # by including mu=0, we give a default value that the function # user can override dnorm.alternate &lt;- function(x, mu=0, sd=1){ out &lt;- 1 / (sd * sqrt(2*pi)) * exp( -(x-mu)^2 / (2 * sd^2) ) return(out) } # test the function to see if it works dnorm.alternate(1) ## [1] 0.2419707 dnorm.alternate(1, mu=1) ## [1] 0.3989423 # Lets test the function a bit more by drawing the height # of the normal distribution a lots of different points # ... First the standard normal! data.frame( x = seq(-3, 3, length=601) ) %&gt;% mutate( y = dnorm.alternate(x) ) %&gt;% # use default mu=0, sd=1 ggplot( aes(x=x, y=y) ) + geom_line() # next a normal with mean 1, and standard deviation 1 data.frame( x = seq(-3, 3, length=601) ) %&gt;% mutate( y = dnorm.alternate(x, mu=1) ) %&gt;% # use mu=1, sd=1 ggplot( aes(x=x, y=y) ) + geom_line() Many functions that we use have defaults that we don’t normally mess with. For example, the function mean() has an option the specifies what it should do if your vector of data has missing data. The common solution is to remove those observations, but we might have wanted to say that the mean is unknown one component of it was unknown. x &lt;- c(1,2,3,NA) # fourth element is missing mean(x) # default is to return NA if any element is missing ## [1] NA mean(x, na.rm=TRUE) # Only average the non-missing data ## [1] 2 As you look at the help pages for different functions, you’ll see in the function definitions what the default values are. For example, the function mean has another option, trim, which specifies what percent of the data to trim at the extremes. Because we would expect mean to not do any trimming by default, the authors have appropriately defined the default amount of trimming to be zero via the definition trim=0. 10.3 Ellipses When writing functions, I occasionally have a situation where I call function a() and function a() needs to call another function, say b(), and I want to pass an unusual parameter to that function. To do this, I’ll use a set of three periods called an ellipses. What these do is represent a set of parameter values that will be passed along to a subsequent function.For example the following code takes the result of a simple linear regression and plots the data and the regression line and confidence region (basically I’m recreating a function that does the same thing as ggplot2’s geom_smooth() layer). I might not want to specify (and give good defaults) to every single graphical parameter that the plot() function supports. Instead I’ll just use the ‘…’ argument and pass any additional parameters to the plot function. # a function that draws the regression line and confidence interval # notice it doesn&#39;t return anything... all it does is draw a plot show.lm &lt;- function(m, interval.type=&#39;confidence&#39;, fill.col=&#39;light grey&#39;, ...){ df &lt;- data.frame( x = m$model[,2], # extract the predictor variable y = m$model[,1] # extract the response ) df &lt;- df %&gt;% cbind( predict(m, interval=interval.type) ) P &lt;- ggplot(df, aes(x=x) ) + geom_ribbon( aes(ymin=lwr, ymax=upr), fill=fill.col ) + geom_line( aes(y=fit), ... ) + geom_point( aes(y=y), ... ) + labs(...) print(P) } This function looks daunting, but we experiment to see what it does. # first define a simple linear model from our cherry tree data m &lt;- lm( Volume ~ Girth, data=trees ) # call the function with no extraneous parameters show.lm( m ) # Pass arguments that will just be passed along to the geom layers show.lm( m, color=&#39;Red&#39;, title=&#39;Relationship between Girth and Volume&#39;) ## Warning: Ignoring unknown parameters: title ## Warning: Ignoring unknown parameters: title This type of trick is done commonly. Look at the help files for hist() and qqnorm() and you’ll see the ellipses used to pass graphical parameters along to sub-functions. Functions like lm() use the ellipses to pass arguments to the low level regression fitting functions that do the actual calculations. By only including these parameters via the ellipses, must users won’t be tempted to mess with the parameters, but experts who know the nitty-gritty details can still modify those parameters. 10.4 Function Overloading Frequently the user wants to inspect the results of some calculation and display a variable or object to the screen. The print() function does exactly that, but it acts differently for matrices than it does for vectors. It especially acts different for lists that I obtained from a call like lm() or aov(). The reason that the print function can act differently depending on the object type that I pass it is because the function print() is overloaded. What this means is that there is a print.lm() function that is called whenever I call print(obj) when obj is the output of an lm() command. Recall that we initially introduced a few different classes of data, Numerical, Factors, and Logicals. It turns out that I can create more types of classes. x &lt;- seq(1:10) y &lt;- 3+2*x+rnorm(10) h &lt;- hist(y) # h should be of class &quot;Histogram&quot; class(h) ## [1] &quot;histogram&quot; model &lt;- lm( y ~ x ) # model is something of class &quot;lm&quot; class(model) ## [1] &quot;lm&quot; Many common functions such as plot() are overloaded so that when I call the plot function with an object, it will in turn call plot.lm() or plot.histogram() as appropriate. When building statistical models I am often interested in different quantities and would like to get those regardless of the model I am using. Below are a list of functions that work whether I fit a model via aov(), lm(), glm(), or gam(). Quantity Function Name Residuals resid( obj ) Model Coefficients coef( obj ) Summary Table summary( obj ) ANOVA Table anova( obj ) AIC value AIC( obj ) For the residual function, there exists a resid.lm() function, and resid.gam() and it is these functions are called when we run the command resid( obj ). 10.5 Debugging When writing code, it is often necessary to figure out why the written code does not behave in the manner the writer expects. This process can be extremely challenging. Various types of tools have been developed and are incorporated in any reasonable integrated development environment (including RStudio!). All of the techniques we’ll discuss are intended to help the developer understand exactly what the variable environment is like during the code execution. RStudio has a support article about using the debugger mode in a variety of situations so these notes won’t go into extreme detail about different scenarios. Instead we’ll focus on how to debug. 10.5.1 Rmarkdown Recommendations Because Rmarkdown documents are knitted using completely a completely fresh instance of R, I recommend that whenever you start up RStudio, it starts with a completely fresh instance of R. This means that it shouldn’t load any history or previously created objects. To make this the default behavior, go to the RStudio -&gt; Preferences on a Mac or Tools -&gt; Global Options on a PC. On the R General section un-select all of the Workspace and History options. 10.5.2 Step-wise Execution Often we can understand where an error is being introduced by simply running each step individually and inspecting the result. This is where the Evironment tab in the top right panel (unless you’ve moved it…) becomes helpful. By watching how the objects of interest change as we step through the code, we can more easily see where errors have occurred. For complicated objects such as data.frames, I find it helpful to have them opened in a View tab. iris.summary &lt;- iris %&gt;% mutate(Sepal.Area = Sepal.Width * Sepal.Length, Petal.Area = Petal.Width * Petal.Length) %&gt;% select(Species, Sepal.Area, Petal.Area) %&gt;% group_by(Speces) %&gt;% summarize( Mean.Sepal.Area = mean(Sepal.Area), Mean.Petal.Area = mean(Petal.Area) ) In this case, I would execute the iris %&gt;% ... section of code and add one command after another until I finally found the line of code that produces the error. Once the line containing the error has been identified, I look for misspellings, misplaced parentheses, or a disconnect between what the input structure is versus what the code expects. 10.5.3 Print Statements Once we start writing code with loops and functions, a simple step-by-step evaluation won’t suffice. An easy way to quickly see what the state of a variable is at some point in the code is to add a print() command that outputs some useful information about the environment. #&#39; Compute a Factorial. e.g. 5! = 5*4*3*2*1 #&#39; @param n A positive integer #&#39; @return The value of n! factorial &lt;- function(n){ output &lt;- NULL for( i in 1:n ){ output &lt;- output*i } return(output) } factorial(5) ## integer(0) In this case, I would add a few print statements such as the following: #&#39; Compute a Factorial. e.g. 5! = 5*4*3*2*1 #&#39; @param n A positive integer #&#39; @return The value of n! factorial &lt;- function(n){ output &lt;- NULL print(paste(&#39;At Start and output = &#39;, output)) for( i in 1:n ){ output &lt;- output*i print(paste(&#39;In Loop and i = &#39;, i,&#39; and output = &#39;, output)) } return(output) } factorial(5) ## [1] &quot;At Start and output = &quot; ## [1] &quot;In Loop and i = 1 and output = &quot; ## [1] &quot;In Loop and i = 2 and output = &quot; ## [1] &quot;In Loop and i = 3 and output = &quot; ## [1] &quot;In Loop and i = 4 and output = &quot; ## [1] &quot;In Loop and i = 5 and output = &quot; ## integer(0) Hopefully we can now see that multiplying a NULL value by anything else continues to result in NULL values. 10.5.4 browser Debugging is best done by stepping through the code while paying attention to the current values of all the variables of interest. Modern developer environments include a debugger which allows you to step through your code, one command at a time, while simultaneously showing you the variables of interest. To get into this environment, we need to set a breakpoint. This can be done in R-scripts by clicking on the line number, but in Rmarkdown files, it is done by including the command browser() into your code. In our factorial function, we can set a breakpoint via the following #&#39; Compute a Factorial. e.g. 5! = 5*4*3*2*1 #&#39; @param n A positive integer #&#39; @return The value of n! factorial &lt;- function(n){ browser() output &lt;- NULL for( i in 1:n ){ output &lt;- output*i } return(output) } # Now run the function factorial(5) This allows us to step through the function while simultaneously keeping track of all the variables we are interested in. 10.6 Scope Consider the case where we make a function that calculates the trimmed mean. A good implementation of the function is given here. #&#39; Define a function for the trimmed mean #&#39; @param x A vector of values to be averaged #&#39; @param k The number of elements to trim on either side #&#39; @return A scalar trimmed.mean &lt;- function(x, k=0){ x &lt;- sort(x) # arrange the input according magnitude n &lt;- length(x) # n = how many observations if( k &gt; 0){ x &lt;- x[c(-1*(1:k), -1*((n-k+1):n))] # remove first k, last k } tm &lt;- sum(x) / length(x) # mean of the remaining observations return( tm ) } x &lt;- c(10:1,50) # 10, 9, 8, ..., 1 output &lt;- trimmed.mean(x, k=2) output ## [1] 6 x # notice x is unchanged ## [1] 10 9 8 7 6 5 4 3 2 1 50 Notice that even though I passed x into the function and then sorted it, x remained unsorted outside the function. When I modified x, R made a copy of x and sorted the copy that belonged to the function so that I didn’t modify a variable that was defined outside of the scope of my function. But what if I didn’t bother with passing x and k. If I don’t pass in the values of x and k, then R will try to find them in my current work space. # a horribly defined function that has no parameters # but still accesses something called &quot;x&quot; trimmed.mean &lt;- function(){ browser() x &lt;- sort(x) # Access global x, sort and save in local environment n &lt;- length(x) if( k &gt; 0){ # Accessing the Global k x &lt;- x[c(-1*(1:k), -1*((n-k+1):n))] } tm &lt;- sum(x)/length(x) return( tm ) } x &lt;- c( 50, 10:1 ) # data to trim k &lt;- 2 trimmed.mean() # amazingly this still works ## Called from: trimmed.mean() ## debug at &lt;text&gt;#5: x &lt;- sort(x) ## debug at &lt;text&gt;#6: n &lt;- length(x) ## debug at &lt;text&gt;#7: if (k &gt; 0) { ## x &lt;- x[c(-1 * (1:k), -1 * ((n - k + 1):n))] ## } ## debug at &lt;text&gt;#8: x &lt;- x[c(-1 * (1:k), -1 * ((n - k + 1):n))] ## debug at &lt;text&gt;#10: tm &lt;- sum(x)/length(x) ## debug at &lt;text&gt;#11: return(tm) ## [1] 6 # but what if k wasn&#39;t defined? rm(k) # remove k trimmed.mean() # now the function can&#39;t find anything named k and throws and error. ## Called from: trimmed.mean() ## debug at &lt;text&gt;#5: x &lt;- sort(x) ## debug at &lt;text&gt;#6: n &lt;- length(x) ## debug at &lt;text&gt;#7: if (k &gt; 0) { ## x &lt;- x[c(-1 * (1:k), -1 * ((n - k + 1):n))] ## } ## Error in trimmed.mean(): object &#39;k&#39; not found So if I forget to pass some variable into a function, but it happens to be defined outside the function, R will find it. It is not good practice to rely on that because how do I take the trimmed mean of a vector named z? Worse yet, what if the variable x changes between runs of your function? What should be consistently giving the same result keeps changing. This is especially insidious when you have defined most of the arguments the function uses, but missed one. Your function happily goes to the next higher scope and sometimes finds it. When executing a function, R will have access to all the variables defined in the function, all the variables defined in the function that called your function and so on until the base work space. However, you should never let your function refer to something that is not either created in your function or passed in via a parameter. 10.7 Exercises Write a function that calculates the density function of a Uniform continuous variable on the interval \\(\\left(a,b\\right)\\). The function is defined as \\[f\\left(x\\right)=\\begin{cases} \\frac{1}{b-a} &amp; \\;\\;\\;\\textrm{if }a\\le x\\le b\\\\ 0 &amp; \\;\\;\\;\\textrm{otherwise} \\end{cases}\\] which looks like this We want to write a function duniform(x, a, b) that takes an arbitrary value of x and parameters a and b and return the appropriate height of the density function. For various values of x, a, and b, demonstrate that your function returns the correct density value. Write your function without regard for it working with vectors of data. Demonstrate that it works by calling the function three times, once where x&lt; a, once where a &lt; x and x &lt; b, and finally once where b &lt; x. Next we force our function to work correctly for a vector of x values. Modify your function in part (a) so that the core logic is inside a for statement and the loop moves through each element of x in succession. Your function should look something like this: duniform &lt;- function(x, a, b){ output &lt;- NULL for( i in ??? ){ # Set the for loop to look at each element of x if( x[i] ??? ){ # What should this logical expression be? # ??? Something ought to be saved in output[i] }else{ # ??? Something else ought to be saved in output[i] } } return(output) } Verify that your function works correctly by running the following code: data.frame( x=seq(-1, 12, by=.001) ) %&gt;% mutate( y = duniform(x, 4, 8) ) %&gt;% ggplot( aes(x=x, y=y) ) + geom_step() Install the R package microbenchmark. We will use this to discover the average duration your function takes. microbenchmark::microbenchmark( duniform( seq(-4,12,by=.0001), 4, 8) ) In particular, look at the median time for evaluation. Instead of using a for loop, it might have been easier to use our standard dplyr::mutate command with an ifelse() command. Rewrite your function to run the dplyr::mutate command with an ifelse() command to produce a new results column and return that results column. Verify that your function works correctly by producing a plot, and also run the microbenchmark(). Which version of your function was easier to write? Which ran faster? I very often want to provide default values to a parameter that I pass to a function. For example, it is so common for me to use the pnorm() and qnorm() functions on the standard normal, that R will automatically use mean=0 and sd=1 parameters unless you tell R otherwise. To get that behavior, we just set the default parameter values in the definition. When the function is called, the user specified value is used, but if none is specified, the defaults are used. Look at the help page for the functions dunif(), and notice that there are a number of default parameters. For your duniform() function provide default values of 0 and 1 for a and b. Demonstrate that your function is appropriately using the given default values. A common data processing step is to standardize numeric variables by subtracting the mean and dividing by the standard deviation. Create a function that takes a vector of numerical values and produces an output vector of the standardized values. We will then apply this function to each numeric column in a data frame using the dplyr::mutate_if() command. This is often done in model algorithms that rely on numerical optimization methods to find a solution. By keeping the scales of different predictor covariates the same, the numerical optimization routines generally work better. standardize &lt;- function(x){ ## What goes here? } data( &#39;iris&#39; ) # Graph the pre-transformed data. ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point() + labs(title=&#39;Pre-Transformation&#39;) # Standardize the numeric columns iris.z &lt;- iris %&gt;% mutate_if( is.numeric, standardize ) # Graph the post-transformed data. ggplot(iris.z, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point() + labs(title=&#39;Post-Transformation&#39;) A common statistical requirement is to create bootstrap confidence intervals for a model statistic. This is done by repeatedly re-sampling with replacement from our original sample data, running the analysis for each re-sample, and then saving the statistic of interest. Below is a function boot.lm that bootstraps the linear model using case re-sampling. #&#39; Calculate bootstrap CI for an lm object #&#39; #&#39; @param model #&#39; @param N boot.lm &lt;- function(model, N=1000){ data &lt;- model$model # Extract the original data formula &lt;- model$terms # and model formula used # Start the output data frame with the full sample statistic output &lt;- broom::tidy(model) %&gt;% select(term, estimate) %&gt;% spread(term, estimate) for( i in 1:N ){ data &lt;- data %&gt;% sample_frac( replace=TRUE ) model.boot &lt;- lm( formula, data=data) coefs &lt;- broom::tidy(model.boot) %&gt;% select(term, estimate) %&gt;% spread(term, estimate) output &lt;- output %&gt;% rbind( coefs ) } return(output) } # Run the function on a model m &lt;- lm( Volume ~ Girth, data=trees ) boot.dist &lt;- boot.lm(m) # If boot.lm() works, then the following produces a nice graph boot.dist %&gt;% gather(&#39;term&#39;,&#39;estimate&#39;) %&gt;% ggplot( aes(x=estimate) ) + geom_histogram() + facet_grid(.~term, scales=&#39;free&#39;) This code does not correctly calculate a bootstrap sample for the model coefficients. Figure out where the mistake is. Hint: Even if you haven’t studied the bootstrap, my description above gives enough information about the bootstrap algorithm to figure this out. "],
["11-string-manipulation.html", "Chapter 11 String Manipulation 11.1 Base function 11.2 stringr: Basic operations 11.3 stringr: Pattern Matching Tools 11.4 Regular Expressions 11.5 Exercises", " Chapter 11 String Manipulation library(tidyverse) library(stringr) Strings make up a very important class of data. Data being read into R often come in the form of character strings where different parts might mean different things. For example a sample ID of “R1_P2_C1_2012_05_28” might represent data from Region 1, Park 2, Camera 1, taken on May 28, 2012. It is important that we have a set of utilities that allow us to split and combine character strings in a easy and consistent fashion. Unfortunately, the utilities included in the base version of R are somewhat inconsistent and were not designed to work nicely together. Hadley Wickham, the developer of ggplot2 and dplyr has this to say: “R provides a solid set of string operations, but because they have grown organically over time, they can be inconsistent and a little hard to learn. Additionally, they lag behind the string operations in other programming languages, so that some things that are easy to do in languages like Ruby or Python are rather hard to do in R.” – Hadley Wickham For this chapter we will introduce the most commonly used functions from the base version of R that you might use or see in other people’s code. Second, we introduce Dr Wickham’s stringr package that provides many useful functions that operate in a consistent manner. In his R for Data Science he has a nice chapter on strings. There are several white space characters that need to be represented in character strings such as tabs and returns. Most programming languages, including R, represent these using the escape character combined with another. For example in a character string \\t represents a tab and \\n represents a newline. However, because the backslash is the escape character, in order to have a backslash in the character string, the backslash needs to be escaped as well. 11.1 Base function 1.1.1 paste() The most basic thing we will want to do is to combine two strings or to combine a string with a numerical value. The paste() command will take one or more R objects and converts them to character strings and then pastes them together to form one or more character strings. It has the form: paste( ..., sep = &#39; &#39;, collapse = NULL ) The ... piece means that we can pass any number of objects to be pasted together. The sep argument gives the string that separates the strings to be joined and the collapse argument that specifies if a simplification should be performed after being pasting together. Suppose we want to combine the strings “Peanut butter” and “Jelly” then we could execute: paste( &quot;PeanutButter&quot;, &quot;Jelly&quot; ) ## [1] &quot;PeanutButter Jelly&quot; Notice that without specifying the separator character, R chose to put a space between the two strings. We could specify whatever we wanted: paste( &quot;Hello&quot;, &quot;World&quot;, sep=&#39;_&#39; ) ## [1] &quot;Hello_World&quot; Also we can combine strings with numerical values paste( &quot;Pi is equal to&quot;, pi ) ## [1] &quot;Pi is equal to 3.14159265358979&quot; We can combine vectors of similar or different lengths as well. By default R assumes that you want to produce a vector of character strings as output. paste( &quot;n =&quot;, c(5,25,100) ) ## [1] &quot;n = 5&quot; &quot;n = 25&quot; &quot;n = 100&quot; first.names &lt;- c(&#39;Robb&#39;,&#39;Stannis&#39;,&#39;Daenerys&#39;) last.names &lt;- c(&#39;Stark&#39;,&#39;Baratheon&#39;,&#39;Targaryen&#39;) paste( first.names, last.names) ## [1] &quot;Robb Stark&quot; &quot;Stannis Baratheon&quot; &quot;Daenerys Targaryen&quot; If we want paste() produce just a single string of output, use the collapse= argument to paste together each of the output vectors (separated by the collapse character). paste( &quot;n =&quot;, c(5,25,100) ) # Produces 3 strings ## [1] &quot;n = 5&quot; &quot;n = 25&quot; &quot;n = 100&quot; paste( &quot;n =&quot;, c(5,25,100), collapse=&#39;:&#39; ) # collapses output into one string ## [1] &quot;n = 5:n = 25:n = 100&quot; paste(first.names, last.names, sep=&#39;.&#39;, collapse=&#39; : &#39;) ## [1] &quot;Robb.Stark : Stannis.Baratheon : Daenerys.Targaryen&quot; Notice we could use the paste() command with the collapse option to combine a vector of character strings together. paste(first.names, collapse=&#39;:&#39;) ## [1] &quot;Robb:Stannis:Daenerys&quot; 11.2 stringr: Basic operations The goal of stringr is to make a consistent user interface to a suite of functions to manipulate strings. “(stringr) is a set of simple wrappers that make R’s string functions more consistent, simpler and easier to use. It does this by ensuring that: function and argument names (and positions) are consistent, all functions deal with NA’s and zero length character appropriately, and the output data structures from each function matches the input data structures of other functions.” - Hadley Wickham We’ll investigate the most commonly used function but there are many we will ignore. Function Description str_c() string concatenation, similar to paste str_length() number of characters in the string str_sub() extract a substring str_trim() remove leading and trailing whitespace str_pad() pad a string with empty space to make it a certain length 11.2.1 Concatenating with str_c() or str_join() The first thing we do is to concatenate two strings or two vectors of strings similarly to the paste() command. The str_c() and str_join() functions are a synonym for the exact same function, but str_join() might be a more natural verb to use and remember. The syntax is: str_c( ..., sep=&#39;&#39;, collapse=NULL) You can think of the inputs building a matrix of strings, with each input creating a column of the matrix. For each row, str_c() first joins all the columns (using the separator character given in sep) into a single column of strings. If the collapse argument is non-NULL, the function takes the vector and joins each element together using collapse as the separator character. # envisioning the matrix of strings cbind(first.names, last.names) ## first.names last.names ## [1,] &quot;Robb&quot; &quot;Stark&quot; ## [2,] &quot;Stannis&quot; &quot;Baratheon&quot; ## [3,] &quot;Daenerys&quot; &quot;Targaryen&quot; # join the columns together full.names &lt;- str_c( first.names, last.names, sep=&#39;.&#39;) cbind( first.names, last.names, full.names) ## first.names last.names full.names ## [1,] &quot;Robb&quot; &quot;Stark&quot; &quot;Robb.Stark&quot; ## [2,] &quot;Stannis&quot; &quot;Baratheon&quot; &quot;Stannis.Baratheon&quot; ## [3,] &quot;Daenerys&quot; &quot;Targaryen&quot; &quot;Daenerys.Targaryen&quot; # Join each of the rows together separated by collapse str_c( first.names, last.names, sep=&#39;.&#39;, collapse=&#39; : &#39;) ## [1] &quot;Robb.Stark : Stannis.Baratheon : Daenerys.Targaryen&quot; 11.2.2 Calculating string length with str_length() The str_length() function calculates the length of each string in the vector of strings passed to it. text &lt;- c(&#39;WordTesting&#39;, &#39;With a space&#39;, NA, &#39;Night&#39;) str_length( text ) ## [1] 11 12 NA 5 Notice that str_length() correctly interprets the missing data as missing and that the length ought to also be missing. 11.2.3 Extracting substrings with str_sub() If we know we want to extract the \\(3^{rd}\\) through \\(6^{th}\\) letters in a string, this function will grab them. str_sub(text, start=3, end=6) ## [1] &quot;rdTe&quot; &quot;th a&quot; NA &quot;ght&quot; If a given string isn’t long enough to contain all the necessary indices, str_sub() returns only the letters that where there (as in the above case for “Night” 11.2.4 Pad a string with str_pad() Sometimes we to make every string in a vector the same length to facilitate display or in the creation of a uniform system of assigning ID numbers. The str_pad() function will add spaces at either the beginning or end of the of every string appropriately. str_pad(first.names, width=8) ## [1] &quot; Robb&quot; &quot; Stannis&quot; &quot;Daenerys&quot; str_pad(first.names, width=8, side=&#39;right&#39;, pad=&#39;*&#39;) ## [1] &quot;Robb****&quot; &quot;Stannis*&quot; &quot;Daenerys&quot; 11.2.5 Trim a string with str_trim() This removes any leading or trailing white space where white space is defined as spaces ’ ’, tabs \\t or returns \\n. text &lt;- &#39; Some text. \\n &#39; print(text) ## [1] &quot; Some text. \\n &quot; str_trim(text) ## [1] &quot;Some text.&quot; 11.3 stringr: Pattern Matching Tools The previous commands are all quite useful but the most powerful string operation is take a string and match some pattern within it. The following commands are available within stringr. Function Description str_detect() Detect if a pattern occurs in input string str_locate() str_locate_all() Locates the first (or all) positions of a pattern. str_extract() str_extract_all() Extracts the first (or all) sub-strings corresponding to a pattern str_replace() str_replace_all() Replaces the matched sub-string(s) with a new pattern str_split() str_split_fixed() Splits the input string based on the input pattern We will first examine these functions using a very simple pattern matching algorithm where we are matching a specific pattern. For most people, this is as complex as we need. Suppose that we have a vector of strings that contain a date in the form “2012-May-27” and we want to manipulate them to extract certain information. strings &lt;- c(&#39;2008-Feb-10&#39;, &#39;2010-Sept-18&#39;, &#39;2013-Jan-11&#39;, &#39;2016-Jan-2&#39;) 11.3.1 Detecting a pattern using str_detect() Suppose we want to know which dates are in September. We want to detect if the pattern “Sept” occurs in the strings. data.frame( string = strings ) %&gt;% mutate( result = str_detect( string, pattern=&#39;Sept&#39; ) ) ## string result ## 1 2008-Feb-10 FALSE ## 2 2010-Sept-18 TRUE ## 3 2013-Jan-11 FALSE ## 4 2016-Jan-2 FALSE Here we see that the second string in the test vector included the sub-string “Sept” but none of the others did. 11.3.2 Locating a pattern using str_locate() To figure out where the “-” characters are, we can use the str_locate() function. str_locate(strings, pattern=&#39;-&#39; ) ## start end ## [1,] 5 5 ## [2,] 5 5 ## [3,] 5 5 ## [4,] 5 5 which shows that the first dash occurs as the \\(5^{th}\\) character in each string. If we wanted all the dashes in the string the following works. str_locate_all(strings, pattern=&#39;-&#39; ) ## [[1]] ## start end ## [1,] 5 5 ## [2,] 9 9 ## ## [[2]] ## start end ## [1,] 5 5 ## [2,] 10 10 ## ## [[3]] ## start end ## [1,] 5 5 ## [2,] 9 9 ## ## [[4]] ## start end ## [1,] 5 5 ## [2,] 9 9 The output of str_locate_all() is a list of matrices that gives the start and end of each matrix. Using this information, we could grab the Year/Month/Day information out of each of the dates. We won’t do that here because it will be easier to do this using str_split(). 11.3.3 Replacing sub-strings using str_replace() Suppose we didn’t like using “-” to separate the Year/Month/Day but preferred a space, or an underscore, or something else. This can be done by replacing all of the “-” with the desired character. The str_replace() function only replaces the first match, but str_replace_all() replaces all matches. data.frame( string = strings ) %&gt;% mutate(result = str_replace(string, pattern=&#39;-&#39;, replacement=&#39;:&#39;)) ## string result ## 1 2008-Feb-10 2008:Feb-10 ## 2 2010-Sept-18 2010:Sept-18 ## 3 2013-Jan-11 2013:Jan-11 ## 4 2016-Jan-2 2016:Jan-2 data.frame( string = strings ) %&gt;% mutate(result = str_replace_all(string, pattern=&#39;-&#39;, replacement=&#39;:&#39;)) ## string result ## 1 2008-Feb-10 2008:Feb:10 ## 2 2010-Sept-18 2010:Sept:18 ## 3 2013-Jan-11 2013:Jan:11 ## 4 2016-Jan-2 2016:Jan:2 11.3.4 Splitting into sub-strings using str_split() We can split each of the dates into three smaller sub-strings using the str_split() command, which returns a list where each element of the list is a vector containing pieces of the original string (excluding the pattern we matched on). If we know that all the strings will be split into a known number of sub-strings (we have to specify how many sub-strings to match with the n= argument), we can use str_split_fixed() to get a matrix of sub-strings instead of list of sub-strings. data.frame( string = strings ) %&gt;% cbind( str_split_fixed(.$string, pattern=&#39;-&#39;, n=3) ) ## string 1 2 3 ## 1 2008-Feb-10 2008 Feb 10 ## 2 2010-Sept-18 2010 Sept 18 ## 3 2013-Jan-11 2013 Jan 11 ## 4 2016-Jan-2 2016 Jan 2 11.4 Regular Expressions The next section will introduce using regular expressions. Regular expressions are a way to specify very complicated patterns. Go look at https://xkcd.com/208/ to gain insight into just how geeky regular expressions are. Regular expressions are a way of precisely writing out patterns that are very complicated. The stringr package pattern arguments can be given using standard regular expressions (not perl-style!) instead of using fixed strings. Regular expressions are extremely powerful for sifting through large amounts of text. For example, we might want to extract all of the 4 digit sub-strings (the years) out of our dates vector, or I might want to find all cases in a paragraph of text of words that begin with a capital letter and are at least 5 letters long. In another, somewhat nefarious example, spammers might have downloaded a bunch of text from web pages and want to be able to look for email addresses. So as a first pass, they want to match a pattern: \\[\\underset{\\textrm{1 or more letters}}{\\underbrace{\\texttt{Username}}}\\texttt{@}\\;\\;\\underset{\\textrm{1 or more letter}}{\\underbrace{\\texttt{OrganizationName}}}\\;\\texttt{.\\;}\\begin{cases} \\texttt{com}\\\\ \\texttt{org}\\\\ \\texttt{edu} \\end{cases}\\] where the Username and OrganizationName can be pretty much anything, but a valid email address looks like this. We might get even more creative and recognize that my list of possible endings could include country codes as well. For most people, I don’t recommend opening the regular expression can-of-worms, but it is good to know that these pattern matching utilities are available within R and you don’t need to export your pattern matching problems to Perl or Python. 11.4.1 Regular Expression Ingredients Regular expressions use a select number of characters to signify further meaning in order to create recipes that might be matched within a character string. The special characters are [ \\ ^ $ . | ? * + (). Character Types Interpretation abc Letters abc exactly 123 Digits 123 exactly \\d Any Digit \\D Any Non-digit character \\w Any Alphanumeric character \\W Any Non-alphanumeric character \\s Any White space \\S Any Non-white space character . Any Character (The wildcard!) ^ Beginning of input string $ End of input string Grouping Interpretation [abc] Only a, b, or c [^abc] Not a, b, nor c [a-z] Characters a to z [A-Z] Characters A to Z [0-9] Numbers 0 to 9 [a-zA-Z] Characters a to z or A to Z () Capture Group (a(bc)) Capture Sub-group (abc|def) Matches abc or def Group Modifiers Interpretation * Zero or more repetitions of previous + One or more repetitions of previous ? Previous group is optional {m} m repetitions of the previous {m,n} Between m and n repetitions of the previous The general idea is to make a recipe that combines one or more groups and add modifiers on the groups for how often the group is repeated. 11.4.2 Matching a specific string I might have a set of strings and I want to remove a specific string from them, or perhaps detect if a specific string is present. So long as the string of interest doesn’t contain any special characters, you can just type out the string to be detected. # Replace &#39;John&#39; from all of the strings with &#39;****&#39; # The regular expression interpretation only comes in evaluating &#39;John&#39; strings &lt;- c(&#39;John Sanderson&#39;, &#39;Johnathan Wilkes&#39;, &#39;Brendan Johnson&#39;, &#39;Bigjohn Smith&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_replace(string, &#39;John&#39;, &#39;****&#39;) ) ## string result ## 1 John Sanderson **** Sanderson ## 2 Johnathan Wilkes ****athan Wilkes ## 3 Brendan Johnson Brendan ****son ## 4 Bigjohn Smith Bigjohn Smith Notice that this is case sensitive and we didn’t replace the ‘john’. I might have special characters in my string that I want to replace. # Remove the commas and the $ sign and convert to integers. # Because $ is a special character, we need to use the escape character, \\. # However, because R uses the escape character as well, we have to use TWO # escape characters. The first to escape R usual interpretation of the backslash, # and the second to cause the regular expression to not use the usual # interpretation of the $ sign. # strings &lt;- c(&#39;$1,000,873&#39;, &#39;$4.53&#39;, &#39;$672&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_remove_all(string, &#39;\\\\$&#39;) ) ## string result ## 1 $1,000,873 1,000,873 ## 2 $4.53 4.53 ## 3 $672 672 # We can use the Or clause built into regular expressions to grab the # dollar signs and the commas using (Pattern1|Pattern2) notation data.frame( string=strings ) %&gt;% mutate( result = str_remove_all(string, &#39;(\\\\$|,)&#39;) ) ## string result ## 1 $1,000,873 1000873 ## 2 $4.53 4.53 ## 3 $672 672 11.4.3 Matching arbitrary numbers We might need to extract the numbers from a string. To do this, we want to grab 1 or more digits. strings &lt;- c(&#39;I need 653 to fix the car&#39;, &#39;But I only have 432.34 in the bank&#39;, &#39;I could get .53 from the piggy bank&#39;) data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;\\\\d+&#39;) ) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432 ## 3 I could get .53 from the piggy bank 53 That isn’t exactly what we wanted. Instead of extracting the whole number, we left off the decimals. To fix this, we could have an optional part of the recipe for decimals. The way to enter into an optional section of the recipe is to use a ()? and enclose the optional part inside the parentheses. data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;\\\\d+(\\\\.\\\\d+)?&#39; )) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432.34 ## 3 I could get .53 from the piggy bank 53 That fixed the issue for the second row, but still misses the third line. Lets have 3 different recipes and then ‘or’ them together. data.frame( string=strings ) %&gt;% mutate( result = str_extract(string, &#39;(\\\\d+\\\\.\\\\d+|\\\\.\\\\d+|\\\\d+)&#39; )) ## string result ## 1 I need 653 to fix the car 653 ## 2 But I only have 432.34 in the bank 432.34 ## 3 I could get .53 from the piggy bank .53 11.4.4 Greedy matching Regular expressions tries to match as much as it can. The modifiers * and + try to match as many characters as possible. While often this is what we want, it sometimes is not. Consider the case where we are scanning HTML code and looking for markup tags which are of the form &lt;blah blah&gt;. The information inside the angled brackets will be important, but for now we just want to search the string for all instances of HTML tags. string &lt;- &#39;A web page has &lt;b&gt;MANY&lt;/b&gt; types of &lt;em&gt;awesome&lt;/em&gt; tags!&#39; For now, we want to extract &lt;b&gt;, &lt;/b&gt;, &lt;em&gt; and &lt;/em&gt;. To do this, we might first consider the following: str_extract_all(string, &#39;&lt;.+&gt;&#39;) ## [[1]] ## [1] &quot;&lt;b&gt;MANY&lt;/b&gt; types of &lt;em&gt;awesome&lt;/em&gt;&quot; What the regular expression engine did was matched as many characters in the .+ until it got to the very last ending angled bracket it could find. We can force the + and * modifiers to be lazy and match as few characters as possible to complete the match by adding a ? suffix to the + or * modifier. str_extract_all(string, &#39;&lt;.+?&gt;&#39;) ## [[1]] ## [1] &quot;&lt;b&gt;&quot; &quot;&lt;/b&gt;&quot; &quot;&lt;em&gt;&quot; &quot;&lt;/em&gt;&quot; 11.5 Exercises For the following regular expression, explain in words what it matches on. Then add test strings to demonstrate that it in fact does match on the pattern you claim it does. Make sure that your test set of strings has several examples that match as well as several that do not. If you copy the Rmarkdown code for these exercises directly from my source pages, make sure to remove the eval=FALSE from the R-chunk headers. # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;a&#39;) ) # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;ab&#39;) ) # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;[ab]&#39;) ) # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;^[ab]&#39;) ) # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;\\\\d+\\\\s[aA]&#39;) ) # This regular expression matches: Insert your answer here... strings &lt;- c() data.frame( string = strings ) %&gt;% mutate( result = str_detect(string, &#39;.*&#39;) ) The following file names were used in a camera trap study. The S number represents the site, P is the plot within a site, C is the camera number within the plot, the first string of numbers is the YearMonthDay and the second string of numbers is the HourMinuteSecond. file.names &lt;- c( &#39;S123.P2.C10_20120621_213422.jpg&#39;, &#39;S10.P1.C1_20120622_050148.jpg&#39;, &#39;S187.P2.C2_20120702_023501.jpg&#39;) Use a combination of str_sub() and str_split() to produce a data frame with columns corresponding to the site, plot, camera, year, month, day, hour, minute, and second for these three file names. So we want to produce code that will create the data frame: Site Plot Camera Year Month Day Hour Minute Second S123 P2 C10 2012 06 21 21 34 22 S10 P1 C1 2012 06 22 05 01 48 S187 P2 C2 2012 07 02 02 35 01 Variable names in R may be and combination letters, digits, period, and underscore. However, they may not start with a digit and if they start with a period, they must not be followed by a digit. strings &lt;- c(&#39;foo15&#39;, &#39;Bar&#39;, &#39;.resid&#39;, &#39;_14s&#39;, &#39;99_Bottles&#39;, &#39;.9Arggh&#39;, &#39;Foo!&#39;,&#39;HIV Rate&#39;) The first four are valid variable names, but the last four are not. First write a regular expression that determines if the string starts with a character (upper or lower case) or underscore and then is followed by zero or more numbers, letters, periods or underscores. Notice I use the start/end of string markers. This is important so that we don’t just match somewhere in the middle of the variable name. data.frame( string=strings ) %&gt;% mutate( result = str_detect(string, &#39;^(???what goes here???)$&#39; )) Modify your regular expression so that the first group could be either [a-zA-Z_] as before or it could be a period followed by letters or an underscore. "],
["12-dates-and-times.html", "Chapter 12 Dates and Times 12.1 Creating Date and Time objects 12.2 Extracting information 12.3 Arithmetic on Dates 12.4 Exercises", " Chapter 12 Dates and Times library( lubridate ) Dates within a computer require some special organization because there are several competing conventions for how to write a date (some of them more confusing than others) and because the sort order should be in the order that the dates occur in time. One useful tidbit of knowledge is that computer systems store a time point as the number of seconds from set point in time, called the epoch. So long as you always use the same epoch, you doesn’t have to worry about when the epoch is, but if you are switching between software systems, you might run into problems if they use different epochs. In R, we use midnight on Jan 1, 1970. In Microsoft Excel, they use Jan 0, 1900. For many years, R users hated dealing with dates because it was difficult to remember how to get R to take a string that represents a date (e.g. “June 26, 1997”) because users were required to specify how the format was arranged using a relatively complex set of rules. For example %y represents the two digit year, %Y represents the four digit year, %m represents the month, but %b represents the month written as Jan or Mar. Into this mess came Hadley Wickham (of ggplot2 and dplyr fame) and his student Garrett Grolemund. The internal structure of R dates and times is quite robust, but the functions we use to manipulate them are horrible. To fix this, Dr Wickham and his then PhD student Dr Grolemund introduced the lubridate package. 12.1 Creating Date and Time objects To create a Date object, we need to take a string or number that represents a date and tell the computer how to figure out which bits are the year, which are the month, and which are the day. The lubridate package uses the following functions: Common Orders Uncommon Orders ymd() Year Month Day dym() Day Year Month mdy() Month Day Year myd() Month Year Day dmy() Day Month Year ydm() Year Day Month The uncommon orders aren’t likely to be used, but the lubridate package includes them for completeness. Once the order has been specified, the lubridate package will try as many different ways to parse the date that make sense. As a result, so long as the order is consistent, all of the following will work: mdy( &#39;June 26, 1997&#39;, &#39;Jun 26 97&#39;, &#39;6-26-97&#39;, &#39;6-26-1997&#39;, &#39;6/26/97&#39;, &#39;6-26/97&#39; ) ## [1] &quot;1997-06-26&quot; &quot;1997-06-26&quot; &quot;1997-06-26&quot; &quot;1997-06-26&quot; &quot;1997-06-26&quot; ## [6] &quot;1997-06-26&quot; mdy(&#39;June 26, 0097&#39;, &#39;June 26, 97&#39;, &#39;June 26, 68&#39;, &#39;June 26, 69&#39;) ## [1] &quot;0097-06-26&quot; &quot;1997-06-26&quot; &quot;2068-06-26&quot; &quot;1969-06-26&quot; This shows by default if you only specify the year using two digits, lubridate() will try to do something clever. It will default to either a 19XX or 20XX and it picks whichever is the closer date. This illustrates that you should ALWAYS fully specify the year using four digits. The lubridate functions will also accommodate if an integer representation of the date, but it has to have enough digits to uniquely identify the month and day. ymd(20090110) ## [1] &quot;2009-01-10&quot; ymd(2009722) # only one digit for month --- error! ## Warning: All formats failed to parse. No formats found. ## [1] NA ymd(2009116) # this is ambiguous! 1-16 or 11-6? ## Warning: All formats failed to parse. No formats found. ## [1] NA If we want to add a time to a date, we will use a function with the suffix _hm or _hms. Suppose that we want to encode a date and time, for example, the date and time of my wedding ceremony mdy_hm(&#39;Sept 18, 2010 5:30 PM&#39;, &#39;9-18-2010 17:30&#39;) ## [1] NA &quot;2010-09-18 17:30:00 UTC&quot; In the above case, lubridate is having trouble understanding AM/PM differences and it is better to always specify times using 24 hour notation and skip the AM/PM designations. By default, R codes the time of day using as if the event occurred in the UMT time zone (also known as Greenwich Mean Time GMT). To specify a different time zone, use the tz= option. For example: mdy_hm(&#39;9-18-2010 17:30&#39;, tz=&#39;MST&#39;) # Mountain Standard Time ## [1] &quot;2010-09-18 17:30:00 MST&quot; This isn’t bad, but Loveland, Colorado is on MST in the winter and MDT in the summer because of daylight savings time. So to specify the time zone that could switch between standard time and daylight savings time, I should specify tz='US/Mountain' mdy_hm(&#39;9-18-2010 17:30&#39;, tz=&#39;US/Mountain&#39;) # US mountain time ## [1] &quot;2010-09-18 17:30:00 MDT&quot; As Arizonans, we recognize that Arizona is weird and doesn’t use daylight savings time. Fortunately R has a built-in time zone just for us. mdy_hm(&#39;9-18-2010 17:30&#39;, tz=&#39;US/Arizona&#39;) # US Arizona time ## [1] &quot;2010-09-18 17:30:00 MST&quot; R recognizes 582 different time zone locals and you can find these using the function OlsonNames(). To find out more about what these mean you can check out the Wikipedia page on timezones [http://en.wikipedia.org/wiki/List_of_tz_database_time_zones||http://en.wikipedia.org/wiki/List_of_tz_database_time_zones]. 12.2 Extracting information The lubridate package provides many functions for extracting information from the date. Suppose we have defined # Derek&#39;s wedding! x &lt;- mdy_hm(&#39;9-18-2010 17:30&#39;, tz=&#39;US/Mountain&#39;) # US Mountain time Command Ouput Description year(x) 2010 Year month(x) 9 Month day(x) 18 Day hour(x) 17 Hour of the day minute(x) 30 Minute of the hour second(x) 0 Seconds wday(x) 7 Day of the week (Sunday = 1) mday(x) 18 Day of the month yday(x) 261 Day of the year Here we get the output as digits, where September is represented as a 9 and the day of the week is a number between 1-7. To get nicer labels, we can use label=TRUE for some commands. Command Ouput wday(x, label=TRUE) Sat month(x, label=TRUE) Sep All of these functions can also be used to update the value. For example, we could move the day of the wedding from September \\(18^{th}\\) to October \\(18^{th}\\) by changing the month. month(x) &lt;- 10 x ## [1] &quot;2010-10-18 17:30:00 MDT&quot; Often I want to consider some point in time, but need to convert the timezone the date was specified into another timezone. The function with_tz() will take a given moment in time and figure out when that same moment is in another timezone. For example, Game of Thrones is made available on HBO’s streaming service at 9pm on Sunday evenings Eastern time. I need to know when I can start watching it here in Arizona. GoT &lt;- ymd_hm(&#39;2015-4-26 21:00&#39;, tz=&#39;US/Eastern&#39;) with_tz(GoT, tz=&#39;US/Arizona&#39;) ## [1] &quot;2015-04-26 18:00:00 MST&quot; This means that Game of Thrones is available for streaming at 6 pm Arizona time. 12.3 Arithmetic on Dates Once we have two or more Date objects defined, we can perform appropriate mathematical operations. For example, we might want to the know the number of days there are between two dates. Wedding &lt;- ymd(&#39;2010-Sep-18&#39;) Elise &lt;- ymd(&#39;2013-Jan-11&#39;) Childless &lt;- Elise - Wedding Childless ## Time difference of 846 days Because both dates were recorded without the hours or seconds, R defaults to just reporting the difference in number of days. Often I want to add two weeks, or 3 months, or one year to a date. However it is not completely obvious what I mean by “add 1 year”. Do we mean to increment the year number (eg Feb 2, 2011 -&gt; Feb 2, 2012) or do we mean to add 31,536,000 seconds? To get around this, lubridate includes functions of the form dunits() and units() where the “unit” portion could be year, month, week, etc. The “d” prefix will stand for duration when appropriate. x &lt;- ymd(&quot;2011-Feb-21&quot;) x + years(2) # Just add two to the year ## [1] &quot;2013-02-21&quot; x + dyears(2) # Add 2*365 days; 2012 was a leap year ## [1] &quot;2013-02-20&quot; 12.4 Exercises For the following formats for a date, transform them into a date/time object. Which formats can be handled nicely and which are not? The lubridate package has gotten smarter over time and a couple of these used to fail. For September 13 birthday &lt;- c( &#39;September 13, 1978&#39;, &#39;Sept 13, 1978&#39;, &#39;Sep 13, 1978&#39;, &#39;S 13, 1978&#39;, &#39;9-13-78&#39;, &#39;9-13/78&#39;, &#39;9/13/78&#39;) For June 15, 1978 we should have a problem. birthday &lt;- c( &#39;June 13, 1978&#39;, &#39;J 13, 1978&#39;) Suppose you have arranged for a phone call to be at 3 pm on May 8, 2015 at Arizona time. However, the recipient will be in Auckland, NZ. What time will it be there? From this book’s data-raw directory on GitHub, download the Pulliam_Airport_Weather_Station.csv data file. There is a DATE column as well as the Maximum and Minimum temperature. For the last 10 years of data, plot the daily maximum temperature. It turns out there is some interesting periodicity regarding the number of births on particular days of the year. Using the mosaicData package, load the data set Births78 which records the number of children born on each day in the United States in 1978. Because this problem is intended to show how to calculate the information using the date, remove the columns of month, day_of_year, day_of_month and day_of_week. There is already a date column in the data set that is called, appropriately, date. Graph the number of births vs the date with date on the x-axis. What stands out to you? Why do you think we have this trend? To test your assumption, we need to figure out the what day of the week each observation is. Use dplyr::mutate to add a new column named dow that is the day of the week (Monday, Tuesday, etc). This calculation will involve some function in the lubridate package and the date column. Plot the data with the point color being determined by the day of the week variable. "],
["13-graphing-part-ii.html", "Chapter 13 Graphing Part II 13.1 Multi-plots 13.2 Customized Scales 13.3 Theme Elements 13.4 Package ggrepel 13.5 Geographic Maps", " Chapter 13 Graphing Part II library(tidyverse) # loading ggplot2 and dplyr We have already seen how to create many basic graphs using the ggplot2 package. However we haven’t addressed many common scenarios. In this chapter we cover many graphing tasks that occur. 13.1 Multi-plots 13.2 Customized Scales 13.2.1 Color Scales 13.2.2 Setting major &amp; minor ticks 13.2.3 Log Scales 13.3 Theme Elements 13.4 Package ggrepel 13.5 Geographic Maps We often need to graph countries or U.S. States. We might then fill the color of the state or countries by some variable. To do this, we need information about the shape and location of each country within some geographic coordinate system. The easiest system to work from is Latitude (how far north or south of the equator) and Longitude (how far east or west the prime meridian). 13.5.1 Package maps The R package maps is one of the easiest way to draw a country or state map. I tend to use this package first because I can access world and regional maps fairly easily and I don’t have to worry about map projections or coordinate systems or any fancy GIS encoding. Unfortunately it is fairly US specific. Because we might be interested in continents, countries, states/provinces, or counties, in the following discussion we’ll refer to the geographic area of interest as a region. For ggplot2 to interact with GIS type objects, we need a way to convert a GIS database of regions into a data.frame of a bunch of data points about the region’s borders, where each data point is a Lat/Long coordinate and the region and sub-region identifiers. Then, to produce a map, we just draw a path through the data points. For regions like Hawaii’s, which are composed of several non-contiguous areas, we include sub-regions so that the boundary lines don’t jump from island to island. Once we have the data.frame of regions that we are interested in selected, all we need to do is draw polygons in ggplot2. # ggplot2 function to create a data.frame with world level information geo.data &lt;- ggplot2::map_data(&#39;world&#39;) # Using maps::world database. # group: which set of points are contiguous and should be connected # order: what order should the dots be connected # region: The name of the region of interest # subregion: If there are sub-regions with greater region head(geo.data) ## long lat group order region subregion ## 1 -69.89912 12.45200 1 1 Aruba &lt;NA&gt; ## 2 -69.89571 12.42300 1 2 Aruba &lt;NA&gt; ## 3 -69.94219 12.43853 1 3 Aruba &lt;NA&gt; ## 4 -70.00415 12.50049 1 4 Aruba &lt;NA&gt; ## 5 -70.06612 12.54697 1 5 Aruba &lt;NA&gt; ## 6 -70.05088 12.59707 1 6 Aruba &lt;NA&gt; # Now draw a nice world map, ggplot(geo.data, aes(x = long, y = lat, group = group)) + geom_polygon( colour = &quot;white&quot;, fill=&#39;grey50&#39;) The maps package has several data bases of geographical regions. Database Description world Country borders across the globe usa The country boundary of the United States state The state boundaries of the United States county The county boundaries within states of the United States lakes Large fresh water lakes across the world italy Provinces in Italy france Provinces in France nz North and South Islands of New Zealand From within each of these databases, we can select to just return a particular region. So for example, we can get all the information we have about Ghana using the following: ggplot2::map_data(&#39;world&#39;, regions=&#39;ghana&#39;) %&gt;% ggplot( aes(x=long, y=lat, group=group)) + geom_polygon( color = &#39;white&#39;, fill=&#39;grey40&#39;) The maps package also has a data.frame of major US cities. az.cities &lt;- maps::us.cities %&gt;% # Lat/Long of major US cities filter(country.etc == &#39;AZ&#39;) %&gt;% # Only the Arizona Cities mutate(name = str_remove(name, &#39;\\\\sAZ&#39;) ) # remove &#39; AZ&#39; from the city name ggplot2::map_data(&#39;state&#39;, regions=&#39;arizona&#39;) %&gt;% ggplot( aes(x=long, y=lat)) + geom_polygon( aes(group=group), color = &#39;white&#39;, fill=&#39;grey40&#39;) + geom_point(data=az.cities) + ggrepel::geom_text_repel(data=az.cities, aes(label=name)) 13.5.2 Package sf There is a nice tutorial I found. ## Exercises "],
["14-data-reshaping.html", "Chapter 14 Data Reshaping 14.1 cbind &amp; rbind 14.2 tidyr 14.3 Storing Data in Multiple Tables 14.4 Table Joins 14.5 Exercises", " Chapter 14 Data Reshaping # library(tidyr) # for the gather/spread commands # library(dplyr) # for the join stuff library(tidyverse) # dplyr, tidyr, ggplot2, etc. Most of the time, our data is in the form of a data frame and we are interested in exploring the relationships. However most procedures in R expect the data to show up in a ‘long’ format where each row is an observation and each column is a covariate. In practice, the data is often not stored like that and the data comes to us with repeated observations included on a single row. This is often done as a memory saving technique or because there is some structure in the data that makes the ‘wide’ format attractive. As a result, we need a way to convert data from ‘wide’ to ‘long’ and vice-versa. Next we need a way to squish two data frames together. It is often advantagous to store data that would be be repeated seperately in a different table so that a particular piece of information lives in only one location. This makes the data easier to modify, and more likely to maintain consistence. However, this practice requires that, when necessary, we can add information to a table, that might involve a lot of duplicated rows. 14.1 cbind &amp; rbind Base R has two functions for squishing two data frames together, but they assume that the data frames are aligned correctly. The c and r parts of cbind and rbind correspond to if we are pushing columns together or rows together. # Define a tibble using a rowwise layout. df1 &lt;- tribble( ~ID, ~First, 1, &#39;Alice&#39;, 2, &#39;Bob&#39;, 3, &#39;Charlie&#39;) # Define a tibble by columns df2 &lt;- tibble( Last = c(&#39;Anderson&#39;, &#39;Barker&#39;, &#39;Cooper&#39;) ) # Squish the two tibbles together by columns People &lt;- cbind( df1, df2 ) People ## ID First Last ## 1 1 Alice Anderson ## 2 2 Bob Barker ## 3 3 Charlie Cooper Squishing together by rows is easy as well. df3 &lt;- tibble( ID=4, First=&#39;Daniel&#39;, Last=&#39;Davidson&#39; ) People &lt;- rbind( People, df3 ) People ## ID First Last ## 1 1 Alice Anderson ## 2 2 Bob Barker ## 3 3 Charlie Cooper ## 4 4 Daniel Davidson Both cbind and rbind assume that the data frames are appropriatly sized and appropriately arranged. In general, this is annoying to have to worry about and it is safer to write code that relys on joins which will be discussed later in this chapter. 14.2 tidyr There is a common issue with obtaining data with many columns that you wish were organized as rows. For example, I might have data in a grade book that has several homework scores and I’d like to produce a nice graph that has assignment number on the x-axis and score on the y-axis. Unfortunately this is incredibly hard to do when the data is arranged in the following way: grade.book &lt;- rbind( data.frame(name=&#39;Alison&#39;, HW.1=8, HW.2=5, HW.3=8, HW.4=4), data.frame(name=&#39;Brandon&#39;, HW.1=5, HW.2=3, HW.3=6, HW.4=9), data.frame(name=&#39;Charles&#39;, HW.1=9, HW.2=7, HW.3=9, HW.4=10)) grade.book ## name HW.1 HW.2 HW.3 HW.4 ## 1 Alison 8 5 8 4 ## 2 Brandon 5 3 6 9 ## 3 Charles 9 7 9 10 What we want to do is turn this data frame from a wide data frame into a long data frame. In MS Excel this is called pivoting. Essentially I’d like to create a data frame with three columns: name, assignment, and score. That is to say that each homework datum really has three pieces of information: who it came from, which homework it was, and what the score was. It doesn’t conceptually matter if I store it as 3 rows of 4 columns or 12 rows so long as there is a way to identify how a student scored on a particular homework. So we want to reshape the HW1 to HW4 columns into two columns (assignment and score). This package was built by the same people that created dplyr and ggplot2 and there is a nice introduction at: [http://blog.rstudio.org/2014/07/22/introducing-tidyr/] 14.2.1 Verbs As with the dplyr package, there are two main verbs to remember: gather - Gather multiple columns that are related into two columns that contain the original column name and the value. For example for columns HW1, HW2, HW3 we would gather them into two column HomeworkNumber and Score. In this case, we refer to HomeworkNumber as the key column and Score as the value column. So for any key:value pair you know everything you need. spread - This is the opposite of gather. This takes a key column (or columns) and a results column and forms a new column for each level of the key column(s). # first we gather the score columns into columns we&#39;ll name Assesment and Score tidy.scores &lt;- grade.book %&gt;% gather( key=Homework, # What should I call the key column value=Score, # What should I call the values column HW.1:HW.4) # which columns to apply this to tidy.scores ## name Homework Score ## 1 Alison HW.1 8 ## 2 Brandon HW.1 5 ## 3 Charles HW.1 9 ## 4 Alison HW.2 5 ## 5 Brandon HW.2 3 ## 6 Charles HW.2 7 ## 7 Alison HW.3 8 ## 8 Brandon HW.3 6 ## 9 Charles HW.3 9 ## 10 Alison HW.4 4 ## 11 Brandon HW.4 9 ## 12 Charles HW.4 10 To spread the key:value pairs out into a matrix, we use the spread() command. # Turn the Assessment/Score pair of columns into one column per factor level of Assessment tidy.scores %&gt;% spread( key=Homework, value=Score ) ## name HW.1 HW.2 HW.3 HW.4 ## 1 Alison 8 5 8 4 ## 2 Brandon 5 3 6 9 ## 3 Charles 9 7 9 10 One way to keep straight which is the key column is that the key is the category, while value is the numerical value or response. 14.3 Storing Data in Multiple Tables In many datasets it is common to store data across multiple tables, usually with the goal of minimizing memory used as well as providing minimal duplication of information so any change that must be made is only made in a single place. To see the rational why we might do this, consider building a data set of blood donations by a variety of donors across several years. For each blood donation, we will perform some assay and measure certain qualities about the blood and the patients health at the donation. ## Donor Hemoglobin Systolic Diastolic ## 1 Derek 17.4 121 80 ## 2 Jeff 16.9 145 101 But now we have to ask, what happens when we have a donor that has given blood multiple times? In this case we should just have multiple rows per person along with a date column to uniquely identify a particular donation. donations ## Donor Date Hemoglobin Systolic Diastolic ## 1 Derek 2017-04-14 17.4 120 79 ## 2 Derek 2017-06-20 16.5 121 80 ## 3 Jeff 2017-08-14 16.9 145 101 I would like to include additional information about the donor where that infomation doesn’t change overtime. For example we might want to have information about the donar’s birthdate, sex, blood type. However, I don’t want that information in every single donation line. Otherwise if I mistype a birthday and have to correct it, I would have to correct it everywhere. For information about the donor, should live in a donors table, while information about a particular donation should live in the donations table. Furthermore, there are many Jeffs and Dereks in the world and to maintain a unique identifier (without using Social Security numbers) I will just create a Donor_ID code that will uniquely identify a person. Similarly I will create a Donation_ID that will uniquely identify a dontation. donors ## Donor_ID F_Name L_Name B_Type Birth Street City State ## 1 Donor_1 Derek Lee O+ 1976-09-17 7392 Willard Flagstaff AZ ## 2 Donor_2 Jeff Smith A 1974-06-23 873 Vine Bozeman MT donations ## Donation_ID Donor_ID Date Hemoglobin Systolic Diastolic ## 1 Donation_1 Donor_1 2017-04-14 17.4 120 79 ## 2 Donation_2 Donor_1 2017-06-20 16.5 121 80 ## 3 Donation_3 Donor_2 2017-08-14 16.9 145 101 If we have a new donor walk in and give blood, then we’ll have to create a new entry in the donors table as well as a new entry in the donations table. If an experienced donor gives again, we just have to create a new entry in the donations table. donors ## Donor_ID F_Name L_Name B_Type Birth Street City State ## 1 Donor_1 Derek Lee O+ 1976-09-17 7392 Willard Flagstaff AZ ## 2 Donor_2 Jeff Smith A 1974-06-23 873 Vine Bozeman MT ## 3 Donor_3 Aubrey Lee O+ 1980-12-15 7392 Willard Flagstaff AZ donations ## Donation_ID Donor_ID Date Hemoglobin Systolic Diastolic ## 1 Donation_1 Donor_1 2017-04-14 17.4 120 79 ## 2 Donation_2 Donor_1 2017-06-20 16.5 121 80 ## 3 Donation_3 Donor_2 2017-08-14 16.9 145 101 ## 4 Donation_4 Donor_1 2017-08-26 17.6 120 79 ## 5 Donation_5 Donor_3 2017-08-26 16.1 137 90 This data storage set-up might be flexible enough for us. However what happens if somebody moves? If we don’t want to keep the historical information, then we could just change the person’s Street_Address, City, and State values. If we do want to keep that, then we could create donor_addresses table that contains a Start_Date and End_Date that denotes the period of time that the address was valid. donor_addresses ## Donor_ID Street City State Start_Date End_Date ## 1 Donor_1 346 Treeline Pullman WA 2015-01-26 2016-06-27 ## 2 Donor_1 645 Main Flagstsff AZ 2016-06-28 2017-07-02 ## 3 Donor_1 7392 Willard Flagstaff AZ 2017-07-03 &lt;NA&gt; ## 4 Donor_2 873 Vine Bozeman MT 2015-03-17 &lt;NA&gt; ## 5 Donor_3 7392 Willard Flagstaff AZ 2017-06-01 &lt;NA&gt; Given this data structure, we can now easily create new donations as well as store donor information. In the event that we need to change something about a donor, there is only one place to make that change. However, having data spread across multiple tables is challenging because I often want that information squished back together. For example, the blood donations services might want to find all ‘O’ or ‘O+’ donors in Flagstaff and their current mailing address and send them some notification about blood supplies being low. So we need someway to join the donors and donor_addresses tables together in a sensible manner. 14.4 Table Joins Often we need to squish together two data frames but they do not have the same number of rows. Consider the case where we have a data frame of observations of fish and a separate data frame that contains information about lake (perhaps surface area, max depth, pH, etc). I want to store them as two separate tables so that when I have to record a lake level observation, I only input it one place. This decreases the chance that I make a copy/paste error. To illustrate the different types of table joins, we’ll consider two different tables. # tibbles are just data.frames that print a bit nicer and don&#39;t automatically # convert character columns into factors. They behave a bit more consistently # in a wide variety of situations compared to data.frames. Fish.Data &lt;- tibble( Lake_ID = c(&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;B&#39;,&#39;C&#39;,&#39;C&#39;), Fish.Weight=rnorm(6, mean=260, sd=25) ) # make up some data Lake.Data &lt;- tibble( Lake_ID = c( &#39;B&#39;,&#39;C&#39;,&#39;D&#39;), Lake_Name = c(&#39;Lake Elaine&#39;, &#39;Mormon Lake&#39;, &#39;Lake Mary&#39;), pH=c(6.5, 6.3, 6.1), area = c(40, 210, 240), avg_depth = c(8, 10, 38)) Fish.Data ## # A tibble: 6 x 2 ## Lake_ID Fish.Weight ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 257. ## 2 A 227. ## 3 B 259. ## 4 B 229. ## 5 C 249. ## 6 C 296. Lake.Data ## # A tibble: 3 x 5 ## Lake_ID Lake_Name pH area avg_depth ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 B Lake Elaine 6.5 40 8 ## 2 C Mormon Lake 6.3 210 10 ## 3 D Lake Mary 6.1 240 38 Notice that each of these tables has a column labled Lake_ID. When we join these two tables, the row that describes lake A should be duplicated for each row in the Fish.Data that corresponds with fish caught from lake A. full_join(Fish.Data, Lake.Data) ## Joining, by = &quot;Lake_ID&quot; ## # A tibble: 7 x 6 ## Lake_ID Fish.Weight Lake_Name pH area avg_depth ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 257. &lt;NA&gt; NA NA NA ## 2 A 227. &lt;NA&gt; NA NA NA ## 3 B 259. Lake Elaine 6.5 40 8 ## 4 B 229. Lake Elaine 6.5 40 8 ## 5 C 249. Mormon Lake 6.3 210 10 ## 6 C 296. Mormon Lake 6.3 210 10 ## 7 D NA Lake Mary 6.1 240 38 Notice that because we didn’t have any fish caught in lake D and we don’t have any Lake information about lake A, when we join these two tables, we end up introducing missing observations into the resulting data frame. The other types of joins govern the behavor or these missing data. left_join(A, B) For each row in A, match with a row in B, but don’t create any more rows than what was already in A. inner_join(A,B) Only match row values where both data frames have a value. left_join(Fish.Data, Lake.Data) ## Joining, by = &quot;Lake_ID&quot; ## # A tibble: 6 x 6 ## Lake_ID Fish.Weight Lake_Name pH area avg_depth ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 A 257. &lt;NA&gt; NA NA NA ## 2 A 227. &lt;NA&gt; NA NA NA ## 3 B 259. Lake Elaine 6.5 40 8 ## 4 B 229. Lake Elaine 6.5 40 8 ## 5 C 249. Mormon Lake 6.3 210 10 ## 6 C 296. Mormon Lake 6.3 210 10 inner_join(Fish.Data, Lake.Data) ## Joining, by = &quot;Lake_ID&quot; ## # A tibble: 4 x 6 ## Lake_ID Fish.Weight Lake_Name pH area avg_depth ## &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 B 259. Lake Elaine 6.5 40 8 ## 2 B 229. Lake Elaine 6.5 40 8 ## 3 C 249. Mormon Lake 6.3 210 10 ## 4 C 296. Mormon Lake 6.3 210 10 The above examples assumed that the column used to join the two tables was named the same in both tables. This is good practice to try to do, but sometimes you have to work with data where that isn’t the case. In that situation you can use the by=c(&quot;ColName.A&quot;=&quot;ColName.B&quot;) syntax where ColName.A represents the name of the column in the first data frame and ColName.B is the equivalent column in the second data frame. Finally, the combination of gather and join allows me to do some very complex calculations across many columns of a data set. For example, I might gather up a set of columns, calculate some summary statistics, and then join the result back to original data set. grade.book %&gt;% group_by(name) %&gt;% gather( key=Homework, value=Score, HW.1:HW.4 ) %&gt;% summarise( HW.avg = mean(Score) ) %&gt;% left_join( grade.book, . ) ## Joining, by = &quot;name&quot; ## name HW.1 HW.2 HW.3 HW.4 HW.avg ## 1 Alison 8 5 8 4 6.25 ## 2 Brandon 5 3 6 9 5.75 ## 3 Charles 9 7 9 10 8.75 14.5 Exercises Suppose we are given information about the maximum daily temperature from a weather station in Flagstaff, AZ. The file is available at the GitHub site that this book is hosted on. FlagTemp &lt;- read.csv( &#39;https://github.com/dereksonderegger/570L/raw/master/data-raw/FlagMaxTemp.csv&#39;, header=TRUE, sep=&#39;,&#39;) This file is in a wide format, where each row represents a month and the columns X1, X2, …, X31 represent the day of the month the observation was made. Convert data set to the long format where the data has only four columns: Year, Month, Day, Tmax. Calculate the average monthly maximum temperature for each Month in the dataset (So there will be 365 mean maximum temperatures). You’ll probably have some issues taking the mean because there are a number of values that are missing and by default R refuses to take means and sums when there is missing data. The argument na.rm=TRUE to mean() allows you to force R to remove the missing observations before calculating the mean. Alternatively at some point in your workflow, you could remove rows that include a missing values using dplyr::drop_na. Convert the average month maximums back to a wide data format where each line represents a year and there are 12 columns of temperature data (one for each month) along with a column for the year. There will be a couple of months that still have missing data because the weather station was out of commision for those months and there was NO data for the entire month. A common task is to take a set of data that has multiple categorical variables and create a table of the number of cases for each combination. An introductory statistics textbook contains a dataset summarizing student surveys from several sections of an intro class. The two variables of interest for us are Gender and Year which are the students gender and year in college. Download the dataset and correctly order the Year variable using the following: Survey &lt;- read.csv(&#39;http://www.lock5stat.com/datasets/StudentSurvey.csv&#39;, na.strings=c(&#39;&#39;,&#39; &#39;)) Using some combination of dplyr functions, produce a data set with eight rows that contains the number of responses for each gender:year combination. Make sure your table orders the Year variable in the correct order of First Year, Sophmore, Junior, and then Senior. You might want to look at the following functions: dplyr::count and dplyr::drop_na. Using tidyr commands, produce a table of the number of responses in the following form: Gender First Year Sophmore Junior Senior Female Male We often are given data in a table format that is easy for a human to parse, but annoying a program. In the following example we have data of US government expenditures from 1962 to 2015. (I downloaded this data from https://obamawhitehouse.archives.gov/omb/budget/Historicals (Table 3.2) on Sept 22, 2019.) Our goal is to end up with a data frame with columns for Function, Subfunction, Year, and Amount. We’ll ignore the “On-budget” and “Off-budget” distinction. Download the data file, inspect it, and read in the data using the readxl package. Rename the Function or subfunction column to Department. Remove any row with Total, Subtotal, On-budget or Off-budget. Create a new column for ID_number and parse the Function column for it. If all (or just 2015?) the year values are missing, then the Department corresponds to Function name. Otherwise Department corresponds to the Subfunction. Perhaps the easiest way to create the Function and Subfunction columns is to write a for loop that steps through the data row-by-row. Alternatively, the tidyr::fill function might be useful. Reshape the data into four columns for Function, Subfunction, Year, and Amount. Replace any Amount value of .......... with an NA. Make a bar chart that compares spending for National Defense, Health, Medicare, Income Security, and Social Security for the years 2001 through 2015. Notice you’ll have to sum up the subfunctions within each function. Data table joins are extremely common because effective database design almost always involves having multiple tables for different types of objects. To illustrate both the table joins and the usefulness of multiple tables we will develop a set of data frames that will represent a credit card company’s customer data base. We will have tables for Customers, Retailers, Cards, and Transactions. Below is code that will create and populate these tables. Customers &lt;- tribble( ~PersonID, ~Name, ~Street, ~City, ~State, 1, &#39;Derek Sonderegger&#39;, &#39;231 River Run&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;, 2, &#39;Aubrey Sonderegger&#39;, &#39;231 River Run&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;, 3, &#39;Robert Buscaglia&#39;, &#39;754 Forest Heights&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;, 4, &#39;Roy St Laurent&#39;, &#39;845 Elk View&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;) Retailers &lt;- tribble( ~RetailID, ~Name, ~Street, ~City, ~State, 1, &#39;Kickstand Kafe&#39;, &#39;719 N Humphreys St&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;, 2, &#39;MartAnnes&#39;, &#39;112 E Route 66&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39;, 3, &#39;REI&#39;, &#39;323 S Windsor Ln&#39;, &#39;Flagstaff&#39;, &#39;AZ&#39; ) Cards &lt;- tribble( ~CardID, ~PersonID, ~Issue_Date, ~Exp_Date, &#39;9876768717278723&#39;, 1, &#39;2019-9-20&#39;, &#39;2022-9-20&#39;, &#39;5628927579821287&#39;, 2, &#39;2019-9-20&#39;, &#39;2022-9-20&#39;, &#39;7295825498122734&#39;, 3, &#39;2019-9-28&#39;, &#39;2022-9-28&#39;, &#39;8723768965231926&#39;, 4, &#39;2019-9-30&#39;, &#39;2022-9-30&#39; ) Transactions &lt;- tribble( ~CardID, ~RetailID, ~Date, ~Amount, &#39;9876768717278723&#39;, 1, &#39;2019-10-1&#39;, 5.68, &#39;7295825498122734&#39;, 2, &#39;2019-10-1&#39;, 25.67, &#39;9876768717278723&#39;, 1, &#39;2019-10-2&#39;, 5.68, &#39;9876768717278723&#39;, 1, &#39;2019-10-2&#39;, 9.23, &#39;5628927579821287&#39;, 3, &#39;2019-10-5&#39;, 68.54, &#39;7295825498122734&#39;, 2, &#39;2019-10-5&#39;, 31.84, &#39;8723768965231926&#39;, 2, &#39;2019-10-10&#39;, 42.83) Cards &lt;- Cards %&gt;% mutate( Issue_Date = lubridate::ymd(Issue_Date), Exp_Date = lubridate::ymd(Exp_Date) ) Transactions &lt;- Transactions %&gt;% mutate( Date = lubridate::ymd(Date)) Create a table that gives the credit card statent for Derek. It should give all the transactions, the amounts, and the store name. Write your code as if the only initial information you have is the customer’s name. Aubrey has lost her credit card on Oct 15, 2019. Close her credit card and issue her a new credit card in the Cards table. Aubrey is using her card at Kickstand Kafe on Oct 16, 2019 for coffee with a charge of $4.98. Generate a new transaction for this action. On Oct 17, 2019, some nefarious person is trying to use her credit card at REI. Make sure your code in part (c) first checks to see if the credit card is active before creating a new transaction. Using the same code, verify that this transaction is denied. Generate a table that gives the credit card statement for Aubrey. It should give all the transactions, amounts, and retailer name for both credit cards she had during this period. The package nycflights13 contains information about all the flights that arrived in or left from New York City in 2013. This package contains five data tables, but there are three data tables we will work with. The data table flights gives information about a particular flight, airports gives information about a particular airport, and airlines gives information about each airline. Create a table of all the flights on February 14th by Virgin America that has columns for the carrier, destination, departure time, and flight duration. Join this table with the airports information for the destination. Notice that because the column for the destination airport code doesn’t match up between flights and airports, you’ll have to use the by=c(&quot;TableA.Col&quot;=&quot;TableB.Col&quot;) argument where you insert the correct names for TableA.Col and TableB.Col. "],
["15-data-scraping.html", "Chapter 15 Data Scraping 15.1 Web Pages 15.2 Scraping .pdf files 15.3 Exercises", " Chapter 15 Data Scraping library(tidyverse) library(rvest) # rvest is not loaded in the tidyverse Metapackage Getting data into R often involves accessing data that is available through non-convenient formats such as web pages or .pdf files. Fortunately those formats still have structure and we can import data from those sources. However to do this, we have to understand a little bit about those file formats. 15.1 Web Pages Posting information on the web is incredibly common. As we first use google to find answers to our problems, it is inevitable that we’ll want to grab at least some of that information and import it as data into R. There are several ways to go about this: Human Copy/Paste - Sometimes it is easy to copy/paste the information into a spreadsheet. This works for small datasets, but sometimes the HTML markup attributes get passed along and this suddenly becomes very cumbersome for more than a small amount of data. Furthermore, if the data is updated, we would have to redo all of the work instead of just re-running or tweaking a script. Download the page, parse the HTML, and select the information you want. The difficulty here is knowing what you want in the raw HTML tags. Knowing how web pages are generated is certainly extremely helpful in this endeavor, but isn’t absolutely necessary. It is sufficient to know that HTML has open and closing tags for things like tables and lists. # Example of HTML code that would generate a table # Table Rows begin and end with &lt;tr&gt; and &lt;/tr&gt; # Table Data begin and end with &lt;td&gt; and &lt;/td&gt; # Table Headers begin and end with &lt;th&gt; and &lt;/th&gt; &lt;table style=&quot;width:100%&quot;&gt; &lt;tr&gt; &lt;th&gt;Firstname&lt;/th&gt; &lt;th&gt;Lastname&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Derek&lt;/td&gt; &lt;td&gt;Sonderegger&lt;/td&gt; &lt;td&gt;43&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Aubrey&lt;/td&gt; &lt;td&gt;Sonderegger&lt;/td&gt; &lt;td&gt;39&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; # Example of an unordered List, which starts and ends with &lt;ul&gt; and &lt;/ul&gt; # Each list item is enclosed by &lt;li&gt; &lt;/li&gt; &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; Given this extremely clear structure it shouldn’t be too hard to grab tables and/or lists from a web page. However HTML has a heirarchical structure so that tables could be nested in lists. In order to control the way the page looks, there is often a lot of nesting. For example, we might be in a split pane page that has a side bar, and then a block that centers everything, and then some style blocks that control fonts and colors. Add to this, the need for modern web pages to display well on both mobile devices as well as desktops and the raw HTML typically is extremely complicated. In summary the workflow for scraping a web page will be: Find the webpage you want to pull information from. Download the html file Parse it for tables or lists (this step could get ugly!) Convert the HTML text or table into R data objects. Hadley Wickham wrote a package to address the need for web scraping functionality and it happily works with the usual magrittr pipes. The package rvest is intended to harvest data from the web and make working with html pages relatively simple. 15.1.1 Example Wikipedia Table Recently I needed to get information about U.S. state population sizes. I did a quick googling and found a Wikipedia page that has the information that I wanted. url = &#39;https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States_by_population&#39; # Download the web page and save it. I like to do this within a single R Chunk # so that I don&#39;t keep downloading a page repeatedly while I am fine tuning # the subsequent data wrangling steps. page &lt;- read_html(url) # Once the page is downloaded, we need to figure out which table to work with. # There are 5 tables on the page. page %&gt;% html_nodes(&#39;table&#39;) ## {xml_nodeset (5)} ## [1] &lt;table class=&quot;wikitable sortable&quot; style=&quot;width:100%; text-align:cent ... ## [2] &lt;table class=&quot;wikitable&quot;&gt;&lt;tbody&gt;\\n&lt;tr&gt;&lt;th style=&quot;text-align: left;&quot;&gt; ... ## [3] &lt;table class=&quot;wikitable sortable&quot; style=&quot;text-align: right;&quot;&gt;\\n&lt;capt ... ## [4] &lt;table class=&quot;nowraplinks hlist mw-collapsible autocollapse navbox-i ... ## [5] &lt;table class=&quot;nowraplinks hlist mw-collapsible mw-collapsed navbox-i ... With five tables on the page, I need to go through each table individually and decide if it is the one that I want. To do this, we’ll take each table and convert it into a data.frame and view it to see what information it contains. State_Pop &lt;- page %&gt;% html_nodes(&#39;table&#39;) %&gt;% .[[1]] %&gt;% # Grab the first table and html_table() # convert it from HTML into a data.frame # To view this table, we could use View() or print out just the first few # rows and columns. Converting it to a tibble makes the printing turn out nice. State_Pop %&gt;% as_tibble() ## # A tibble: 60 x 12 ## `Rank in the fi… `Rank in states… Name `Population est… ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 1 Cali… 39,557,045 ## 2 2 2 Texas 28,701,845 ## 3 3 4 Flor… 21,299,325 ## 4 4 3 New … 19,542,209 ## 5 5 6 Penn… 12,807,060 ## 6 6 5 Illi… 12,741,080 ## 7 7 7 Ohio 11,689,442 ## 8 8 9 Geor… 10,519,475 ## 9 9 10 Nort… 10,383,620 ## 10 10 8 Mich… 9,995,915 ## # … with 50 more rows, and 8 more variables: `Census population, April 1, ## # 2010[6]` &lt;chr&gt;, `Percent change, 2010–2018[note 1]` &lt;chr&gt;, `Absolute ## # change, 2010-2018` &lt;chr&gt;, `Total seats in the U.S. House of ## # Representatives, 2013–2023` &lt;chr&gt;, `Estimated population per electoral ## # vote, 2018[note 2]` &lt;chr&gt;, `Estimated population per House seat, ## # 2018` &lt;chr&gt;, `Census population per House seat, 2010` &lt;chr&gt;, `Percent ## # of the total U.S. population, 2018[note 3]` &lt;chr&gt; It turns out that the first table on the page is the one that I want. Now we need to just do a little bit of clean up by renaming columns, and turning the population values from character strings into numbers. To do that, we’ll have to get rid of all those commas. Also, the rows for the U.S. territories have text that was part of the footnotes. So there are [7], [8], [9], and [10] values in the character strings. We need to remove those as well. State_Pop &lt;- page %&gt;% html_nodes(&#39;table&#39;) %&gt;% .[[1]] %&gt;% # First table on the page html_table() %&gt;% # as a data.frame rename(Population2018 = `Population estimate, July 1, 2018[5]`, Population2010 = `Census population, April 1, 2010[6]`) %&gt;% select(Name, Population2018, Population2010) %&gt;% mutate_at( vars(matches(&#39;Pop&#39;)), str_remove_all, &#39;,&#39;) %&gt;% # remove all commas mutate_at( vars(matches(&#39;Pop&#39;)), str_remove, &#39;\\\\[[0-9]+\\\\]&#39;) %&gt;% # remove [7] stuff mutate_at( vars( matches(&#39;Pop&#39;)), as.numeric) # convert to numbers And just to show off the data we’ve just imported from Wikipedia, we’ll make a nice graph. State_Pop %&gt;% filter( !(Name %in% c(&#39;Contiguous United States&#39;, &#39;The fifty states&#39;,&#39;Fifty states + D.C.&#39;, &#39;Total U.S. (including D.C. and territories)&#39;) ) ) %&gt;% mutate( Percent_Change = (Population2018 - Population2010)/Population2010 ) %&gt;% mutate( Name = fct_reorder(Name, Percent_Change) ) %&gt;% ggplot( aes(x=Name, y=Percent_Change) ) + geom_col( ) + labs(x=NULL, y=&#39;% Change&#39;, title=&#39;State Population growth 2010-2018&#39;) + coord_flip() 15.1.2 Lists Unfortunately, we don’t always want to get information from a webpage that is nicely organized into a table. Suppose we want to gather the most recent threads on Digg. We could sift through the HTML tags to find something that will match, but that will be challenging. Instead we will use a CSS selector named SelectorGadget. Install the bookmarklet by dragging this bookmarklet up to your browsers bookmark bar. When you are at the site you are interested in, just click on the bookmarklet to engage the CSS engine. Click on something you want to capture. This will highlight a whole bunch of things that match the HTML tag listed at the bottom of the screen. Select or deselect items by clicking on them and the search string used to refine the selection will be updated. Once you are happy with the items being selected, copy the HTML node selector. url &lt;- &#39;http://digg.com&#39; page &lt;- read_html(url) # Once the page is downloaded, we use the SelectorGadget Parse string # To just give the headlines, we&#39;ll use html_text() HeadLines &lt;- page %&gt;% html_nodes(&#39;.headline a&#39;) %&gt;% # Grab just the headlines html_text() # Convert the &lt;a&gt;Text&lt;/a&gt; to just Text HeadLines %&gt;% head() ## [1] &quot;\\nThe Last True Sticker Factory In America\\n&quot; ## [2] &quot;\\nThe 20 Firms Behind One Third Of All Carbon Emissions\\n&quot; ## [3] &quot;\\nGuy Goes On Cliff, Thinking The Waves Wouldn’t Touch Him. Guy Was Wrong\\n&quot; ## [4] &quot;\\nEasily Monitor And Cancel Subscriptions With This App\\n&quot; ## [5] &quot;\\nFerrari Tries To Overtake Car On Wet Road, Fails, Um, Spectacularly\\n&quot; ## [6] &quot;\\nStuffed With Sockeye Salmon, ‘Holly’ Wins ‘Fat Bear Week’ Heavyweight Title\\n&quot; # Each headline is also a link. I might want to harvest those as well Links &lt;- page %&gt;% html_nodes(&#39;.headline a&#39;) %&gt;% html_attr(&#39;href&#39;) Links %&gt;% head() ## [1] &quot;https://onezero.medium.com/the-last-true-sticker-factory-in-america-69e42f7e97e4?utm_source=digg&quot; ## [2] &quot;https://www.theguardian.com/environment/2019/oct/09/revealed-20-firms-third-carbon-emissions?utm_source=digg&quot; ## [3] &quot;/video/man-hit-by-wave-on-cliff-iceland-beach&quot; ## [4] &quot;//srv.buysellads.com/ads/click/x/GTND42QUCTSDE23MC6Y4YKQMCAYD623NC6SI4Z3JCWSITKJNCYBI6KQKC6BI5K3NCWYI6K3EHJNCLSIZ?utm_source=digg&quot; ## [5] &quot;/2019/ferrari-tries-to-overtake-car-on-wet-road&quot; ## [6] &quot;https://www.npr.org/2019/10/09/768475870/stuffed-with-sockeye-salmon-holly-wins-fat-bear-week-heavyweight-title?utm_source=digg&quot; 15.2 Scraping .pdf files PDF documents can either be created with software that produce text that is readable, or it can be scanned and everything is effectively an image. The work flow presented in this section assumes that the text is readable as text and is not an image. 15.3 Exercises At the Insurance Institute for Highway Safety, they have data about human fatalities in vehicle crashes. From this web page, import the data from the Fatal Crash Totals data table and produce a bar graph gives the number of deaths per 100,000 individuals. From the same IIHS website, import the data about seat belt use. Join the Fatality data with the seat belt use and make a scatter plot of seat belt use vs number of fatalities per 100,000 people. From the NAU sub-reddit, extract the most recent threads. "],
["16-r-packages.html", "Chapter 16 R Packages 16.1 Introduction 16.2 Package Structure 16.3 Documenting 16.4 The DESCRIPTION file 16.5 Sharing your Package 16.6 Exercises", " Chapter 16 R Packages 16.1 Introduction R packages are documented and consistent format for storing data, functions, documentation, and analysis. We use a consistent format so that other researchers (or ourselves in six months) know exactly where the raw data should be, where to find any functions that are written, and document the data cleaning process. In principle, all of these steps could be accomplished by a single data file and a single analysis Rmarkdown file. However as projects get larger in scope, the number of data files, the complexity of data cleaning, and the number of people working with the data will grow. With more complexity, the need to impose order on it becomes critical. Even if the project is small, organizing my work into a package structure provides a benefit. First, it forces me to keep my data wrangling code organized and encourages documenting any functions I create. Second, by separating the data wrangling step code from the analysis, I think more deeply about verification and initial exploration to understand how best to store the data. Finally, because all my subsequent analysis will depend on the same tidy dataset, I make few mistakes where I cleaned the data correctly in one analysis, but forgot a step in another analysis. I recommend using an R package for any analysis more complicated than a homework assignment because the start-up is relatively simple and if the project grows, you’ll appreciate that you started it in an organized fashion. 16.1.1 Useful packages and books There are several packages that make life easier. Package Description devtools Tools by Hadley, for Hadley (and the rest of us). roxygen2 A coherent documentation syntax testthat Quality Assurance tools usethis Automates repetitive tasks that arise during project setup and development, both for R packages and non-package projects. Hadley Wickham has written a book on R packages that gives a lot more information than I’m giving here. The book is available online. 16.2 Package Structure 16.2.1 Minimal files and directories File/Directory Description DESCRIPTION A file describing your package. You should edit this at some point. NAMESPACE A file that lists all the functions and datasets available to users after loading the package. You should not edit this by hand. .Rbuildignore A list of files that shouldn’t be included when the package is built. R/ This directory contains documentation files for datasets. It also contains the R code and documention for functions you create. I generally recommend one documentation file for each dataset, and one file for each function, although if you have several related functions, you might keep them in the same file. This directory can be empty, but it does have to exist. man/ This contains the documentation (manual) files generated by roxygen2. You should not edit these as they will be rebuilt from the source R code in the R/ directory. 16.2.2 Optional Files and Directories File/Directory Description data/ A directory of datasets. Each file should be an .RData or .Rda file created by the save() containing a single object (with the same names as the file). Anything in this directory will be loaded and accessible to the user when the package is loaded. While it isn’t necessary for this directory to exist, it often does. data-raw/ A directory where we store data files that are not .RData format. Usually these are .csv or .xls files. Typically I’ll have R scripts in this directory that read in raw data, do whatever data wrangling and cleaning that needs to be done, and saves the result in the data/ directory. Obnoxiously the documentation for the dataset does not live in this directory, but rather in the R/ directory. docs/ A directory where any Rmarkdown analysis files that are especially time consuming and should not be executed each time the package is built. When I build a package for a data-analysis project, the reports I create go into this directory. vignettes/ A directory where Rmarkdown files should go that introduce how to use the package. When a package is built, then Rmarkdown files in this directory will also be rebuilt. tests/ A directory for code used for package testing functions you’ve written. inst/ Miscellaneous stuff. In particular inst/extdata/ is where you might put data that is not in .RData format (Excel files and such) but you want it available to the users. Anything in the inst/extdata will be available to to user via system.file('file.xls',package='MyAwesomePackage') src/ A directory where C/C++, Fortran, Python, etc source code is stored. exec/ A directory where executables you might have created from the source code should go. 16.3 Documenting The man/ directory is where the final documentation exists, but the format that was initially established is quite unwieldy. To address this, the roxygen2 package uses a more robust and modern syntax and keeps the function documentation with the actual code in the R\\ directory. The results in a process where we write the documentation in files in the R/ directory and then run a roxygen2 command to build the actual documentation files in the man/ directory. To run this, use the Build tab and then More -&gt; Document. Hadley Wickham has a more complete discussion of package documentation in a vignette for roxygen2. If/when the information in this chapter seems insufficient, that should be your next resource. The documentation information is built in comments and so documentation lines always start with a #'. For both datasets and functions, the first couple of lines give the short title and description. #&#39; A short title #&#39; #&#39; A longer paragraph that describes the context of the dataset/function and #&#39; discusses important aspects that will be necessary for somebody first seeing #&#39; the data/function to know about. Any text in these initial paragraphs will be #&#39; in the description section of the documentation file. #&#39; 16.3.1 Dataset Documentation Dataset documentation should contain both general information about the context of the data as well as detailed information about the data columns. Finally the documentation should also include information about where the data came from, if it is available. The title and description are given in the first paragraphs of the description, but the format and source need some indication starting the sections. #&#39; @format A data frame with XXX observations with ZZ columns. #&#39; \\describe{ #&#39; \\item{Column1}{Description of column 1, including units if appropriate} #&#39; \\item{Column2}{Description of column 2, including units if appropriate} #&#39; } There are a few other documentation sections that can be filled in. They will all be introduced using @Section notation. #&#39; @source This describes where the data came from #&#39; @references If we need to cite some book or journal article. 16.3.2 Documenting Functions Functions that you want other people to use need to be documentated. In particular, we need a general description of what the function does, a list of all function arguments and what they do, and what type of object the function returns. Finally, it is nice to have some examples that demonstrate how the function can be used. #&#39; Sum two numeric objects. #&#39; #&#39; Because this is a very simple function, my explanation is short. These #&#39; paragraphs should explain everything you need to know. #&#39; #&#39; This is still in the description part of the documentation and and it #&#39; will be until we see something that indicates a new section. #&#39; #&#39; @param a A real number #&#39; @param b A real number #&#39; @return The sum of \\code{a} and \\code{b} #&#39; @examples #&#39; sum(12,5) #&#39; sum(4,-2) #&#39; @export my.sum &lt;- function( a, b ){ return( a + b ) } Each of the sections is self explanatory except for the @export. The purpose of this is to indicate that this function should be available to any user of the package. If a function is not exported, then it is available only to functions within the package. This can be convenient if there are multiple functions that help with the analysis but you don’t want the user to see them because it is too much work to explain that they shouldn’t use it Other regions that you might use: * @seealso allows you to point to other resources + on the web \\url{http://www.r-project.org} + in your package \\code{\\link{hello}} + in another package \\code{\\link[package]{function}} * @aliases alias_1 alias_2 ... Other topics that when searched for will point to this documentation * @author This isn’t necessary if the author is the same as the package author. * @references This is a text area to point to the literature. A complete list is available via names(roxygen2:::default_tags()) ## [1] &quot;evalNamespace&quot; &quot;export&quot; &quot;exportClass&quot; ## [4] &quot;exportMethod&quot; &quot;exportPattern&quot; &quot;import&quot; ## [7] &quot;importClassesFrom&quot; &quot;importFrom&quot; &quot;importMethodsFrom&quot; ## [10] &quot;rawNamespace&quot; &quot;S3method&quot; &quot;useDynLib&quot; ## [13] &quot;aliases&quot; &quot;author&quot; &quot;backref&quot; ## [16] &quot;concept&quot; &quot;describeIn&quot; &quot;description&quot; ## [19] &quot;details&quot; &quot;docType&quot; &quot;encoding&quot; ## [22] &quot;evalRd&quot; &quot;example&quot; &quot;examples&quot; ## [25] &quot;family&quot; &quot;field&quot; &quot;format&quot; ## [28] &quot;inherit&quot; &quot;inheritParams&quot; &quot;inheritDotParams&quot; ## [31] &quot;inheritSection&quot; &quot;keywords&quot; &quot;method&quot; ## [34] &quot;name&quot; &quot;md&quot; &quot;noMd&quot; ## [37] &quot;noRd&quot; &quot;note&quot; &quot;param&quot; ## [40] &quot;rdname&quot; &quot;rawRd&quot; &quot;references&quot; ## [43] &quot;return&quot; &quot;section&quot; &quot;seealso&quot; ## [46] &quot;slot&quot; &quot;source&quot; &quot;template&quot; ## [49] &quot;templateVar&quot; &quot;title&quot; &quot;usage&quot; 16.4 The DESCRIPTION file I never write the DESCRIPTION file myself, but rather it is generated it from a template when the package structure is initially created. It is useful to go into this file and edit it. Package: MyAwesomePackage Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R: person(given = &quot;First&quot;, family = &quot;Last&quot;, role = c(&quot;aut&quot;, &quot;cre&quot;), email = &quot;first.last@example.com&quot;, comment = c(ORCID = &quot;YOUR-ORCID-ID&quot;)) Description: What the package does (one paragraph). License: What license it uses Encoding: UTF-8 LazyData: true Often you want to have your package include other libraries so that the packages are available to be used in any functions you use. To do this, you’ll add lines to the description file. ```r Depends: magrittr Imports: dplyr, ggplot2, tidyr Suggests: lme4 ``` In this example, I’ve included a dependency on the magrittr package, which defines the %&gt;% operator, while dplyr, ggplot2, tidyr, and lme4 packages are included in a slightly different manner. Package Dependency Type Description Depends These packages are required to have been downloaded from CRAN and will be attached to the namespace when your package is loaded. If your package is going to be widely used, you want to keep this list as short as possible to avoid function name clashes. Imports These packages are required be present on the computer, but will not be attached to the namespace. Whenever you want to use them you must use then in one of your functions, you’ll need to use PackageName::FunctionName syntax. Suggests These packages are not required. Often these are packages of data that are only used in the examples, the unit tests, or in a vignette. These are not loaded/attached by default. For widely distributed packages, using Imports is preferred but that is annoying to be required to use the PackageName::FunctionName() syntax within all of the functions you write. The reason to avoid Depends is to avoid namespace problems. For example, because packages MASS and dplyr both have a select() function, it is advisable to avoid depending on dplyr just in case the user also has loaded the MASS package. For a data analysis package, I usually leave the Depends/Imports/Suggests blank and just load whatever analysis packages I need in an RMarkdown file that lives in the docs/ directory. 16.4.1 A Simple Analysis Package I find it is easiest to use RStudio to start a new package via File -&gt; New Project ... and then start a project in a new directory and finally select that we want a new R package. Alternatively we could use the usethis::create_package() function to build the minimal package. usethis::create_package(&#39;~/GitHub/TestPackage&#39;) # replace the path to where you want it... Once the package is created: Put any .csv or .xls data files you have in data-raw/ subdirectory. In that same directory, create a R script or Rmarkdown file that reads the data in, cleans it up by renaming columns, or whatever. An example R script might look something like this: library(tidyverse) # Read in the data. Do some cleaning/verification MaxTemp &lt;- read.csv(&#39;data-raw/FlagMaxTemp.csv&#39;) %&gt;% gather(&#39;DOM&#39;, &#39;MaxTemp&#39;, X1:X31) %&gt;% drop_na() %&gt;% mutate(DOM = str_remove(DOM, fixed(&#39;X&#39;)) ) %&gt;% mutate(Date = lubridate::ymd( paste( Year, Month, DOM )) ) %&gt;% select(Date, MaxTemp) # Save the data frame to the data/ directory as MaxTemp.rda usethis::use_data(MaxTemp) In the R/ directory, create file MaxTemp.R and when the package is built, this will document the dataset. #&#39; A time series of daily maximum temperatures in Flagstaff, AZ. #&#39; #&#39; @format a data frame with 10882 observations #&#39; \\describe{ #&#39; \\item{Date}{The date of observation as a POSIX date format.} #&#39; \\item{MaxTemp}{Daily maximum temperature in degrees Farhenheit.} #&#39; } #&#39; @source \\url{www.ncdc.noaa.gov} &quot;MaxTemp&quot; Build the package by going to Build tab. Click the More and select Document to create the data frame documentation. Click the Install and Restart to build the package. Create the docs/ directory and then create a RMarkdown file that does some analysis. --- title: &quot;My Awesome Analysis&quot; author: &quot;Derek Sonderegger&quot; date: &quot;9/18/2019&quot; output: html_document --- This Rmarkdown file will do the analysis. ` ``{r, eval=FALSE} library(TestPackage) # load TestPackage, which includes MaxTemp data frame. library(ggplot2) ggplot(MaxTemp, aex(x=Date, y=MaxTemp)) + geom_line() ` `` We see that the daily max temperature in Flagstaff varies quite a lot. 16.5 Sharing your Package The last step to a package is being able to share it with other people. We could either wrap up the package into a .tar.gz file or we could save the package to ssome version control platform like GitHub. For packages that are in a stable form and need to be available via CRAN or Bioconductor, then building a .tar.gz file is important. However when a package is just meant for yourself and your collaborators, I prefer to save the package to GitHub. I have several packages available on my GitHub account. I have a repository https://github.com/dereksonderegger/TestPackage that demonstrates a very simple package. To install this package, we can install it directly using the following: devtools::install_github(&#39;dereksonderegger/TestPackage&#39;) If you chose to share your package with others by sharing a .tar.gz file, then create the file using the Build tab and More -&gt; Build Source Package. Then to install the package, the user will run the R command install.packages(&#39;TestPackage_0.0.0.1.tar.gz&#39;, repos=NULL, type=&#39;source&#39;) 16.6 Exercises Build a package that contains a dataset that gives weather information at Flagstaff’s Pulliam Airport from 1950 to 2019. I have the data and metadata on my GitHub site and I downloaded the data on 9-19-19 from https://www.ncdc.noaa.gov/cdo-web/search. In the data, there are a bunch of columns that contain attribute information about the preceding column. I don’t think those are helpful, or at least the metadata didn’t explain how to interpret them. So remove those. Many of the later columns have values that are exclusively ones or zeros. I believe those indicate if the weather phenomena was present that day. Presumably a 1 is a yes, but I don’t know that. When I downloaded the data, I asked for “standard” units, so precipitation and snow amounts should be in inches, and temperature should be in Farenheit. Create a new package named YourName_FlagWeather. In the package, create the data-raw/ directory and place the data and metadata there. Build an R-script that reads in the data, does any necessary cleaning. Call your resulting data frame Flagstaff_Weather and save a .rda file to the data/ directory using the cammand usethis::use_data(Flagstaff_Weather) In the R/ directory, create a file Flagstaff_Weather.R that documents where the data came from and what each of the columns mean. Cause roxygen2 to build the appropriate documentation files. Use the Build tab, then More -&gt; Document. Load your package and restart your session of R, again using the Build tab. Create a new directory in your package called docs/. In that directory create a RMarkdown file that loads your package and uses the weather data to make a few graphs of weather phenomena over time. Suppose that we decided to change something in the data and we need to rebuild the package. Changing the name of one of the columns in your cleaning script. Re-run the cleaning script and the usethis::use_data command. Reinstall the package using the Build tab and Install and Restart. Verify that the Flagstaff_Weather object has changed. Verify that the documentation hasn’t changed yet. Update the documentation file for the dataset and re-run the documentation routine. Reinstall the package and check that the documentation is now correct. Now save the package as one file by building a source package using the Build tab, More -&gt; Build Source Package. This will create a .tar.gz file that you can easily upload to Bblearn. "],
["17-speeding-up-r.html", "Chapter 17 Speeding up R 17.1 Faster for loops? 17.2 Vectorizing loops 17.3 Parallel Processing 17.4 Parallelizing for loops 17.5 Parallel Aware Functions", " Chapter 17 Speeding up R library(microbenchmark) # for measuring how long stuff takes library(doMC) # do multi-core stuff library(foreach) # parallelizable for loops library(tidyverse) # dplyr, ggplot2, etc... library(faraway) # some examples library(boot) library(caret) library(glmnet) Eventually if you have large enough data sets, an R user eventually writes code that is slow to execute and needs to be sped up. This chapter tries to lay out common problems and bad habits and shows how to correct them. However, the correctness and maintainability of code should take precendence over speed. Too often, misguided attempts to obtain efficient code results in an unmaintainable mess that is no faster that the initial code. Hadley Wickham has a book aimed at advanced R user that describes many of the finer details about R. One section in the book describes his process for building fast, maintainable software projects and if you have the time, I highly suggest reading the on-line version, Advanced R. First we need some way of measuring how long our code took to run. For this we will use the package microbenchmark. The idea is that we want to evaluate two or three expressions that solve a problem. x &lt;- runif(1000) microbenchmark( sqrt(x), # First expression to compare x^(0.5) # second expression to compare ) %&gt;% print(digits=3) ## Unit: microseconds ## expr min lq mean median uq max neval cld ## sqrt(x) 2.51 3.62 4.24 3.8 3.98 49.5 100 a ## x^(0.5) 25.54 42.61 55.33 42.8 43.23 1112.0 100 b What microbenchmark does is run the two expressions a number of times and then produces the 5-number summary of those times. By running it multiple times, we account for the randomness associated with a operating system that is also running at the same time. 17.1 Faster for loops? Often we need to perform some simple action repeatedly. It is natural to write a for loop to do the action and we wish to speed the up. In this first case, we will consider having to do the action millions of times and each chunk of computation within the for takes very little time. Consider frame of 4 columns, and for each of \\(n\\) rows, we wish to know which column has the largest value. make.data &lt;- function(n){ data &lt;- cbind( rnorm(n, mean=5, sd=2), rpois(n, lambda = 5), rgamma(n, shape = 2, scale = 3), rexp(n, rate = 1/5)) data &lt;- data.frame(data) return(data) } data &lt;- make.data(100) The way that you might first think about solving this problem is to write a for loop and, for each row, figure it out. f1 &lt;- function( input ){ output &lt;- NULL for( i in 1:nrow(input) ){ output[i] &lt;- which.max( input[i,] ) } return(output) } We might consider that there are two ways to return a value from a function (using the return function and just printing it). In fact, I’ve always heard that using the return statment is a touch slower. f2.noReturn &lt;- function( input ){ output &lt;- NULL for( i in 1:nrow(input) ){ output[i] &lt;- which.max( input[i,] ) } output } data &lt;- make.data(100) microbenchmark( f1(data), f2.noReturn(data) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## f1(data) 3.21 3.5 4.28 3.91 4.66 9.14 100 a ## f2.noReturn(data) 3.23 3.5 4.34 3.73 4.33 12.70 100 a In fact, it looks like it is a touch slower, but not massively compared to the run-to-run variability. I prefer to use the return statement for readability, but if we agree have the last line of code in the function be whatever needs to be returned, readability isn’t strongly effected. We next consider whether it would be faster to allocate the output vector once we figure out the number of rows needed, or just build it on the fly? f3.AllocOutput &lt;- function( input ){ n &lt;- nrow(input) output &lt;- rep(NULL, n) for( i in 1:nrow(input) ){ output[i] &lt;- which.max( input[i,] ) } return(output) } microbenchmark( f1(data), f3.AllocOutput(data) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## f1(data) 3.2 3.50 4.55 3.77 4.73 16.7 100 a ## f3.AllocOutput(data) 3.3 3.49 4.28 3.74 4.35 12.1 100 a If anything, allocating the size of output first was slower. So given this, we shouldn’t feel to bad being lazy and using output &lt;- NULL to initiallize things. 17.2 Vectorizing loops In general, for loops in R are very slow and we want to avoid them as much as possible. The apply family of functions can be quite helpful for applying a function to each row or column of a matrix or data.frame or to each element of a list. To test this, instead of a for loop, we will use apply. f4.apply &lt;- function( input ){ output &lt;- apply(input, 1, which.max) return(output) } microbenchmark( f1(data), f4.apply(data) ) %&gt;% print(digits=3) ## Unit: microseconds ## expr min lq mean median uq max neval cld ## f1(data) 3181 3688 4268 3962 4517 10906 100 b ## f4.apply(data) 282 306 400 350 425 2805 100 a This is the type of speed up that matters. We have a 10-fold speed up in execution time and particularly the maximum time has dropped impressively. Unfortunately, I have always found the apply functions a little cumbersome and I prefer to use dplyr instead strictly for readability. f5.dplyr &lt;- function( input ){ output &lt;- input %&gt;% mutate( max.col=which.max( c(X1, X2, X3, X4) ) ) return(output$max.col) } microbenchmark( f4.apply(data), f5.dplyr(data) ) %&gt;% print(digits=3) ## Unit: microseconds ## expr min lq mean median uq max neval cld ## f4.apply(data) 272 298 349 316 371 687 100 a ## f5.dplyr(data) 492 531 744 604 758 5118 100 b Unfortunately dplyr is a lot slower than apply in this case. I wonder if the dynamics would change with a larger n? data &lt;- make.data(10000) microbenchmark( f4.apply(data), f5.dplyr(data) ) %&gt;% print(digits=3) ## Unit: microseconds ## expr min lq mean median uq max neval cld ## f4.apply(data) 22962 26073 29075 27506 31462 51208 100 b ## f5.dplyr(data) 747 954 1117 1084 1237 2295 100 a data &lt;- make.data(100000) microbenchmark( f4.apply(data), f5.dplyr(data) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## f4.apply(data) 267.33 319.62 434.32 421.42 480.99 831.9 100 b ## f5.dplyr(data) 2.22 2.74 3.41 2.92 3.29 18.7 100 a What just happened? The package dplyr is designed to work well for large data sets, and utilizes a modified structure, called a tibble, which provides massive benefits for large tables, but at the small scale, the overhead of converting the data.frame to a tibble overwhelms any speed up. But because the small sample case is already fast enough to not be noticable, we don’t really care about the small n case. 17.3 Parallel Processing Most modern computers have multiple computing cores, and can run muliple processes at the same time. Sometimes this means that you can run multiple programs and switch back and forth easily without lag, but we are now interested in using as many cores as possible to get our statistical calculations completed by using muliple processing cores at the same time. This is referred to as running the process “in parallel” and there are many tasks in modern statistical computing that are “embarrasingly easily parallelized”. In particular bootstrapping and cross validation techniques are extremely easy to implement in a parallel fashion. However, running commands in parallel incurs some overhead cost in set up computation, as well as all the message passing from core to core. For example, to have 5 cores all perform an analysis on a set of data, all 5 cores must have access to the data, and not overwrite any of it. So parallelizing code only makes sense if the individual steps that we pass to each core is of sufficient size that the overhead incurred is substantially less than the time to run the job. We should think of executing code in parallel as having three major steps: 1. Tell R that there are multiple computing cores available and to set up a useable cluster to which we can pass jobs to. 2. Decide what ‘computational chunk’ should be sent to each core and distribute all necessary data, libraries, etc to each core. 3. Combine the results of each core back into a unified object. 17.4 Parallelizing for loops There are a number of packages that allow you to tell R how many cores you have access to. One of the easiest ways to parallelize a for loop is using a package called foreach. The registration of multiple cores is actually pretty easy. doMC::registerDoMC(cores = 2) # my laptop only has two cores. We will consider an example that is common in modern statistics. We will examine parallel computing utilizing a bootstrap example where we create bootstrap samples for calculating confidence intervals for regression coefficients. ggplot(trees, aes(x=Girth, y=Volume)) + geom_point() + geom_smooth(method=&#39;lm&#39;) model &lt;- lm( Volume ~ Girth, data=trees) This is how we would do this previously. # f is a formula # df is the input data frame # M is the number of bootstrap iterations boot.for &lt;- function( f, df, M=999){ output &lt;- list() for( i in 1:100 ){ # Do stuff model.star &lt;- lm( f, data=df %&gt;% sample_frac(1, replace=TRUE) ) output[[i]] &lt;- model.star$coefficients } # use rbind to put the list of results together into a data.frame output &lt;- sapply(output, rbind) %&gt;% t() %&gt;% data.frame() return(output) } We will first ask about how to do the same thing using the function foreach # f is a formula # df is the input data frame # M is the number of bootstrap iterations boot.foreach &lt;- function(f, df, M=999){ output &lt;- foreach( i=1:100 ) %dopar% { # Do stuff model.star &lt;- lm( f, data=df %&gt;% sample_frac(1, replace=TRUE) ) model.star$coefficients } # use rbind to put the list of results together into a data.frame output &lt;- sapply(output, rbind) %&gt;% t() %&gt;% data.frame() return(output) } Not much has changed in our code. Lets see which is faster. microbenchmark( boot.for( Volume~Girth, trees ), boot.foreach( Volume~Girth, trees ) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## boot.for(Volume ~ Girth, trees) 112 135 154 152 164 369 100 a ## boot.foreach(Volume ~ Girth, trees) 162 178 205 195 229 364 100 b In this case, the overhead associated with splitting the job across two cores, copying the data over, and then combining the results back together was more than we saved by using both cores. If the nugget of computation within each pass of the for loop was larger, then it would pay to use both cores. # massiveTrees has 31000 observations massiveTrees &lt;- NULL for( i in 1:1000 ){ massiveTrees &lt;- rbind(massiveTrees, trees) } microbenchmark( boot.for( Volume~Girth, massiveTrees ) , boot.foreach( Volume~Girth, massiveTrees ) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq ## boot.for(Volume ~ Girth, massiveTrees) 1184 1367 1434 1419 1471 ## boot.foreach(Volume ~ Girth, massiveTrees) 673 695 870 746 916 ## max neval cld ## 2032 100 b ## 1830 100 a Because we often generate a bunch of results that we want to see as a data.frame, the foreach function includes and option to do it for us. output &lt;- foreach( i=1:100, .combine=data.frame ) %dopar% { # Do stuff model.star &lt;- lm( Volume ~ Girth, data= trees %&gt;% sample_frac(1, replace=TRUE) ) model$coefficients } It is important to recognize that the data.frame trees was utilized inside the foreach loop. So when we called the foreach loop and distributed the workload across the cores, it was smart enough to distribute the data to each core. However, if there were functions that we utilized inside the foor loop that came from a packege, we need to tell each core to load the function. output &lt;- foreach( i=1:1000, .combine=data.frame, .packages=&#39;dplyr&#39; ) %dopar% { # Do stuff model.star &lt;- lm( Volume ~ Girth, data= trees %&gt;% sample_frac(1, replace=TRUE) ) model.star$coefficients } 17.5 Parallel Aware Functions There are many packages that address problems that are “embarassingly easily parallelized” and they will happily work with multiple cores. Methods that rely on resampling certainly fit into this category. 17.5.1 boot::boot Bootstrapping relys on resampling the dataset and calculating test statistics from each resample. In R, the most common way to do this is using the package boot and we just need to tell the boot function, to use the multiple cores available. (Note, we have to have registered the cores first!) model &lt;- lm( Volume ~ Girth, data=trees) my.fun &lt;- function(df, index){ model.star &lt;- lm( Volume ~ Girth, data= trees[index,] ) model.star$coefficients } microbenchmark( serial = boot::boot( trees, my.fun, R=1000 ), parallel = boot::boot( trees, my.fun, R=1000, parallel=&#39;multicore&#39;, ncpus=2 ) ) %&gt;% print(digits=3) ## Unit: milliseconds ## expr min lq mean median uq max neval cld ## serial 618 654 717 715 759 1046 100 b ## parallel 539 582 623 598 632 1007 100 a In this case, we had a bit of a spead up, but not a factor of 2. This is due to the overhead of splitting the job across both cores. 17.5.2 caret::train The statistical learning package caret also handles all the work to do cross validation in a parallel computing environment. The functions in caret have an option allowParallel which by default is TRUE, which controls if we should use all the cores. Assuming we have already registered the number of cores, then by default caret will use them all. library(faraway) library(caret) ctrl.serial &lt;- trainControl( method=&#39;repeatedcv&#39;, number=5, repeats=4, preProcOptions = c(&#39;center&#39;,&#39;scale&#39;), allowParallel = FALSE) ctrl.parallel &lt;- trainControl( method=&#39;repeatedcv&#39;, number=5, repeats=4, preProcOptions = c(&#39;center&#39;,&#39;scale&#39;), allowParallel = TRUE) grid &lt;- data.frame( alpha = 1, # 1 =&gt; Lasso Regression lambda = exp(seq(-6, 1, length=50))) microbenchmark( model &lt;- train( lpsa ~ ., data=prostate, method=&#39;glmnet&#39;, trControl=ctrl.serial, tuneGrid=grid, lambda = grid$lambda ), model &lt;- train( lpsa ~ ., data=prostate, method=&#39;glmnet&#39;, trControl=ctrl.parallel, tuneGrid=grid, lambda = grid$lambda ) ) %&gt;% print(digits=3) ## Unit: seconds ## expr ## model &lt;- train(lpsa ~ ., data = prostate, method = &quot;glmnet&quot;, trControl = ctrl.serial, tuneGrid = grid, lambda = grid$lambda) ## model &lt;- train(lpsa ~ ., data = prostate, method = &quot;glmnet&quot;, trControl = ctrl.parallel, tuneGrid = grid, lambda = grid$lambda) ## min lq mean median uq max neval cld ## 1.18 1.22 1.26 1.24 1.28 1.60 100 a ## 1.20 1.24 1.29 1.26 1.29 2.12 100 a Again, we saw only moderate gains by using both cores, however it didn’t really cost us anything. Because the caret package by default allows parallel processing, it doesn’t hurt to just load the doMC package and register the number of cores. Even in just the two core case, it is a good habit to get into so that when you port your code to a huge computer with many cores, the only thing to change is how many cores you have access to. "]
]
